[
    {
        "commitAuthor": "userB",
        "commitSha": "fa8b13903ad793dd99064536105c8d561d6ea1d5",
        "filesEdited": [
            "README.md"
        ],
        "additionsPerFile": [
            {
                "README.md": [
                    "## This is a repository used for testing the developed code contribution software",
                    "",
                    "All code in this repository was taken from the Clucker project"
                ]
            }
        ],
        "deletionsPerFile": [
            {}
        ]
    },
    {
        "commitAuthor": "userA",
        "commitSha": "9b9e118456fe0072296b8f9ad505a0069bf01937",
        "filesEdited": [],
        "additionsPerFile": [
            {}
        ],
        "deletionsPerFile": [
            {}
        ]
    },
    {
        "commitAuthor": "userA",
        "commitSha": "983403b2ec858a7f01b11739a9514c4a4488e11c",
        "filesEdited": [
            "microblogs/follow_views.py",
            "microblogs/models.py"
        ],
        "additionsPerFile": [
            {
                "microblogs/follow_views.py": [
                    "        if followee:",
                    "            print(\"followee found\")"
                ],
                "microblogs/models.py": [
                    "        if gravatar_object:",
                    "            print(gravatar_object)"
                ]
            }
        ],
        "deletionsPerFile": [
            {
                "microblogs/follow_views.py": [
                    "        print(\"followee found\")"
                ]
            }
        ]
    },
    {
        "commitAuthor": "userA",
        "commitSha": "d5b2c62d3c6f40e923de2c5ff118f8d090079c7b",
        "filesEdited": [
            "microblogs/feed_views.py",
            "microblogs/follow_views.py",
            "microblogs/templates/show_user.html"
        ],
        "additionsPerFile": [
            {
                "microblogs/feed_views.py": [
                    "\"\"\"Feed related views.\"\"\"",
                    "from django.conf import settings",
                    "from django.contrib.auth.mixins import LoginRequiredMixin",
                    "from django.views.generic import ListView",
                    "from microblogs.forms import PostForm",
                    "from microblogs.models import Post",
                    "",
                    "class FeedView(LoginRequiredMixin, ListView):",
                    "    \"\"\"Class-based generic view for displaying a view.\"\"\"",
                    "",
                    "    model = Post",
                    "    template_name = \"feed.html\"",
                    "    context_object_name = 'posts'",
                    "    paginate_by = settings.POSTS_PER_PAGE",
                    "",
                    "    def get_queryset(self):",
                    "        \"\"\"Return the user's feed.\"\"\"",
                    "        current_user = self.request.user",
                    "        authors = list(current_user.followees.all()) + [current_user]",
                    "        posts = Post.objects.filter(author__in=authors)",
                    "        return posts",
                    "",
                    "    def get_context_data(self, **kwargs):",
                    "        \"\"\"Return context data, including new post form.\"\"\"",
                    "        context = super().get_context_data(**kwargs)",
                    "        context['user'] = self.request.user",
                    "        context['form'] = PostForm()",
                    "        return context"
                ],
                "microblogs/follow_views.py": [
                    "        print(\"followee found\")"
                ],
                "microblogs/templates/show_user.html": [
                    "{% extends 'base_content.html' %}",
                    "{% block content %}",
                    "<div class=\"container\">",
                    "  <div class=\"row content\">",
                    "    <div class=\"col-xs-12 col-lg-6 col-xl-4\">",
                    "      {% include 'partials/user_profile.html' with following=following followable=followable %}",
                    "    </div>",
                    "    <div class=\"col-xs-12 col-lg-6 col-xl-8\">",
                    "      {% include 'partials/post_pager.html' with page_obj=page_obj%}",
                    "      {% include 'partials/posts_as_table.html' with posts=posts %}",
                    "      {% include 'partials/post_pager.html' with page_obj=page_obj%}",
                    "    </div>",
                    "  </div>",
                    "</div>",
                    "{% endblock %}"
                ]
            }
        ],
        "deletionsPerFile": [
            {
                "microblogs/follow_views.py": [
                    "        print(\"got followee\")"
                ]
            }
        ]
    },
    {
        "commitAuthor": "userC",
        "commitSha": "2c75215aff78709f244dd2d44f2229d8b3cb63b5",
        "filesEdited": [
            "microblogs/follow_views.py",
            "microblogs/forms.py",
            "microblogs/models.py",
            "microblogs/views.py"
        ],
        "additionsPerFile": [
            {
                "microblogs/follow_views.py": [
                    "\"\"\"Follow related views.\"\"\"",
                    "from django.contrib.auth.decorators import login_required",
                    "from django.core.exceptions import ObjectDoesNotExist",
                    "from django.shortcuts import redirect",
                    "from microblogs.models import User",
                    "",
                    "@login_required",
                    "def follow_toggle(request, user_id):",
                    "    current_user = request.user",
                    "    try:",
                    "        followee = User.objects.get(id=user_id)",
                    "        print(\"got followee\")",
                    "        current_user.toggle_follow(followee)",
                    "    except ObjectDoesNotExist:",
                    "        return redirect('user_list')",
                    "    else:",
                    "        return redirect('show_user', user_id=user_id)"
                ],
                "microblogs/forms.py": [
                    ""
                ],
                "microblogs/models.py": [
                    "",
                    "    class Meta:",
                    "        \"\"\"Model options.\"\"\"",
                    "",
                    "        ordering = ['last_name', 'first_name']",
                    "",
                    "    def full_name(self):",
                    "        return f'{self.first_name} {self.last_name}'",
                    "",
                    "    def gravatar(self, size=120):",
                    "        \"\"\"Return a URL to the user's gravatar.\"\"\"",
                    "        gravatar_object = Gravatar(self.email)",
                    "        gravatar_url = gravatar_object.get_image(size=size, default='mp')",
                    "        return gravatar_url",
                    "",
                    "    def mini_gravatar(self):",
                    "        \"\"\"Return a URL to a miniature version of the user's gravatar.\"\"\"",
                    "        print(\"Returning mini gravatar!\")",
                    "        return self.gravatar(size=60)"
                ]
            }
        ],
        "deletionsPerFile": [
            {
                "microblogs/forms.py": [
                    "    ",
                    ""
                ],
                "microblogs/views.py": [
                    "    # response = HttpResponse(\"Welcome to clucker!\")",
                    "    # response = HttpResponse(\"Welcome to clucker!\")"
                ]
            }
        ]
    },
    {
        "commitAuthor": "userB",
        "commitSha": "431dc759ff4213c96d697537f1efcdf35a03d91c",
        "filesEdited": [
            "microblogs/forms.py"
        ],
        "additionsPerFile": [
            {
                "microblogs/forms.py": [
                    "",
                    "class UserForm(forms.ModelForm):",
                    "    \"\"\"Form to update user profiles.\"\"\"",
                    "        model = User",
                    "        fields = ['first_name', 'last_name', 'username', 'email', 'bio']",
                    "        widgets = { 'bio': forms.Textarea() }"
                ]
            }
        ],
        "deletionsPerFile": [
            {
                "microblogs/forms.py": [
                    "    ",
                    " ",
                    "class PostForm(forms.ModelForm):",
                    " \"\"\"Form to ask user for post text.",
                    "The post author must be by the post creator.\"\"\"",
                    "        model = Post",
                    "        fields = ['text']",
                    "        widgets = {",
                    "            'text': forms.Textarea()",
                    "        }"
                ]
            }
        ]
    },
    {
        "commitAuthor": "userB",
        "commitSha": "6927c49c65e19fa78660425290fdc77b9adba444",
        "filesEdited": [
            "microblogs/templates/base.html"
        ],
        "additionsPerFile": [
            {
                "microblogs/templates/base.html": [
                    "{% load static %}",
                    "<!doctype html>",
                    "<html lang=\"en\">",
                    "  <head>",
                    "    <meta charset=\"utf-8\">",
                    "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">",
                    "    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-uWxY/CJNBR+1zjPWmfnSnVxwRheevXITnMqoEIeG1LJrdI0GlVs/9cVSyPYXdcSF\" crossorigin=\"anonymous\">",
                    "    <link href=\"{% static 'custom.css' %}\" rel=\"stylesheet\">",
                    "    <link href=\"{% static 'chicken_font.css' %}\" rel=\"stylesheet\">",
                    "    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css\">",
                    "    <title>Clucker</title>",
                    "  </head>",
                    "  <body>",
                    "    {% block body %}",
                    "    {% endblock %}",
                    "    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js\" integrity=\"sha384-7+zCNj/IqJ95wo16oMtfsKbZ9ccEh31eOz1HGyDuCQ6wgnyJNSYdrPa03rtR1zdB\" crossorigin=\"anonymous\"></script>",
                    "    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.2/dist/js/bootstrap.min.js\" integrity=\"sha384-PsUw7Xwds7x08Ew3exXhqzbhuEYmA2xnwc8BuD6SEr+UmEHlX8/MCltYEodzWA4u\" crossorigin=\"anonymous\"></script>",
                    "  </body>",
                    "</html>"
                ]
            }
        ],
        "deletionsPerFile": [
            {}
        ]
    },
    {
        "commitAuthor": "userC",
        "commitSha": "6aae74f4030d45e78122357e468ddfca1ce50136",
        "filesEdited": [
            "microblogs/forms.py"
        ],
        "additionsPerFile": [
            {
                "microblogs/forms.py": [
                    "    ",
                    "    ",
                    " ",
                    "class PostForm(forms.ModelForm):",
                    " \"\"\"Form to ask user for post text.",
                    "The post author must be by the post creator.\"\"\"",
                    "",
                    "    class Meta:",
                    "        \"\"\"Form options.\"\"\"",
                    "",
                    "        model = Post",
                    "        fields = ['text']",
                    "        widgets = {",
                    "            'text': forms.Textarea()",
                    "        }"
                ]
            }
        ],
        "deletionsPerFile": [
            {}
        ]
    },
    {
        "commitAuthor": "userC",
        "commitSha": "30afc0c2a893a55b1824eec272e5d8a82dfd9e68",
        "filesEdited": [
            "microblogs/templates/home.html"
        ],
        "additionsPerFile": [
            {
                "microblogs/templates/home.html": [
                    "{% extends 'base.html' %}",
                    "{% block body %}",
                    "<div id=\"cover-image\">",
                    "  <div class=\"container vh-100\">",
                    "    <div class=\"row h-100\">",
                    "      <div class=\"col-12 my-auto\">",
                    "        <div class=\"card cover-card offset-sm-2 offset-md-4 offset-lg-7\">",
                    "          <h1 class=\"cover-heading\">Clucker</h1>",
                    "          <p class=\"cover-text\">The place for free range conversation</p>",
                    "          <p>",
                    "            <a href='{% url 'sign_up' %}' class=\"btn btn-lg btn-secondary\">",
                    "              Sign up",
                    "            </a>",
                    "          </p>",
                    "          <p>",
                    "            <a href='{% url 'log_in' %}' class=\"btn btn-lg btn-secondary\">",
                    "              Log in",
                    "            </a>",
                    "          </p>",
                    "        </div>",
                    "      </div>",
                    "    </div>",
                    "  </div>",
                    "</div>",
                    "{% endblock %}"
                ]
            }
        ],
        "deletionsPerFile": [
            {
                "microblogs/templates/home.html": [
                    "<html>",
                    "<head>",
                    "  <title>Clucker</title>",
                    "</head>",
                    "  <body>",
                    "    <h1>Clucker</h1>",
                    "    <p>The place for free range conversation</p>",
                    "    <p><a href='{% url 'sign_up'%}'>Sign up </a></p>",
                    "    <p><a href='#'>Log in </a></p>",
                    "  </body>",
                    "</html>"
                ]
            }
        ]
    },
    {
        "commitAuthor": "userA",
        "commitSha": "93fe47e799d57b33177e2edb75036a46ed3e914a",
        "filesEdited": [
            "microblogs/templates/home.html",
            "microblogs/templates/sign_up.html"
        ],
        "additionsPerFile": [
            {
                "microblogs/templates/home.html": [
                    "<html>",
                    "<head>",
                    "  <title>Clucker</title>",
                    "</head>",
                    "  <body>",
                    "    <h1>Clucker</h1>",
                    "    <p>The place for free range conversation</p>",
                    "    <p><a href='{% url 'sign_up'%}'>Sign up </a></p>",
                    "    <p><a href='#'>Log in </a></p>",
                    "  </body>",
                    "</html>"
                ],
                "microblogs/templates/sign_up.html": [
                    "<html>",
                    "<head>",
                    "  <title>Clucker</title>",
                    "</head>",
                    "  <body>",
                    "    <h1>Sign up</h1>",
                    "    <form action=\"{% url 'sign_up' %}\" method=\"post\">",
                    "      {% csrf_token %}",
                    "      {{ form.as_p }}",
                    "      <input type=\"submit\" value=\"Sign up\">",
                    "    </form>",
                    "  </body>",
                    "</html>"
                ]
            }
        ],
        "deletionsPerFile": [
            {}
        ]
    },
    {
        "commitAuthor": "userA",
        "commitSha": "56d7294e57ffd680c6aefc37eff3113b7a06d8f1",
        "filesEdited": [
            "microblogs/authentication_views.py"
        ],
        "additionsPerFile": [
            {
                "microblogs/authentication_views.py": [
                    "        # comment!"
                ]
            }
        ],
        "deletionsPerFile": [
            {
                "microblogs/authentication_views.py": [
                    "",
                    "",
                    "def log_out(request):",
                    "    logout(request)",
                    "    return redirect('home')"
                ]
            }
        ]
    },
    {
        "commitAuthor": "userA",
        "commitSha": "1e1dbf76073f5c888a3d6af9a55a229d2834a6d7",
        "filesEdited": [
            "cluckerNew/settings.py",
            "cluckerNew/urls.py",
            "microblogs/admin.py",
            "microblogs/apps.py",
            "microblogs/authentication_views.py",
            "microblogs/forms.py",
            "microblogs/migrations/0001_initial.py",
            "microblogs/models.py",
            "microblogs/views.py"
        ],
        "additionsPerFile": [
            {
                "cluckerNew/settings.py": [
                    "\"\"\"",
                    "Django settings for cluckerNew project.",
                    "",
                    "Generated by 'django-admin startproject' using Django 3.2.8.",
                    "",
                    "For more information on this file, see",
                    "https://docs.djangoproject.com/en/3.2/topics/settings/",
                    "",
                    "For the full list of settings and their values, see",
                    "https://docs.djangoproject.com/en/3.2/ref/settings/",
                    "\"\"\"",
                    "",
                    "from pathlib import Path",
                    "",
                    "# Build paths inside the project like this: BASE_DIR / 'subdir'.",
                    "BASE_DIR = Path(__file__).resolve().parent.parent",
                    "",
                    "",
                    "# Quick-start development settings - unsuitable for production",
                    "# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/",
                    "",
                    "# SECURITY WARNING: keep the secret key used in production secret!",
                    "SECRET_KEY = 'django-insecure-m0+%05wxu0vtjgq#fv5c+c(v3^0fhtdc=fn2^y-2bqjp^)7289'",
                    "",
                    "# SECURITY WARNING: don't run with debug turned on in production!",
                    "DEBUG = True",
                    "",
                    "ALLOWED_HOSTS = []",
                    "",
                    "",
                    "# Application definition",
                    "",
                    "INSTALLED_APPS = [",
                    "    'django.contrib.admin',",
                    "    'django.contrib.auth',",
                    "    'django.contrib.contenttypes',",
                    "    'django.contrib.sessions',",
                    "    'django.contrib.messages',",
                    "    'django.contrib.staticfiles',",
                    "    'microblogs',",
                    "]",
                    "",
                    "MIDDLEWARE = [",
                    "    'django.middleware.security.SecurityMiddleware',",
                    "    'django.contrib.sessions.middleware.SessionMiddleware',",
                    "    'django.middleware.common.CommonMiddleware',",
                    "    'django.middleware.csrf.CsrfViewMiddleware',",
                    "    'django.contrib.auth.middleware.AuthenticationMiddleware',",
                    "    'django.contrib.messages.middleware.MessageMiddleware',",
                    "    'django.middleware.clickjacking.XFrameOptionsMiddleware',",
                    "]",
                    "",
                    "ROOT_URLCONF = 'cluckerNew.urls'",
                    "",
                    "TEMPLATES = [",
                    "    {",
                    "        'BACKEND': 'django.template.backends.django.DjangoTemplates',",
                    "        'DIRS': [],",
                    "        'APP_DIRS': True,",
                    "        'OPTIONS': {",
                    "            'context_processors': [",
                    "                'django.template.context_processors.debug',",
                    "                'django.template.context_processors.request',",
                    "                'django.contrib.auth.context_processors.auth',",
                    "                'django.contrib.messages.context_processors.messages',",
                    "            ],",
                    "        },",
                    "    },",
                    "]",
                    "",
                    "WSGI_APPLICATION = 'cluckerNew.wsgi.application'",
                    "",
                    "",
                    "# Database",
                    "# https://docs.djangoproject.com/en/3.2/ref/settings/#databases",
                    "",
                    "DATABASES = {",
                    "    'default': {",
                    "        'ENGINE': 'django.db.backends.sqlite3',",
                    "        'NAME': BASE_DIR / 'db.sqlite3',",
                    "    }",
                    "}",
                    "",
                    "",
                    "# Password validation",
                    "# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators",
                    "",
                    "AUTH_PASSWORD_VALIDATORS = [",
                    "    {",
                    "        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',",
                    "    },",
                    "    {",
                    "        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',",
                    "    },",
                    "    {",
                    "        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',",
                    "    },",
                    "    {",
                    "        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',",
                    "    },",
                    "]",
                    "",
                    "",
                    "# Internationalization",
                    "# https://docs.djangoproject.com/en/3.2/topics/i18n/",
                    "",
                    "LANGUAGE_CODE = 'en-us'",
                    "",
                    "TIME_ZONE = 'UTC'",
                    "",
                    "USE_I18N = True",
                    "",
                    "USE_L10N = True",
                    "",
                    "USE_TZ = True",
                    "",
                    "",
                    "# Static files (CSS, JavaScript, Images)",
                    "# https://docs.djangoproject.com/en/3.2/howto/static-files/",
                    "",
                    "STATIC_URL = '/static/'",
                    "",
                    "# Default primary key field type",
                    "# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field",
                    "",
                    "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
                    "",
                    "# User model for authentification purposes",
                    "AUTH_USER_MODEL = 'microblogs.User'"
                ],
                "cluckerNew/urls.py": [
                    "\"\"\"cluckerNew URL Configuration",
                    "",
                    "The `urlpatterns` list routes URLs to views. For more information please see:",
                    "    https://docs.djangoproject.com/en/3.2/topics/http/urls/",
                    "Examples:",
                    "Function views",
                    "    1. Add an import:  from my_app import views",
                    "    2. Add a URL to urlpatterns:  path('', views.home, name='home')",
                    "Class-based views",
                    "    1. Add an import:  from other_app.views import Home",
                    "    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')",
                    "Including another URLconf",
                    "    1. Import the include() function: from django.urls import include, path",
                    "    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))",
                    "\"\"\"",
                    "from django.contrib import admin",
                    "from django.urls import path",
                    "from microblogs import views",
                    "",
                    "urlpatterns = [",
                    "    path('admin/', admin.site.urls),",
                    "    path('', views.home, name ='home'),",
                    "    path('sign_up/', views.sign_up, name ='sign_up'),",
                    "]"
                ],
                "microblogs/admin.py": [
                    "\"\"\"Configuration of the administrative interface for microblogs. \"\"\"",
                    "from django.contrib import admin",
                    "from .models import User",
                    "",
                    "# Register your models here.",
                    "@admin.register(User)",
                    "class UserAdmin(admin.ModelAdmin):",
                    "    \"\"\"Configuration of the admininterface for users.\"\"\"",
                    "",
                    "    list_display = [",
                    "        'username', 'first_name',",
                    "    ]"
                ],
                "microblogs/apps.py": [
                    "from django.apps import AppConfig",
                    "",
                    "",
                    "class MicroblogsConfig(AppConfig):",
                    "    default_auto_field = 'django.db.models.BigAutoField'",
                    "    name = 'microblogs'"
                ],
                "microblogs/authentication_views.py": [
                    "\"\"\"Authenticated related views.\"\"\"",
                    "from django.conf import settings",
                    "from django.contrib import messages",
                    "from django.contrib.auth import login, logout",
                    "from django.shortcuts import redirect, render",
                    "from django.views import View",
                    "from django.urls import reverse",
                    "from microblogs.forms import LogInForm",
                    "from .mixins import LoginProhibitedMixin",
                    "",
                    "",
                    "class LogInView(LoginProhibitedMixin, View):",
                    "    \"\"\"View that handles log in.\"\"\"",
                    "",
                    "    http_method_names = ['get', 'post']",
                    "    redirect_when_logged_in_url = 'feed'",
                    "",
                    "    def get(self, request):",
                    "        \"\"\"Display log in template.\"\"\"",
                    "",
                    "        self.next = request.GET.get('next') or ''",
                    "        return self.render()",
                    "",
                    "    def render(self):",
                    "        \"\"\"Render log in template with blank log in form.\"\"\"",
                    "",
                    "        form = LogInForm()",
                    "        return render(self.request, 'log_in.html', {'form': form, 'next': self.next})",
                    "",
                    "",
                    "def log_out(request):",
                    "    logout(request)",
                    "    return redirect('home')"
                ],
                "microblogs/forms.py": [
                    "from django import forms",
                    "from .models import User",
                    "",
                    "class SignUpForm(forms.ModelForm):",
                    "    class Meta:",
                    "        model = User",
                    "        fields = ['first_name', 'username',]",
                    "        widgets = { 'bio': forms.Textarea() }",
                    "",
                    "    new_password = forms.CharField(label='Password', widget=forms.PasswordInput())",
                    "    password_confirmation = forms.CharField(label='Password confirmation', widget=forms.PasswordInput())"
                ],
                "microblogs/migrations/0001_initial.py": [
                    "# Generated by Django 3.2.8 on 2021-10-22 21:59",
                    "",
                    "import django.contrib.auth.models",
                    "import django.core.validators",
                    "from django.db import migrations, models",
                    "import django.utils.timezone",
                    "",
                    "",
                    "class Migration(migrations.Migration):",
                    "",
                    "    initial = True",
                    "",
                    "    dependencies = [",
                    "        ('auth', '0012_alter_user_first_name_max_length'),",
                    "    ]",
                    "",
                    "    operations = [",
                    "        migrations.CreateModel(",
                    "            name='User',",
                    "            fields=[",
                    "                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
                    "                ('password', models.CharField(max_length=128, verbose_name='password')),",
                    "                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),",
                    "                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),",
                    "                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),",
                    "                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),",
                    "                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),",
                    "                ('username', models.CharField(max_length=30, unique=True, validators=[django.core.validators.RegexValidator(message='Username must consist of @ followed by at least three alphanumericals', regex='^@\\\\w{3,}$')])),",
                    "                ('first_name', models.CharField(max_length=50)),",
                    "                ('last_name', models.CharField(max_length=50)),",
                    "                ('email', models.EmailField(max_length=254, unique=True)),",
                    "                ('bio', models.CharField(blank=True, max_length=520)),",
                    "                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),",
                    "                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),",
                    "            ],",
                    "            options={",
                    "                'verbose_name': 'user',",
                    "                'verbose_name_plural': 'users',",
                    "                'abstract': False,",
                    "            },",
                    "            managers=[",
                    "                ('objects', django.contrib.auth.models.UserManager()),",
                    "            ],",
                    "        ),",
                    "    ]"
                ],
                "microblogs/models.py": [
                    "from django.core.validators import RegexValidator",
                    "from django.db import models",
                    "from django.contrib.auth.models import AbstractUser",
                    "# Create your models here.",
                    "",
                    "class User(AbstractUser):",
                    "    username = models.CharField(",
                    "        max_length=30,",
                    "        unique=True,",
                    "        validators=[RegexValidator(",
                    "            regex=r'^@\\w{3,}$',",
                    "            message='Username must consist of @ followed by at least three alphanumericals'",
                    "      )])",
                    "    first_name = models.CharField(max_length=50, blank=False)"
                ],
                "microblogs/views.py": [
                    "from django.shortcuts import render",
                    "# from django.http import HttpResponse",
                    "from .forms import SignUpForm",
                    "",
                    "# Create your views here.",
                    "def home(request):",
                    "    # response = HttpResponse(\"Welcome to clucker!\")",
                    "    return render(request, 'home.html')",
                    "",
                    "def sign_up(request):",
                    "    # response = HttpResponse(\"Welcome to clucker!\")",
                    "    form = SignUpForm()",
                    "    return render(request, 'sign_up.html',  {'form': form})"
                ]
            }
        ],
        "deletionsPerFile": [
            {}
        ]
    }
]