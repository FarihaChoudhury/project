[{"commitAuthor": "lisa947", "commitSha": "1204f24536ce485fe1249bbcb787c92170077b23", "filesEdited": ["README.md"], "additionsPerFile": [{"README.md": ["The deployed version of the application can be found at [https://chess-club-team-scarlet-2021.herokuapp.com]"]}], "deletionsPerFile": [{"README.md": ["The deployed version of the application can be found at [https://arcane-hamlet-74431.herokuapp.com]"]}]}, {"commitAuthor": "lisa947", "commitSha": "4a6fbb5b4878d37794e6751e9b640a7684b62bf9", "filesEdited": ["clubs/migrations/0001_initial.py", "clubs/migrations/0002_auto_20211217_1802.py", "clubs/models.py", "clubs/tests/views/test_generate_match_view.py", "clubs/tests/views/test_generate_next_matches_view.py", "clubs/tests/views/test_log_winners_toggle_view.py", "clubs/tests/views/test_next_match_view.py"], "additionsPerFile": [{"clubs/migrations/0001_initial.py": ["# Generated by Django 3.2.8 on 2021-12-17 18:01", "from django.utils.timezone import utc", "                ('deadline', models.DateTimeField(default=datetime.datetime(2021, 12, 18, 18, 1, 51, 573785, tzinfo=utc))),", "                ('start_time', models.DateTimeField(default=datetime.datetime(2021, 12, 19, 18, 1, 51, 573801, tzinfo=utc))),", "                'ordering': ['-deadline'],"], "clubs/migrations/0002_auto_20211217_1802.py": ["# Generated by Django 3.2.8 on 2021-12-17 18:02", "", "import datetime", "from django.db import migrations, models", "from django.utils.timezone import utc", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0001_initial'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='tournament',", "            name='deadline',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 18, 18, 2, 5, 999609, tzinfo=utc)),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='start_time',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 19, 18, 2, 5, 999625, tzinfo=utc)),", "        ),", "    ]"], "clubs/models.py": ["", "        ordering = [\"-deadline\"]"]}], "deletionsPerFile": [{"clubs/migrations/0001_initial.py": ["# Generated by Django 3.2.8 on 2021-12-17 16:37", "from django.utils.timezone import utc", "                ('deadline', models.DateTimeField(default=datetime.datetime(2021, 12, 18, 16, 37, 24, 28899, tzinfo=utc))),", "                ('start_time', models.DateTimeField(default=datetime.datetime(2021, 12, 19, 16, 37, 24, 28913, tzinfo=utc))),", "                'ordering': ['created_at'],", "        migrations.AddField(", "            model_name='club',", "            name='tournament_list',", "            field=models.ManyToManyField(blank=True, related_name='tournament_list', to='clubs.Tournament'),", "        ),", "        migrations.AddField(", "            model_name='club',", "            name='tournament_member',", "            field=models.ManyToManyField(blank=True, related_name='tournament_member', to='clubs.Tournament'),", "        ),"], "clubs/models.py": ["    tournament_member = models.ManyToManyField('Tournament', related_name='tournament_member', blank=True)", "    tournament_list = models.ManyToManyField('Tournament', related_name='tournament_list', blank=True)", "", "        ordering = [\"created_at\"]", "", "", "", "", "", "", ""], "clubs/tests/views/test_generate_match_view.py": ["        self.club.tournament_list.add(self.tournament)"], "clubs/tests/views/test_generate_next_matches_view.py": ["        self.club.tournament_list.add(self.tournament)"], "clubs/tests/views/test_log_winners_toggle_view.py": ["        self.club.tournament_list.add(self.tournament)"], "clubs/tests/views/test_next_match_view.py": ["        self.club.tournament_list.add(self.tournament)"]}]}, {"commitAuthor": "lisa947", "commitSha": "6a107946e15b7bb83d31a8caf466986d7ccf5c0f", "filesEdited": ["clubs/migrations/0001_initial.py", "clubs/migrations/0002_alter_tournament_start_time.py", "clubs/migrations/0003_auto_20211216_1000.py", "clubs/migrations/0004_auto_20211216_1012.py", "clubs/migrations/0005_auto_20211216_1013.py", "clubs/migrations/0006_auto_20211217_1132.py", "clubs/migrations/0007_auto_20211217_1254.py"], "additionsPerFile": [{"clubs/migrations/0001_initial.py": ["# Generated by Django 3.2.8 on 2021-12-17 16:37", "import django.utils.timezone", "                ('chess_experience_level', models.IntegerField(choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], default=0)),", "                ('applicants', models.ManyToManyField(blank=True, related_name='applicants', to=settings.AUTH_USER_MODEL)),", "                ('members', models.ManyToManyField(blank=True, related_name='members', to=settings.AUTH_USER_MODEL)),", "                ('officer_applicants', models.ManyToManyField(blank=True, related_name='officer_applicants', to=settings.AUTH_USER_MODEL)),", "                ('officers', models.ManyToManyField(blank=True, related_name='officers', to=settings.AUTH_USER_MODEL)),", "                ('tournament_name', models.CharField(max_length=20, unique=True)),", "                ('number_of_participants', models.IntegerField(choices=[(2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16)], default=2)),", "                ('deadline', models.DateTimeField(default=datetime.datetime(2021, 12, 18, 16, 37, 24, 28899, tzinfo=utc))),", "                ('start_time', models.DateTimeField(default=datetime.datetime(2021, 12, 19, 16, 37, 24, 28913, tzinfo=utc))),", "                ('tournament_winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),", "            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),"]}], "deletionsPerFile": [{"clubs/migrations/0001_initial.py": ["# Generated by Django 3.2.8 on 2021-12-16 09:42", "import django.core.validators", "import django.utils.timezone", "                ('chess_experience_level', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)])),", "                ('applicants', models.ManyToManyField(related_name='applicants', to=settings.AUTH_USER_MODEL)),", "                ('members', models.ManyToManyField(related_name='members', to=settings.AUTH_USER_MODEL)),", "                ('officer_applicants', models.ManyToManyField(related_name='officer_applicants', to=settings.AUTH_USER_MODEL)),", "                ('officers', models.ManyToManyField(related_name='officers', to=settings.AUTH_USER_MODEL)),", "                ('tournament_name', models.CharField(max_length=15, unique=True)),", "                ('number_of_participants', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16)], default=2)),", "                ('deadline', models.DateTimeField(default=django.utils.timezone.now, validators=[django.core.validators.MinValueValidator(django.utils.timezone.now)])),", "                ('start_time', models.DateTimeField(default=datetime.datetime(2021, 12, 17, 9, 42, 31, 83710, tzinfo=utc))),", "                ('tournament_winner', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),", "            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),"], "clubs/migrations/0002_alter_tournament_start_time.py": ["# Generated by Django 3.2.8 on 2021-12-16 09:42", "", "import datetime", "from django.db import migrations, models", "from django.utils.timezone import utc", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0001_initial'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='tournament',", "            name='start_time',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 17, 9, 42, 41, 799021, tzinfo=utc)),", "        ),", "    ]"], "clubs/migrations/0003_auto_20211216_1000.py": ["# Generated by Django 3.2.8 on 2021-12-16 10:00", "", "import datetime", "from django.conf import settings", "from django.db import migrations, models", "import django.db.models.deletion", "from django.utils.timezone import utc", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0002_alter_tournament_start_time'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='club',", "            name='applicants',", "            field=models.ManyToManyField(blank=True, related_name='applicants', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.AlterField(", "            model_name='club',", "            name='members',", "            field=models.ManyToManyField(blank=True, related_name='members', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.AlterField(", "            model_name='club',", "            name='officer_applicants',", "            field=models.ManyToManyField(blank=True, related_name='officer_applicants', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.AlterField(", "            model_name='club',", "            name='officers',", "            field=models.ManyToManyField(blank=True, related_name='officers', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='start_time',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 17, 10, 0, 9, 208293, tzinfo=utc)),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='tournament_winner',", "            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.AlterField(", "            model_name='user',", "            name='chess_experience_level',", "            field=models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], default=1),", "        ),", "    ]"], "clubs/migrations/0004_auto_20211216_1012.py": ["# Generated by Django 3.2.8 on 2021-12-16 10:12", "", "import datetime", "import django.core.validators", "from django.db import migrations, models", "from django.utils.timezone import utc", "import django.utils.timezone", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0003_auto_20211216_1000'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='tournament',", "            name='deadline',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 17, 10, 12, 46, 962431, tzinfo=utc), validators=[django.core.validators.MinValueValidator(django.utils.timezone.now)]),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='start_time',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 18, 10, 12, 46, 962447, tzinfo=utc)),", "        ),", "    ]"], "clubs/migrations/0005_auto_20211216_1013.py": ["# Generated by Django 3.2.8 on 2021-12-16 10:13", "", "import datetime", "from django.conf import settings", "import django.core.validators", "from django.db import migrations, models", "import django.db.models.deletion", "from django.utils.timezone import utc", "import django.utils.timezone", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0004_auto_20211216_1012'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='tournament',", "            name='deadline',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 17, 10, 13, 38, 873311, tzinfo=utc), validators=[django.core.validators.MinValueValidator(django.utils.timezone.now)]),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='start_time',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 18, 10, 13, 38, 873329, tzinfo=utc)),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='tournament_winner',", "            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),", "        ),", "    ]"], "clubs/migrations/0006_auto_20211217_1132.py": ["# Generated by Django 3.2.8 on 2021-12-17 11:32", "", "import datetime", "from django.conf import settings", "import django.core.validators", "from django.db import migrations, models", "import django.db.models.deletion", "import django.utils.timezone", "from django.utils.timezone import utc", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0005_auto_20211216_1013'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='match',", "            name='winner',", "            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='deadline',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 18, 11, 32, 6, 218582, tzinfo=utc), validators=[django.core.validators.MinValueValidator(django.utils.timezone.now)]),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='start_time',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 19, 11, 32, 6, 218616, tzinfo=utc)),", "        ),", "    ]"], "clubs/migrations/0007_auto_20211217_1254.py": ["# Generated by Django 3.2.8 on 2021-12-17 12:54", "", "import datetime", "from django.db import migrations, models", "from django.utils.timezone import utc", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0006_auto_20211217_1132'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='tournament',", "            name='deadline',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 18, 12, 54, 3, 775041, tzinfo=utc)),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='start_time',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 19, 12, 54, 3, 775055, tzinfo=utc)),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='tournament_name',", "            field=models.CharField(max_length=20, unique=True),", "        ),", "    ]"]}]}, {"commitAuthor": "FarihaChoudhury", "commitSha": "5a93636a951355115436ccc092570efed0fe5e21", "filesEdited": ["clubs/models.py"], "additionsPerFile": [{"clubs/models.py": ["    chess_experience_level_choices = zip( range(0,11), range(0,11) )", "    chess_experience_level = models.IntegerField(choices=chess_experience_level_choices, default=0)", "    tournament_choices = zip( range(2,17), range(2,17) )"]}], "deletionsPerFile": [{"clubs/models.py": ["    chess_experience_level_choices = zip( range(1,11), range(1,11) )", "    chess_experience_level = models.IntegerField(choices=chess_experience_level_choices, default=1)", "    tournament_choices = zip( range(1,17), range(1,17) )"]}]}, {"commitAuthor": "lisa947", "commitSha": "8525a66d1abf486976552a081049b6bd86ea71e7", "filesEdited": ["README.md"], "additionsPerFile": [{"README.md": ["- https://stackoverflow.com/questions/849142/how-to-limit-the-maximum-value-of-a-numeric-field-in-a-django-model", "- https://stackoverflow.com/questions/32296266/randomly-pair-items-in-a-list-using-python", "- https://rahmanfadhil.com/django-login-with-email/"]}], "deletionsPerFile": [{"README.md": ["https://stackoverflow.com/questions/849142/how-to-limit-the-maximum-value-of-a-numeric-field-in-a-django-model", "https://stackoverflow.com/questions/32296266/randomly-pair-items-in-a-list-using-python", "https://rahmanfadhil.com/django-login-with-email/"]}]}, {"commitAuthor": "lisa947", "commitSha": "e2e5e2bb6ff323ac8b7adb0ecf7cdadf64ddb46d", "filesEdited": ["README.md"], "additionsPerFile": [{"README.md": ["$ python3 manage.py seed (sometimes get errors with username, if unseed then seed again it will be fine)"]}], "deletionsPerFile": [{"README.md": ["$ python3 manage.py seed", "*The above instructions should work in your version of the application.  If there are deviations, declare those here in bold.  Otherwise, remove this line.*", ""]}]}, {"commitAuthor": "lisa947", "commitSha": "4f74335173c94a9c40bd80452d239d915c0f545c", "filesEdited": [":q"], "additionsPerFile": [{}], "deletionsPerFile": [{":q": ["-Merge branch 'complete_matches' of github.com:lisa947/SEG-small-group-project into complete_matches", "# Please enter a commit message to explain why this merge is necessary,", "# especially if it merges an updated upstream into a topic branch.", "#", "# Lines starting with '#' will be ignored, and an empty message aborts", "# the commit."]}]}, {"commitAuthor": "lisa947", "commitSha": "abef539b4e86d6125bda13aa949372dc2ff83776", "filesEdited": ["README.md"], "additionsPerFile": [{"README.md": ["# Team *Scarlet-R* Small Group project", "- *Fariha Choudhury* *k20059723*", "- *Wei Zhang* *k20040725*", "- *Hristina-Andreea Sararu* *k20036771*", "- *Drit Muhaxheri* *k20013794*", "- *Lisha Zhu* *k20016632*"]}], "deletionsPerFile": [{"README.md": ["# Team *enter team name here* Small Group project", "- *Fariha Choudhury*", "- *Wei Zhang*", "- *Hristina-Andreea Sararu*", "- *Drit Muhaxheri*", "- *Lisha Zhu*", "*Add any further information about the team here, such as absent team members.*"]}]}, {"commitAuthor": "lisa947", "commitSha": "fec641bf40a0fc3f99964415d26c93ee561b92a2", "filesEdited": ["README.md"], "additionsPerFile": [{"README.md": ["The deployed version of the application can be found at [https://arcane-hamlet-74431.herokuapp.com]"]}], "deletionsPerFile": [{"README.md": ["The deployed version of the application can be found at [https://arcane-hamlet-74431.herokuapp.com/](URL)."]}]}, {"commitAuthor": "lisa947", "commitSha": "f15711b6cd62ed2d695df49e3baf69a2e257df36", "filesEdited": ["README.md"], "additionsPerFile": [{"README.md": ["The deployed version of the application can be found at [https://arcane-hamlet-74431.herokuapp.com/](URL)."]}], "deletionsPerFile": [{"README.md": ["The deployed version of the application can be found at [URL](URL)."]}]}, {"commitAuthor": "lisa947", "commitSha": "0c9f844322ce26980ac75e0e4e496e0a20243468", "filesEdited": ["clubs/migrations/0007_auto_20211217_1254.py"], "additionsPerFile": [{"clubs/migrations/0007_auto_20211217_1254.py": ["# Generated by Django 3.2.8 on 2021-12-17 12:54", "", "import datetime", "from django.db import migrations, models", "from django.utils.timezone import utc", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0006_auto_20211217_1132'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='tournament',", "            name='deadline',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 18, 12, 54, 3, 775041, tzinfo=utc)),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='start_time',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 19, 12, 54, 3, 775055, tzinfo=utc)),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='tournament_name',", "            field=models.CharField(max_length=20, unique=True),", "        ),", "    ]"]}], "deletionsPerFile": [{}]}, {"commitAuthor": "lisa947", "commitSha": "3787fd1bcf5014f95a83124ac1401a44c5d97109", "filesEdited": ["clubs/views.py", "clubs/views/match_views.py"], "additionsPerFile": [{"clubs/views/match_views.py": ["            if matches_list.count() == 0:", "                round_input = 1", "                return render(request, 'generate_matches.html',", "                current_tournament.current_participants.add(winner)", "            current_tournament.winners_list.clear()", "        round_input = 2 "]}], "deletionsPerFile": [{"clubs/views.py": ["# from django.contrib import messages", "# from django.shortcuts import render, redirect", "# from .forms import SignUpForm, LogInForm, UserForm, PasswordForm, ClubForm, TournamentForm", "# from django.core.exceptions import ObjectDoesNotExist", "# from django.contrib.auth import authenticate, login, logout", "# from django.contrib.auth.decorators import login_required", "# from django.contrib.auth.models import Group", "# from .models import User, Club, Tournament, Match", "# from .helpers import login_prohibited, member_only, staff_only, owner_only, organiser_only", "# from django.http import HttpResponseForbidden", "# from django.utils import timezone", "# import random", "# from django.contrib.auth.hashers import check_password", "#", "# def home(request):", "#     return render(request, 'home.html')", "#", "#", "# @login_required", "# def user_profile(request):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     return render(request, 'user_profile.html',", "#                     {'current_user': current_user,", "#                      'clubs': clubs,", "#                     }", "#                  )", "#", "# @login_prohibited", "# def sign_up(request):", "#     if request.method == 'POST':", "#         form = SignUpForm(request.POST)", "#         if form.is_valid():", "#             user = form.save()", "#             applicants, created = Group.objects.get_or_create(name = 'applicants')", "#             applicants.user_set.add(user)", "#             login(request, user)", "#             return redirect('user_profile')", "#     else:", "#         form = SignUpForm()", "#     return render(request, 'sign_up.html', {'form': form})", "#", "# @login_required", "# @member_only", "# def member_list_for_members(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     members = current_club.members.all()", "#     return render(request, 'member_list_for_members.html',", "#                     {'members': members,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club", "#                     }", "#                  )", "#", "# @login_required", "# @staff_only", "# def member_list_for_staff(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     members = current_club.members.all()", "#     return render(request, 'member_list_for_staff.html',", "#                     {'members': members,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club", "#                     }", "#                  )", "#", "# @login_required", "# @staff_only", "# def applicant_list(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     applicants = current_club.applicants.all()", "#     return render(request, 'applicant_list.html',", "#                     {'applicants': applicants,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club", "#                     }", "#                  )", "#", "# @login_required", "# # @owner_only", "# def officer_list(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     officers = current_club.officers.all()", "#     return render(request, 'officer_list.html',", "#                     {'officers': officers,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club", "#                     }", "#                  )", "#", "# @login_required", "# def show_user(request, user_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     try:", "#         user = User.objects.get(id=user_id)", "#     except ObjectDoesNotExist:", "#         return redirect('user_profile')", "#     else:", "#         return render(request, 'show_user.html',", "#             {'user': user,", "#              'current_user': current_user,", "#              'clubs': clubs,", "#             }", "#         )", "#", "# @login_prohibited", "# def log_in(request):", "#     if request.method == 'POST':", "#         form = LogInForm(request.POST)", "#         if form.is_valid():", "#             email = form.cleaned_data.get('email')", "#             password = form.cleaned_data.get('password')", "#             user = authenticate(email=email, password=password)", "#             if user is not None:", "#                 login(request, user)", "#                 return redirect('user_profile')", "#         messages.add_message(request, messages.ERROR, \"The credentials provided were invalid!\")", "#     form = LogInForm()", "#     return render(request, 'log_in.html', {'form': form})", "#", "# def log_out(request):", "#     logout(request)", "#     return redirect('home')", "#", "# @login_required", "# def profile(request):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     if request.method == 'POST':", "#         form = UserForm(instance=current_user, data=request.POST)", "#         if form.is_valid():", "#             messages.add_message(request, messages.SUCCESS, \"Profile updated!\")", "#             form.save()", "#             return redirect('user_profile')", "#     else:", "#         form = UserForm(instance=current_user)", "#     return render(request, 'profile.html',", "#                     {'form': form,", "#                      'current_user': current_user,", "#                      'clubs': clubs}", "#                  )", "#", "# @login_required", "# def password(request):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     if request.method == 'POST':", "#         form = PasswordForm(data=request.POST)", "#         if form.is_valid():", "#             password = form.cleaned_data.get('password')", "#             if check_password(password, current_user.password):", "#                 new_password = form.cleaned_data.get('new_password')", "#                 current_user.set_password(new_password)", "#                 current_user.save()", "#                 login(request, current_user)", "#                 messages.add_message(request, messages.SUCCESS, \"Password updated!\")", "#                 return redirect('user_profile')", "#     form = PasswordForm()", "#     return render(request, 'password.html',", "#                     {'form': form,", "#                      'current_user': current_user,", "#                      'clubs': clubs}", "#                  )", "#", "#", "# @login_required", "# @staff_only", "# def approve_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_approve(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('applicant_list', club_id)", "#     else:", "#         return redirect('applicant_list', club_id)", "#", "#", "# @login_required", "# @staff_only", "# def cancel_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_cancel(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('member_list_for_staff', club_id)", "#     else:", "#         return redirect('member_list_for_staff', club_id)", "#", "# @login_required", "# @owner_only", "# def promote_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_promote(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('member_list_for_staff', club_id)", "#     else:", "#         return redirect('member_list_for_staff', club_id)", "#", "# @login_required", "# @owner_only", "# def demote_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_demote(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('officer_list', club_id)", "#     else:", "#         return redirect('officer_list', club_id)", "#", "# @login_required", "# @owner_only", "# def transfer_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_transfer(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('officer_list', club_id)", "#     else:", "#         return redirect('officer_list', club_id)", "#", "#", "# @login_required", "# def create_club(request, user_id):", "#     if request.method == 'POST':", "#         if request.user.is_authenticated:", "#             current_user = request.user", "#             form = ClubForm(request.POST)", "#             if form.is_valid():", "#                 club_name = form.cleaned_data.get('club_name')", "#                 location = form.cleaned_data.get('location')", "#                 description = form.cleaned_data.get('description')", "#                 club = Club.objects.create(club_owner = current_user, club_name = club_name, location = location, description = description)", "#                 club.club_owner.clubs.add(club)", "#                 # club.officers.add(user)", "#                 return redirect('user_profile')", "#             else:", "#                 return render(request, 'create_club.html', {'form': form, 'current_user': current_user})", "#         else:", "#             return redirect('log_in')", "#     else:", "#         # return HttpResponseForbidden()", "#         form = ClubForm()", "#         current_user = request.user", "#     return render(request, 'create_club.html', {'form': form, 'current_user': current_user})", "#", "# @login_required", "# @staff_only", "# def create_tournament(request, club_id):", "#     clubs = Club.objects.all()", "#     current_club = Club.objects.get(id=club_id)", "#     if request.method == 'POST':", "#         if request.user.is_authenticated:", "#             current_user = request.user", "#", "#             form = TournamentForm(request.POST)", "#             if form.is_valid():", "#                 tournament_name = form.cleaned_data.get('tournament_name')", "#                 short_description = form.cleaned_data.get('short_description')", "#                 number_of_participants = form.cleaned_data.get('number_of_participants')", "#                 deadline = form.cleaned_data.get('deadline')", "#                 start_time = form.cleaned_data.get('start_time')", "#                 tournament = Tournament.objects.create(tournament_name = tournament_name,", "#                                                         short_description = short_description,", "#                                                         number_of_participants = number_of_participants,", "#                                                         club = current_club,", "#                                                         deadline = deadline,", "#                                                         start_time = start_time)", "#                 tournament.organisers.add(current_user)", "#                 current_club.tournaments.add(tournament)", "#                 current_club.tournament_list.add(tournament)", "#                 return redirect('tournament_list', club_id)", "#             else:", "#                 return render(request, 'create_tournament.html',", "#                                 {'form': form,", "#                                  'current_user': current_user,", "#                                  'current_club': current_club,", "#                                  'clubs': clubs", "#                                 }", "#                             )", "#         else:", "#             return redirect('log_in')", "#     else:", "#         form = TournamentForm()", "#         current_user = request.user", "#     return render(request, 'create_tournament.html',", "#                     {'form': form,", "#                      'current_user': current_user,", "#                      'current_club': current_club,", "#                      'clubs': clubs", "#                     }", "#                 )", "#", "# @login_required", "# def show_club(request, club_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     now = timezone.now", "#     try:", "#         current_club = Club.objects.get(id=club_id)", "#         tournaments = current_club.tournaments.all()", "#     except ObjectDoesNotExist:", "#         return redirect('user_profile')", "#     else:", "#         return render(request, 'show_club.html',", "#             {'current_club': current_club,", "#              'current_user': current_user,", "#              'clubs': clubs,", "#              'tournaments': tournaments,", "#              'now': now", "#             }", "#         )", "#", "# @login_required", "# def apply_membership(request, club_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     try:", "#         current_club = Club.objects.get(id=club_id)", "#         current_club.applicants.add(current_user)", "#         current_user.clubs.add(current_club)", "#     except ObjectDoesNotExist:", "#         return redirect('user_profile')", "#     else:", "#         return render(request, 'show_club.html',", "#             {'current_club': current_club,", "#              'current_user': current_user,", "#              'clubs': clubs", "#             }", "#         )", "#", "# @login_required", "# def edit_tournament_info(request, club_id, tournament_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     current_club = Club.objects.get(id=club_id)", "#     current_tournament = Tournament.objects.get(id=tournament_id)", "#     if request.method == 'POST':", "#         form = TournamentForm(data = request.POST, instance=current_tournament)", "#         if form.is_valid():", "#             messages.add_message(request, messages.SUCCESS, \"Successfully updated!\")", "#             form.save()", "#             return redirect('tournament_list', club_id)", "#     else:", "#         form = TournamentForm(instance = current_tournament)", "#     return render(request, 'edit_tournament_info.html',", "#                     {'form': form,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club,", "#                      'current_tournament': current_tournament", "#                     }", "#                  )", "#", "#", "#", "#", "# @login_required", "# @staff_only", "# @organiser_only", "# def co_organise(request, club_id, tournament_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     current_club = Club.objects.get(id=club_id)", "#     officers = current_club.officers.all()", "#     current_tournament = Tournament.objects.get(id=tournament_id)", "#     organisers = current_tournament.organisers.all()", "#     return render(request, 'co_organiser_list.html',", "#                     {'officers': officers,", "#                      'organisers': organisers,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club,", "#                      'tournament': current_tournament", "#                     }", "#                  )", "#", "# @login_required", "# @staff_only", "# @organiser_only", "# def co_organise_toggle(request, club_id, tournament_id, user_id):", "#     try:", "#         current_user = request.user", "#         user =  User.objects.get(id=user_id)", "#         current_club = Club.objects.get(id=club_id)", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#         current_tournament.organisers.add(user)", "#     except ObjectDoesNotExist:", "#         return redirect('co_organise', club_id, tournament_id)", "#     else:", "#         return redirect('co_organise', club_id, tournament_id)", "#", "#", "# @login_required", "# def tournament_list(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     tournaments = current_club.tournaments.all()", "#", "# #THIS IS MORE MATCHES - FARIHA WAS TESTING WITH IT --- KEEP FOR NOW PLEASE!!!", "#     # tournament_list = current_club.tournament_list.all()", "#     # for t in tournament_list:", "#     #     t.all_winners_list.clear()", "#     #     t.winners_list.clear()", "#     #     t.tournament_winner = None", "#     #     print(t.tournament_winner)", "#     #     t.matches_list.clear()", "#     #     t.all_matches_list.clear()", "#     #     if t.tournament_winner:", "#     #         t.tournament_winner = None", "#     #         t.save()", "#     #     t.save()", "#", "#", "#     now = timezone.now", "#     return render(request, 'tournament_list.html',", "#                     {'tournaments': tournaments,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club,", "#                      'now': now,", "#                     }", "#                  )", "#", "# @login_required", "# @member_only", "# def tournament_joined(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     tournament_joined = current_user.tournaments.all()", "#     now = timezone.now", "#     return render(request, 'tournament_joined.html',", "#                     {'tournament_joined': tournament_joined,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club,", "#                      'now': now,", "#                     }", "#                  )", "#", "# @login_required", "# @member_only", "# def show_tournament(request, tournament_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     try:", "#         tournament = Tournament.objects.get(id=tournament_id)", "#     except ObjectDoesNotExist:", "#         return redirect('user_profile')", "#     else:", "#         return render(request, 'show_tournament.html',", "#             {'tournament': tournament,", "#              'current_user': current_user,", "#              'clubs': clubs,", "#             }", "#         )", "# #", "# @login_required", "# @member_only", "# def sign_up_toggle(request, tournament_id, club_id):", "#     current_user = request.user", "#     try:", "#         tournament = Tournament.objects.get(id=tournament_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_sign_up(tournament, club)", "#     except ObjectDoesNotExist:", "#         return redirect('tournament_list', club_id)", "#     else:", "#         return redirect('tournament_list', club_id)", "#", "#", "# @login_required", "# @member_only", "# def withdraw_toggle(request, tournament_id, club_id):", "#     current_user = request.user", "#     try:", "#         tournament = Tournament.objects.get(id=tournament_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_withdraw(tournament, club)", "#     except ObjectDoesNotExist:", "#         return redirect('tournament_joined', club_id)", "#     else:", "#         return redirect('tournament_joined', club_id)", "#", "#", "#", "#", "#", "#", "#", "# @login_required", "# @organiser_only", "# def generate_matches(request, tournament_id, club_id):", "#     try:", "#         clubs = Club.objects.all()", "#         current_user = request.user", "#         current_club = Club.objects.get(id=club_id)", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#", "# # THIS IS MORE MATCHES - FARIHA WAS TESTING WITH IT --- KEEP FOR NOW PLEASE!!!", "# #         Match.objects.all().delete()", "#         # current_tournament.matches_list.clear()", "#         # current_tournament.winners_list.clear()", "#         # tournament = Tournament.objects.all()", "# #         --^^^ USE THIS AFTER CLICKING 'GENERATE_MATCHES', THEN COMMENT OUT AGAIN", "# #         USE IT TO CLEAR THE WINNERS FOR A TOURNAMENT - FOR DEV PURPOSES", "#         current_tournament.tournament_winner= None", "#         current_tournament.current_participants.clear()", "#         current_tournament.removed_participants.clear()", "#", "#         all_participants_list = current_tournament.participants_list.all()", "#         participants_list_count = len(all_participants_list)", "#         previous_power_of_two = current_tournament.power_Of_Two(participants_list_count)", "#         current_tournament.make_Participants_Power_Of_2(previous_power_of_two)", "#         #Change current participants list to include the highest power of 2 number of particpants", "#         # - if number of particpants is not a power of 2", "#         participants_list = current_tournament.current_participants.all()", "#         matches_list = current_tournament.matches_list.all()", "#         winners_list = current_tournament.winners_list.all()", "#         now = timezone.now()", "#         if all_participants_list.count() <= 1 and current_tournament.start_time >now:", "#             messages.add_message(request, messages.ERROR, \"Not enough participants!\")", "#         else:", "#             if matches_list.count() == 0:    #I.E. NO MATCHES HAVE BEEN MADE FOR THIS ROUND YET!", "#                 round_input = 1  #first round", "#                 current_tournament.create_matches(round_input, participants_list)", "#                 matches_list = current_tournament.matches_list.all()", "#                 winners_list = current_tournament.winners_list.all()", "#", "#                 return render(request, 'generate_matches.html',", "#                                 {'current_user': current_user,", "#                                  'clubs': clubs,", "#                                  'current_club': current_club,", "#                                  'current_tournament': current_tournament,", "#                                  'matches_list': matches_list,", "#                                  'all_participants_list': all_participants_list,", "#                                  'winners_list': winners_list,", "#                                  'now':now", "#                                 }", "#                              )", "#             else:", "#                 return render(request, 'generate_matches.html',   #redisplay html template with selected winners + unselected winners", "#                                 {'current_user': current_user,", "#                                  'clubs': clubs,", "#                                  'current_club': current_club,", "#                                  'current_tournament': current_tournament,", "#                                  'matches_list': matches_list,", "#                                  'all_participants_list': all_participants_list,", "#                                  'winners_list': winners_list,", "#                                  'now':now", "#                                 }", "#                              )", "#     except ObjectDoesNotExist:", "#         return redirect('tournament_list', club_id)", "#     else:", "#         return redirect('tournament_list', club_id)", "#", "#", "#", "#", "# @login_required", "# @organiser_only", "# def log_winners(request, tournament_id, club_id, user_id, match_id):", "#     try:", "#         current_user = request.user", "#         winner_user =  User.objects.get(id=user_id)", "#         current_club = Club.objects.get(id=club_id)", "#         current_match = Match.objects.get(matchId = match_id)", "#", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#", "#         if winner_user not in current_tournament.organisers.all():", "#             if winner_user == current_match.player1 or winner_user == current_match.player2:", "#                 current_tournament.winners_list.add(winner_user)", "#                 current_tournament.all_winners_list.add(winner_user)", "#", "#             # current_match = Match.objects.get(matchId = match_id)", "#                 current_match.winner = winner_user", "#", "#         if current_tournament.winners_list.count() == 1 and current_tournament.matches_list.count() ==1:", "#             current_tournament.tournament_winner = winner_user", "#             current_tournament.save()", "#", "#     except ObjectDoesNotExist:", "#         return redirect('generate_matches', club_id, tournament_id)", "#     else:", "#         if current_match.round == 1:", "#             return redirect('generate_matches', club_id, tournament_id)", "#         else:", "#             return redirect('generate_next_matches', club_id, tournament_id)", "#", "#", "#", "#", "#", "# @login_required", "# @organiser_only", "# def next_match(request, tournament_id, club_id):", "#     try:", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#         current_winners = current_tournament.winners_list.all()", "#", "#         if current_winners.count() != 1 :", "#             current_tournament.current_participants.clear()", "#", "#             for winner in current_winners:", "#                 current_tournament.current_participants.add(winner)   #Move all winners from last round into current_participants_list", "#", "#             current_tournament.winners_list.clear()    #clear winners for this round.", "#", "#     except ObjectDoesNotExist:", "#         return redirect('generate_next_matches',  club_id, tournament_id)", "#     else:", "#         return redirect('generate_next_matches',  club_id, tournament_id)", "#", "#", "#", "#", "#", "# @login_required", "# @organiser_only", "# def generate_next_matches(request, tournament_id, club_id):", "#     try:", "#         clubs = Club.objects.all()", "#         current_user = request.user", "#         current_club = Club.objects.get(id=club_id)", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#", "#         all_participants_list = current_tournament.participants_list.all()", "#         participants_list = current_tournament.current_participants.all()", "#", "#", "#         round_input = 2  #All other rounds have 'round =2' except first round has round 2", "#         current_tournament.create_matches(round_input, participants_list)", "#         matches_list = current_tournament.matches_list.all()", "#         now = timezone.now()", "#", "#         winners_list = current_tournament.winners_list.all()", "#", "#         return render(request, 'generate_matches.html',", "#                         {'current_user': current_user,", "#                          'clubs': clubs,", "#                          'current_club': current_club,", "#                          'current_tournament': current_tournament,", "#                          'matches_list': matches_list,", "#                          'winners_list': winners_list,", "#                          'all_participants_list': all_participants_list,", "#                          'now':now", "#                         }", "#                      )", "#", "#     except ObjectDoesNotExist:", "#         return redirect('tournament_list', club_id)", "#     else:", "#         return redirect('tournament_list', club_id)"], "clubs/views/match_views.py": ["# from django.contrib.auth.mixins import LoginRequiredMixin", "# from django.views.generic import ListView", "# from django.views.generic.detail import DetailView", "# from django.views.generic.list import MultipleObjectMixin", "# from django.http import Http404", "# from .mixins import *", "", "# THIS IS MORE MATCHES - FARIHA WAS TESTING WITH IT --- KEEP FOR NOW PLEASE!!!", "#         Match.objects.all().delete()", "        # current_tournament.matches_list.clear()", "        # current_tournament.winners_list.clear()", "        # tournament = Tournament.objects.all()", "#         --^^^ USE THIS AFTER CLICKING 'GENERATE_MATCHES', THEN COMMENT OUT AGAIN", "#         USE IT TO CLEAR THE WINNERS FOR A TOURNAMENT - FOR DEV PURPOSES", "        #Change current participants list to include the highest power of 2 number of particpants", "        # - if number of particpants is not a power of 2", "            if matches_list.count() == 0:    #I.E. NO MATCHES HAVE BEEN MADE FOR THIS ROUND YET!", "                round_input = 1  #first round", "                return render(request, 'generate_matches.html',   #redisplay html template with selected winners + unselected winners", "# def power_Of_Two(x):    #x= len(participants_list)", "#     \"\"\"Calculate if the number of participants in a tournament is a power of 2,", "#     if not, if it is not, calculate the previous power of two. \"\"\"", "#", "#     if(x & (x-1) != 0):  #Not a power of 2", "#         while (x & x-1):", "#             x = x & x-1    #Finds previous power of 2", "#         print(\"not power of 2, next power of 2 is:\")", "#         print(x)", "#         return x", "", "# def make_Participants_Power_Of_2(current_tournament, previous_power_of_two):", "#     participants_list = current_tournament.participants_list.all()", "#     if previous_power_of_two:", "#         print(participants_list)", "#", "#         print(previous_power_of_two)", "#", "#", "#         new_participants = participants_list[:previous_power_of_two]", "#         for new_p in new_participants:", "#             current_tournament.current_participants.add(new_p)", "#", "#         print(\"new current p:\")", "#         print(current_tournament.current_participants.all())", "#", "#         remaining = (participants_list.count() - previous_power_of_two) +1   #THE OTHER HALF OF THE LIST: WHO WONT PLAY!", "#", "#         removed_participants = participants_list[(remaining):]", "#         for new_p in removed_participants:", "#             current_tournament.removed_participants.add(new_p)", "#", "#         # print(remaining)", "#         # print(participants_list[(remaining):])", "#         print(\"removed p:\")", "#         # current_tournament.removed_participants.add(participants_list[(remaining):].all())", "#         print(current_tournament.removed_participants.all())", "#", "#     else:", "#         print(\"its fine\")", "#         for participants in participants_list:", "#             current_tournament.current_participants.add(participants)", "", "", "            # current_match = Match.objects.get(matchId = match_id)", "                current_tournament.current_participants.add(winner)   #Move all winners from last round into current_participants_list", "            current_tournament.winners_list.clear()    #clear winners for this round.", "        round_input = 2  #All other rounds have 'round =2' except first round has round 2"]}]}, {"commitAuthor": "FarihaChoudhury", "commitSha": "023cfc72923d22e69dcbcaf7f18eb7b9c42f2c74", "filesEdited": [":q", "README.md", "clubs/forms.py", "clubs/helpers.py", "clubs/management/commands/seed.py", "clubs/management/commands/unseed.py", "clubs/migrations/0006_auto_20211217_1132.py", "clubs/models.py", "clubs/templates/base.html", "clubs/templates/generate_matches.html", "clubs/templates/partials/make_matches.html", "clubs/templates/partials/navbar.html", "clubs/templates/tournament_list.html", "clubs/templates/winners_list.html", "clubs/tests/fixtures/default_match.json", "clubs/tests/fixtures/default_tournament.json", "clubs/tests/fixtures/other_matches.json", "clubs/tests/fixtures/other_tournaments.json", "clubs/tests/forms/test_club_form.py", "clubs/tests/forms/test_log_in_form.py", "clubs/tests/forms/test_password_form.py", "clubs/tests/forms/test_sign_up_form.py", "clubs/tests/forms/test_tournament_form.py", "clubs/tests/forms/test_user_form.py", "clubs/tests/models/test_club_model.py", "clubs/tests/models/test_match_model.py", "clubs/tests/models/test_tournament_model.py", "clubs/tests/models/test_user_model.py", "clubs/tests/views/test_applicant_list_view.py", "clubs/tests/views/test_approve_toggle_view.py", "clubs/tests/views/test_cancel_toggle_view.py", "clubs/tests/views/test_co_organiser_list_view.py", "clubs/tests/views/test_create_club_view.py", "clubs/tests/views/test_demote_toggle_view.py", "clubs/tests/views/test_generate_match_view.py", "clubs/tests/views/test_generate_next_matches_view.py", "clubs/tests/views/test_home_view.py", "clubs/tests/views/test_log_winners_toggle_view.py", "clubs/tests/views/test_member_list_for_members_view.py", "clubs/tests/views/test_member_list_for_staff_view.py", "clubs/tests/views/test_next_match_view.py", "clubs/tests/views/test_officer_applicant_list_view.py", "clubs/tests/views/test_officer_list_view.py", "clubs/tests/views/test_password_view.py", "clubs/tests/views/test_promote_toggle_view.py", "clubs/tests/views/test_show_clubs_view.py", "clubs/tests/views/test_sign_up_toggle_view.py", "clubs/tests/views/test_transfer_toggle_view.py", "clubs/tests/views/test_withdraw_toggle_view.py", "clubs/views.py", "clubs/views/match_views.py", "clubs/views/mixins.py", "clubs/views/user_view.py", "static/chicken_font.css", "system/urls.py"], "additionsPerFile": [{":q": ["-Merge branch 'complete_matches' of github.com:lisa947/SEG-small-group-project into complete_matches", "# Please enter a commit message to explain why this merge is necessary,", "# especially if it merges an updated upstream into a topic branch.", "#", "# Lines starting with '#' will be ignored, and an empty message aborts", "# the commit."], "README.md": ["- Borrowed ideas from SEG practice training videos (clucker) - mainly for home, log in, sign up, lists displays etc.", ""], "clubs/forms.py": ["        if timezone.now() > deadline:"], "clubs/helpers.py": ["from .models import User, Club, Tournament, Match", "def organiser_only(view_function):", "    def modified_view_function(request, club_id, tournament_id, **options):", "        current_club = Club.objects.get(id=club_id)", "        current_tournament = Tournament.objects.get(id=tournament_id)", "        if current_tournament.organisers.filter(email=request.user.email).exists():", "            return view_function(request, club_id=club_id,tournament_id=tournament_id, **options)", "        else:", "            return redirect('show_club', club_id=club_id, **options)", "    return modified_view_function"], "clubs/management/commands/seed.py": ["from clubs.models import User, Club, Tournament, Match", "from random import randint, choice, sample, random", "import pytz", "from django.utils import timezone", "    USER_COUNT = 50", "    APPLICANT_COUNT = 50", "    MEMBER_COUNT = 50", "    OFFICER_COUNT = 10", "    TOURNAMENT_COUNT = 15", "        self.create_Random_Users()", "        self.create_Random_Clubs()", "        # self.create_Random_Tournaments()", "        self.create_Required_Users_And_Club()", "        self.create_Required_Tournaments()", "        self.kerbal_past_tournaments()", "    def create_Random_Users(self):", "                email = self._email(first_name,last_name)", "                chess_experience_level = self.faker.random_digit() + 1 #0-9", "", "    def create_Random_Clubs(self):", "                club_owner = choice(list(User.objects.all())) #Picks random user to be club owner", "", "                for i in range(20):", "    def create_Required_Users_And_Club(self):", "        #Create Billie FIRST:    (will create jeb and val after filling the kerbal club to add their specifc roles)", "                chess_experience_level=2,", "        #Create kerbal chess club:", "        #SEED MORE MEMBERS INTO KERBAL CLUB (before creating and adding val and jeb):", "            user_items = User.objects.filter(email='billie@example.org')", "            items = User.objects.exclude(pk__in=user_items)", "", "            for i in range(15):", "                applicant = random.choice(items)", "                if applicant not in kerbal_club.members.all() and applicant not in kerbal_club.officers.all():", "                    kerbal_club.applicants.add(applicant)", "                    applicant.clubs.add(kerbal_club)", "                    applicant.save()", "", "                member = random.choice(items)", "                if member not in kerbal_club.applicants.all() and member not in kerbal_club.officers.all():", "                    kerbal_club.members.add(member)", "                    member.clubs.add(kerbal_club)", "                    member.save()", "", "                officer = random.choice(items)", "                if officer not in kerbal_club.applicants.all() and officer not in kerbal_club.members.all():", "                    kerbal_club.officers.add(officer)", "                    officer.clubs.add(kerbal_club)", "                    officer.save()", "", "", "            kerbal_club.full_clean()", "            kerbal_club.save()", "", "", "            #CREATE JEB AND VAL, ASSIGN THEIR ROLES IN KERBAL CHESS CLUB", "            countJeb = User.objects.filter(email = 'jeb@example.org').count()", "            if (countJeb == 0):", "                jeb_instance = User.objects.create_user(", "                    'jeb@example.org',", "                    first_name='Jebediah',", "                    last_name='Kerman',", "                    email='jeb@example.org',", "                    password=Command.PASSWORD,", "                    public_bio='public_bio',", "                    chess_experience_level=2,", "                    short_personal_statement='short_personal_statement'", "                )", "                jeb_instance.full_clean()", "                jeb_instance.save()", "", "", "            countVal = User.objects.filter(email = 'val@example.org').count()", "            if (countVal == 0):", "                val_instance = User.objects.create_user(", "                    'val@example.org',", "                    first_name='Valentina',", "                    last_name='Kerman',", "                    email='val@example.org',", "                    password=Command.PASSWORD,", "                    public_bio='public_bio',", "                    chess_experience_level=2,", "                    short_personal_statement='short_personal_statement'", "                )", "                # officer_instance.is_staff = True", "                val_instance.full_clean()", "                val_instance.save()", "", "            #Val is an officer of kerbal chess club:", "            #jeb is a member of kerbal chess club:", "", "", "", "", "#REQUIRED TOURNAMENT:", "", "    def create_Required_Tournaments(self):", "        #CREATE TOURNAMENT WHERE VAL IS ORGANISER, SIGN UP = NOW + 24 HRS, JEB NOT SIGNED UP (NO MATCHES)", "        count_sss = Tournament.objects.filter(tournament_name = \"sss\").count()", "        if (count_sss == 0):", "            tournament_sss = Tournament.objects.create(", "                club = Club.objects.get(club_name=\"Kerbal Chess Club\"),", "                tournament_name = \"sss\",", "                short_description = \"A new tournament\",", "                number_of_participants = 16,", "                deadline = timezone.now()+timezone.timedelta(days=1),    # setting deadline with 24 hours left", "                start_time = self.faker.date_time_between(start_date='+2d', end_date='+20d', tzinfo=pytz.UTC)", "            )", "", "            kerbal_club = Club.objects.get(club_name = \"Kerbal Chess Club\")", "            kerbal_club.tournaments.add(tournament_sss)", "            kerbal_club.tournament_list.add(tournament_sss)", "", "            #Val is an organiser of this tournament:", "            val_user = User.objects.get(email='val@example.org')", "            tournament_sss.organisers.add(val_user)", "", "", "            #Seed some particpants:", "            user_items = kerbal_club.members.filter(id = val_user.id)   #filter to not allow val to be able to play in matches", "            items = kerbal_club.members.exclude(pk__in=user_items)", "", "            # print(items.count())", "", "            for i in range(15):", "                participant = random.choice(items)", "                if participant not in tournament_sss.organisers.all():", "                    tournament_sss.participants_list.add(participant)", "                    participant.clubs.add(kerbal_club)", "                    participant.tournaments.add(tournament_sss)", "                    participant.save()", "", "            #Ensure JEB is not part of this tournament:", "            jeb_user = User.objects.get(email='jeb@example.org')   #JEB WILL NOT BE PART OF THIS TOURNAMENT", "            tournament_sss.participants_list.remove(jeb_user)", "", "            tournament_sss.full_clean()", "            tournament_sss.save()", "            kerbal_club.save()", "", "", "            jeb_user = User.objects.get(email='jeb@example.org')   #JEB WILL NOT BE PART OF THIS TOURNAMENT", "            tournament_sss.participants_list.remove(jeb_user)", "", "            tournament_sss.save()", "", "            # tournament_one = self.create_one_tournament()    #Val is organiser of a tournament - another club?", "            tournament_two = self.create_another_val_tournament_kerbal_club()   #seed more tournaments in past - matches done.", "            tournament_three = self.create_another_val_tournament_random_club()", "", "", "        print('Required seeding complete: Tournaments in Kerbal Chess Club')", "", "", "", "    def create_another_val_tournament_kerbal_club(self):", "        #Val is the organiser of this tournament, in Kerbal Chess Club -", "        #sign up deadline passed 24 hours AGO, no matches, jeb + more signed up", "        tournament_two = Tournament.objects.create(", "            club = Club.objects.get(club_name=\"Kerbal Chess Club\"),", "            tournament_name = \"two\",", "            short_description = \"jfjohdhihdkjdshkf dhs\",", "            number_of_participants = 16,", "            deadline = timezone.now() - timezone.timedelta(days=1),    #sign up deadline passed 24 hours ago.", "            start_time = self.faker.future_datetime(end_date=\"+30d\", tzinfo=pytz.UTC)", "        )", "        #Val is organiser", "        val_user = User.objects.get(email='val@example.org')", "        tournament_two.organisers.add(val_user)", "", "        #Add tournament to Kerbal Chess Club:", "        kerbal_club = Club.objects.get(club_name = \"Kerbal Chess Club\")", "        kerbal_club.tournaments.add(tournament_two)", "        kerbal_club.tournament_list.add(tournament_two)", "", "        #Add Jeb", "        jeb_user = User.objects.get(email='jeb@example.org')", "        tournament_two.participants_list.add(jeb_user)", "        jeb_user.clubs.add(kerbal_club)", "        jeb_user.tournaments.add(tournament_two)", "", "", "        #Seed some particpants:", "        user_items = kerbal_club.members.filter(id = val_user.id)   #filter to not allow val to be able to play in matches", "        items = kerbal_club.members.exclude(pk__in=user_items)", "", "", "        for i in range(tournament_two.number_of_participants):", "            participant = random.choice(items)", "            if participant not in tournament_two.organisers.all():", "                tournament_two.participants_list.add(participant)", "                participant.clubs.add(kerbal_club)", "                participant.tournaments.add(tournament_two)", "                participant.save()", "", "        tournament_two.full_clean()", "        tournament_two.save()", "        kerbal_club.save()", "", "", "", "    def create_another_val_tournament_random_club(self):", "        #Val is the organiser of this tournament, in Other Chess Club -", "        #sign up deadline passed 24 hours AGO, no matches, jeb + more signed up", "", "        club_items = Club.objects.filter(club_name=\"Kerbal Chess Club\")", "        items = Club.objects.exclude(pk__in=club_items)", "        random_club = random.choice(items)", "", "        tournament_three = Tournament.objects.create(", "            club = random_club,", "            tournament_name = \"three\",", "            short_description = \"chess club where val is organiser, jeb + others have signed up\",", "            number_of_participants = 16,", "            deadline = timezone.now() - timezone.timedelta(days=1),    #sign up deadline passed 24 hours ago.", "            start_time = self.faker.future_datetime(end_date=\"+30d\", tzinfo=pytz.UTC)", "        )", "        #Val is organiser", "        val_user = User.objects.get(email='val@example.org')", "        tournament_three.organisers.add(val_user)", "", "        #Add tournament to Kerbal Chess Club:", "        random_club.tournaments.add(tournament_three)", "        random_club.tournament_list.add(tournament_three)", "", "        #Add Jeb", "        jeb_user = User.objects.get(email='jeb@example.org')", "        tournament_three.participants_list.add(jeb_user)", "        jeb_user.clubs.add(random_club)", "        jeb_user.tournaments.add(tournament_three)", "", "", "        #Seed some particpants:", "        user_items = random_club.members.filter(id = val_user.id)   #filter to not allow val to be able to play in matches", "        items = random_club.members.exclude(pk__in=user_items)", "", "        for i in range(tournament_three.number_of_participants):", "            participant = random.choice(items)", "            if participant not in tournament_three.organisers.all():", "                tournament_three.participants_list.add(participant)", "                participant.clubs.add(random_club)", "                participant.tournaments.add(tournament_three)", "                participant.save()", "", "        # tournament_three.participants_list[:tournament_three.number_of_participants]", "        tournament_three.full_clean()", "        tournament_three.save()", "        random_club.save()", "", "", "    def kerbal_past_tournaments(self):", "        #Small number of tournaments in the past - winners decided", "        tournament_count = 0", "        while tournament_count < Command.TOURNAMENT_COUNT:", "            print(f'Seeding Past Kerbal tournaments {tournament_count}',  end='\\r')", "            try:", "                # all_clubs = list(Club.objects.all())", "                kerbal_club = Club.objects.get(club_name=\"Kerbal Chess Club\")", "                tournament_name = self.faker.word()", "                short_description = self.faker.text(max_nb_chars=15)", "                number_of_participants = self.faker.random_int(min=2, max=16)", "                deadline = self.faker.date_time_between(start_date=\"-30d\", end_date='-21d', tzinfo=pytz.UTC)", "                start_time = self.faker.date_time_between(start_date=\"-20d\", end_date='-5d', tzinfo=pytz.UTC)", "", "                tournament = Tournament.objects.create(", "                    club=kerbal_club,", "                    tournament_name=tournament_name,", "                    short_description=short_description,", "                    number_of_participants= number_of_participants,", "                    deadline=deadline,", "                    start_time=start_time", "                )", "                kerbal_club.tournaments.add(tournament)", "                kerbal_club.tournament_list.add(tournament)", "", "                club_owner = kerbal_club.club_owner", "                user_items = kerbal_club.members.filter(id = club_owner.id)", "                items = kerbal_club.members.exclude(pk__in=user_items)", "", "                organiser = random.choice(items)", "                tournament.organisers.add(organiser)", "                organiser.clubs.add(kerbal_club)", "                organiser.save()", "", "", "                #the participants we add into the participant list needs to also be part of the tournament memeber list.", "                for i in range(tournament.number_of_participants):", "                    participant = random.choice(items)", "                    if participant not in tournament.organisers.all():", "                        # participant.sign_up_toggle()", "                        tournament.participants_list.add(participant)", "                        participant.clubs.add(kerbal_club)", "                        participant.save()", "", "", "                tournament.full_clean()", "                tournament.save()", "", "                tournament.tournament_winner= None", "                tournament.current_participants.clear()", "                tournament.removed_participants.clear()", "                all_participants_list = tournament.participants_list.all()", "", "", "                participants_list_count = len(all_participants_list)", "                previous_power_of_two = tournament.power_Of_Two(participants_list_count)", "                tournament.make_Participants_Power_Of_2(previous_power_of_two)", "", "                participants_list = tournament.current_participants.all()", "                matches_list = tournament.matches_list.all()", "                winners_list = tournament.winners_list.all()", "", "                now = timezone.now()", "", "                if all_participants_list.count() <= 1 and tournament.start_time >now:", "                    messages.add_message(request, messages.ERROR, \"Not enough participants!\")", "", "                else:", "                    if matches_list.count() == 0:    #I.E. NO MATCHES HAVE BEEN MADE FOR THIS ROUND YET!", "                        round_input = 1  #first round", "                        tournament.create_matches(round_input, participants_list)", "                        matches_list = tournament.matches_list.all()", "                        winners_list = tournament.winners_list.all()", "", "", "                for match in matches_list:", "                # generate_first_match(tournament, kerbal_club)", "                    self.log_winners(tournament, kerbal_club, match)", "", "                if not tournament.tournament_winner:", "                    self.set_next_match_participants(tournament, kerbal_club)", "                    self.generate_next_matches(tournament, kerbal_club)", "", "            except IntegrityError as e:", "                continue", "            tournament_count += 1", "        print('Kerbal past tournament seeding complete')", "", "", "", "    def log_winners(self, tournament, kerbal_club, match):", "        #Player 1 is always the winner for seeder simplcity/ use choice.", "        player1 = match.player1", "        winner_user =  User.objects.get(id=player1.id)", "", "        tournament.winners_list.add(winner_user)", "        tournament.all_winners_list.add(winner_user)", "", "        current_match = Match.objects.get(matchId = match.matchId)", "        current_match.winner = winner_user", "", "        if tournament.winners_list.count() == 1 and tournament.matches_list.count() ==1:", "            tournament.tournament_winner = winner_user", "            tournament.save()", "", "", "    def set_next_match_participants(self, tournament, kerbal_club):", "            current_winners = tournament.winners_list.all()", "            if current_winners.count() != 1 :", "                tournament.current_participants.clear()", "", "                for winner in current_winners:", "                    tournament.current_participants.add(winner)   #Move all winners from last round into current_participants_list", "", "                tournament.winners_list.clear()    #clear winners for this round.", "                tournament.save()", "", "", "    def generate_next_matches(self, tournament, kerbal_club):", "            all_participants_list = tournament.participants_list.all()", "            participants_list = tournament.current_participants.all()", "", "", "            round_input = 2  #All other rounds have 'round =2' except first round has round 2", "            tournament.create_matches(round_input, participants_list)", "            matches_list = tournament.matches_list.all()", "            now = timezone.now()", "", "            winners_list = tournament.winners_list.all()", "", "            for match in matches_list:", "                self.log_winners(tournament, kerbal_club, match)", "", "            if not tournament.tournament_winner:", "                self.set_next_match_participants(tournament, kerbal_club)", "                self.generate_next_matches(tournament, kerbal_club)"], "clubs/management/commands/unseed.py": ["from clubs.models import User, Club, Tournament", "        Tournament.objects.all().delete()"], "clubs/migrations/0006_auto_20211217_1132.py": ["# Generated by Django 3.2.8 on 2021-12-17 11:32", "", "import datetime", "from django.conf import settings", "import django.core.validators", "from django.db import migrations, models", "import django.db.models.deletion", "import django.utils.timezone", "from django.utils.timezone import utc", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0005_auto_20211216_1013'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='match',", "            name='winner',", "            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='deadline',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 18, 11, 32, 6, 218582, tzinfo=utc), validators=[django.core.validators.MinValueValidator(django.utils.timezone.now)]),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='start_time',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 19, 11, 32, 6, 218616, tzinfo=utc)),", "        ),", "    ]"], "clubs/models.py": ["    tournament_name = models.CharField(max_length=20, blank=False, unique=True)", "    deadline = models.DateTimeField(default=(timezone.now() + timedelta(days=1)))", "        \"\"\"Creates matches of paired particpants with the given round value and", "            participants list for a tournament. \"\"\"", "", "", "                        date = self.start_time,", "    def power_Of_Two(self, participants_list_count):    #x= len(participants_list)", "        \"\"\"Calculate if the number of participants in a tournament is a power of 2,", "         if it is not, calculate the previous power of two. \"\"\"", "", "        if(participants_list_count & (participants_list_count-1) != 0):  #if  a power of 2", "            while (participants_list_count & participants_list_count-1):", "                participants_list_count = participants_list_count & participants_list_count-1    #Finds previous power of 2", "            return participants_list_count", "", "", "", "    def make_Participants_Power_Of_2(self, previous_power_of_two):", "        \"\"\"If the number of participants in a tournament is NOT a power of 2,", "            update the current participants list to be the highest power of 2", "            number of participants less than the current participant count. \"\"\"", "", "        participants_list = self.participants_list.all()", "        if previous_power_of_two:", "            new_participants = participants_list[:previous_power_of_two]", "            for new_participant in new_participants:", "                self.current_participants.add(new_participant)", "", "            remaining = (participants_list.count() - previous_power_of_two) +1   #THE OTHER HALF OF THE LIST: WHO WONT PLAY!", "", "            removed_participants = participants_list[(remaining):]", "            for removed_participant in removed_participants:", "                self.removed_participants.add(removed_participant)", "", "        else:", "            for participants in participants_list:", "                self.current_participants.add(participants)", "", "", "    winner = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True, related_name='+')", "", "", "    def log_winner_toggle(self, organiser, winner, club, tournament):", "        if tournament.organisers.filter(email=organiser.email).exists():", "            if winner == self.player1 or winner == self.player2:", "                tournament.winners_list.add(winner)"], "clubs/templates/partials/make_matches.html": ["                      <button class=\"btn btn-primary\">Select Winner is Player1</button>", "                {%else%}", "                  <h8>Please wait until match is over</h8>", "            <button type=\"button\"disable=\"disable\"class=\"btn btn-secondary\">Generate matches for next round</button>", "            <button type=\"button\"disable=\"disable\"class=\"btn btn-secondary\">Generate matches for next round</button>", "         <br>", "         <br>", "         <p> - If the ability to log winners is not available yet then please <b>refresh</b> the page <b>after the matches are over</b>.</p>", "         <p> - New matches will be made after selecting \"Generate matches for next round\".</p>"], "clubs/templates/partials/navbar.html": ["    {% if not user.is_authenticated %}", "      <a class=\"navbar-brand\" href=\"{% url 'home' %}\">", "        Chess", "      </a>", "    {% else %}", "      <a class=\"navbar-brand\" href=\"{% url 'user_profile' %}\">", "        Chess", "      </a>", "    {% endif %}"], "clubs/templates/tournament_list.html": ["          <td><b><big>Matches</b></big></td>", "           <td>{{ tournament.all_matches_list.count }}</td>", "              {% if now > tournament.start_time %}", "                {% if tournament.participants_list.count <= 1 %}", "                  <b>Tournament did not occur.</b>", "                {%else%}", "                  {% ifequal tournament.matches_list none%}", "                    {% if not tournament.tournament_winner%}", "                      <b>Tournament did not occur.</b>", "                    {%endif%}", "                  {% endifequal %}", "                {%endif%}", "                  {% ifequal tournament.number_of_participants tournament.participants_list.count %}", "                    <button type=\"button\"disable=\"disable\"class=\"btn btn-secondary\">SIGN UP</button>", "                    Max Capacity", "                  {% else %}", "                    <form action=\"{% url 'sign_up_toggle' club_id=current_club.id tournament_id=tournament.id %}\" method=\"get\">", "                      <button class=\"btn btn-primary\">SIGN UP</button>", "                    </form>", "                  {% endifequal %}", "                {% if tournament.start_time > now%}", "                <!--Past start time: cannot assign co-organisers anymore - disable-->", "                {% if tournament.deadline < now and tournament.start_time > now and not tournament.tournament_winner%}", "                  {%ifequal tournament.matches_list.count 0%}", "                    <!--Generate first set of matches/ see current matches being made. -->", "                    <form action=\"{% url 'generate_matches' club_id=current_club.id tournament_id=tournament.id%}\" method=\"get\">", "                      <button class=\"btn btn-primary\">Generate Matches</button>", "                    </form>", "                  {%else%}", "                  <!--see current matches being made. before start time - cant click on winners-->", "                    <form action=\"{% url 'generate_matches' club_id=current_club.id tournament_id=tournament.id%}\" method=\"get\">", "                      <button class=\"btn btn-primary\">Generate Matches</button>", "                    </form>", "                  {%endifequal%}", "                {%elif tournament.start_time < now and not tournament.tournament_winner%}", "                  {%ifnotequal tournament.matches_list.count 0%}", "                    <!--Generates current matches being made, i.e. current state of matches -->", "                    <form action=\"{% url 'generate_matches' club_id=current_club.id tournament_id=tournament.id%}\" method=\"get\">", "                      <button class=\"btn btn-primary\">Generate Matches</button>", "                    </form>", "                  {%else%}", "                  <!--Sign up deadline, start time are in past. No matches were made- tournament did not occur - disbale-->", "                      <button type=\"button\"disable=\"disable\"class=\"btn btn-secondary\">Generate Matches</button>", "                  {%endifnotequal%}", "                {%elif tournament.start_time > now and not tournament.tournament_winner%}", "                  {%ifequal tournament.matches_list.count 0%}", "                  <!--Deadline in future, no matches yet- disable -->", "                    <button type=\"button\"disable=\"disable\"class=\"btn btn-secondary\">Generate Matches</button>", "                  {%else%}", "                    splish splash", "                  {%endifequal%}", "                {%elif tournament.start_time < now and tournament.tournament_winner%}", "                    <!--Deadline past, winner established- disable -->", "                    <button type=\"button\"disable=\"disable\"class=\"btn btn-secondary\">Generate Matches</button>", "                {%elif tournament.start_time < now and not tournament.tournament_winner%}", "                    <!--Deadline past, winner not established - disable-->", "                    <button type=\"button\"disable=\"disable\"class=\"btn btn-secondary\">Generate Matches</button>", "        <form action=\"{% url 'create_tournament' club_id=current_club.id %}\" method=\"get\">", "          <button class=\"btn btn-primary\">Create tournament</button>", "        </form>", "        <br>", "        <p> ORGANISERS: </p>", "          <p>    - Organisers can only generate matches after the sign up deadline has passed and before the tournament start time. </p>", "          <p>    - First round of matches will be created with a start time of the tournament start time</p>", "          <p>    - All next rounds of matches will occur when the organiser creates the matches</p>", "          <p>    - Organisers can only assign co-organisers before the tournament start time.</p>", "          <p>    - Touraments with less than 2 participants will not go ahead for matches.</p>", "      {% endif %}", "      {% if current_user in current_club.members.all%}", "        <br>", "        <p> MEMBERS: </p>", "          <p>    - Members can sign up to tournaments within the sign up deadline and if a tournament's capacity is not at its max. </p>", "      <br>"], "clubs/tests/fixtures/default_match.json": ["      \"round\" : 1,", "      \"winner\": 1"], "clubs/tests/fixtures/default_tournament.json": ["      \"start_time\" : \"2023-12-04T03:26:15+00:00\",", "      \"tournament_winner\": 1"], "clubs/tests/fixtures/other_matches.json": ["[", "  {", "    \"model\": \"clubs.match\",", "    \"pk\": 1,", "    \"fields\": {", "      \"matchId\" : 1,", "      \"player1\" : 1,", "      \"player2\" : 2,", "      \"tournament\" : 1,", "      \"club\" : 1,", "      \"date\" : \"2023-12-04T03:23:15+00:00\",", "      \"round\" : 2,", "      \"winner\": 1", "    }", "  },", "    {", "      \"model\": \"clubs.match\",", "      \"pk\": 1,", "      \"fields\": {", "        \"matchId\" : 1,", "        \"player1\" : 1,", "        \"player2\" : 2,", "        \"tournament\" : 1,", "        \"club\" : 1,", "        \"date\" : \"2023-12-04T03:23:15+00:00\",", "        \"round\" : 2,", "        \"winner\": 1", "      }", "    }", "]"], "clubs/tests/fixtures/other_tournaments.json": ["        \"start_time\" : \"2023-12-04T03:27:15+00:00\",", "        \"tournament_winner\": 1", "        \"start_time\" : \"2023-12-04T03:28:15+00:00\",", "        \"tournament_winner\": 1"], "clubs/tests/forms/test_club_form.py": ["\"\"\"Unit tests of the club form.\"\"\"", "from django import forms", "    \"\"\"Unit tests of the Club form.\"\"\"", "", "    fixtures = ['clubs/tests/fixtures/default_club.json',", "                'clubs/tests/fixtures/default_user.json']", "", "", "        self.user = User.objects.get(email='johndoe@example.org')", "        self.form_input = {", "            'club_name': 'Club 4',", "            'location': 'London',", "            'description': 'Random chess club in london',", "        }", "", "", "    def test_form_has_necessary_fields(self):", "        form = ClubForm()", "        self.assertIn('club_name', form.fields)", "        self.assertIn('location', form.fields)", "        self.assertIn('description', form.fields)", "        form = ClubForm(data=self.form_input)", "    def test_form_uses_model_validation(self):", "        self.form_input['location'] = 'x'*200", "        form = ClubForm(data=self.form_input)", "", "    def test_form_rejects_blank_club_name(self):", "        self.form_input['club_name'] = ''", "        form = ClubForm(data=self.form_input)", "        self.assertFalse(form.is_valid())", "", "    def test_form_rejects_blank_password(self):", "        self.form_input['location'] = ''", "        form = ClubForm(data=self.form_input)", "        self.assertFalse(form.is_valid())", "", "    def test_form_accepts_no_description(self):", "        self.form_input['description'] = ''", "        form = ClubForm(data=self.form_input)", "        self.assertTrue(form.is_valid())"], "clubs/tests/forms/test_log_in_form.py": ["# from . import fixtures", "        self.assertEqual(user, None)"], "clubs/tests/forms/test_password_form.py": ["from django import forms", "        self.user = User.objects.get(email='johndoe@example.org')", "            'old_password': 'Password123',", "        self.assertIn('old_password', form.fields)", "", "        self.form_input['old_password'] = 'WrongPassword123'", "        self.assertTrue(check_password('NewPassword123', self.user.password))"], "clubs/tests/forms/test_sign_up_form.py": ["from django import forms", "        'chess_experience_level': 1,"], "clubs/tests/forms/test_tournament_form.py": ["\"\"\"Unit tests of the tournament form.\"\"\"", "from django import forms", "from django.test import TestCase", "from clubs.forms import TournamentForm", "from clubs.models import User, Club, Tournament", "", "class TournamentFormTestCase(TestCase):", "    \"\"\"Unit tests of the tournament form.\"\"\"", "", "    fixtures = ['clubs/tests/fixtures/default_club.json',", "                'clubs/tests/fixtures/default_user.json']", "", "    def setUp(self):", "        self.user = User.objects.get(email='johndoe@example.org')", "        self.form_input = {", "            'tournament_name': 'Tournament 4',", "            'short_description': 'Another chess club tournament',", "            'number_of_participants': 13,", "            'deadline': '2022-12-04T03:23:15+00:00',", "            'start_time': '2023-12-04T03:23:15+00:00',", "        }", "        self.club = Club.objects.get(club_name = \"Chess Club 1\")", "        self.club.officers.add(self.user)", "        self.user.clubs.add(self.club)", "", "", "    def test_valid_tournament_form(self):", "        form = TournamentForm(data=self.form_input)", "        self.assertTrue(form.is_valid())", "", "    def test_form_has_necessary_fields(self):", "        form = TournamentForm()", "        self.assertIn('tournament_name', form.fields)", "        self.assertIn('short_description', form.fields)", "        self.assertIn('number_of_participants', form.fields)", "        self.assertIn('deadline', form.fields)", "        self.assertIn('start_time', form.fields)", "        deadline_field = form.fields['deadline']", "        self.assertTrue(isinstance(deadline_field , forms.DateTimeField))", "        start_time_field = form.fields['start_time']", "        self.assertTrue(isinstance(start_time_field , forms.DateTimeField))", "", "", "    def test_form_tournament_model_validation(self):", "        self.form_input['number_of_participants'] = 'bad_number_of_participants'", "        form = TournamentForm(data=self.form_input)", "        self.assertFalse(form.is_valid())", "", "", "    def test_form_rejects_blank_tournament_name(self):", "        self.form_input['tournament_name'] = ''", "        form = TournamentForm(data=self.form_input)", "        self.assertFalse(form.is_valid())", "", "    def test_form_rejects_blank_number_of_participants(self):", "        self.form_input['number_of_participants'] = ''", "        form = TournamentForm(data=self.form_input)", "        self.assertFalse(form.is_valid())", "", "    def test_form_rejects_no_short_description(self):", "        self.form_input['short_description'] = ''", "        form = TournamentForm(data=self.form_input)", "        self.assertFalse(form.is_valid())"], "clubs/tests/forms/test_user_form.py": ["\"\"\"Unit tests of the User Form.\"\"\"", "from django import forms", "    \"\"\"Unit tests of the User Form.\"\"\""], "clubs/tests/models/test_club_model.py": ["\"\"\"Tests of the Club Model.\"\"\"", "", "    \"\"\"Tests of the Club  Model.\"\"\""], "clubs/tests/models/test_match_model.py": ["\"\"\"Tests of the Match Model.\"\"\"", "from django.core.exceptions import ValidationError", "from django.test import TestCase", "from clubs.models import Tournament, Match, Club, User", "", "class MatchModelTest(TestCase):", "    \"\"\"Tests of the Match Model.\"\"\"", "", "    fixtures = ['clubs/tests/fixtures/default_user.json',", "                 'clubs/tests/fixtures/other_users.json',", "                 'clubs/tests/fixtures/default_tournament.json',", "                 'clubs/tests/fixtures/other_tournaments.json',", "                 'clubs/tests/fixtures/default_club.json',", "                 'clubs/tests/fixtures/other_clubs.json',", "                 'clubs/tests/fixtures/default_match.json',", "                  'clubs/tests/fixtures/other_matches.json'", "                ]", "", "", "    def setUp(self):", "        super(TestCase, self).setUp()", "        self.user = User.objects.get(username='johndoe@example.org')", "        self.tournament = Tournament.objects.get(tournament_name=\"Tournament 1\")", "        self.other_tournament = Tournament.objects.get(tournament_name=\"Tournament 2\")", "        self.match = Match.objects.get(matchId=1)", "", "", "    def test_valid_message(self):", "        self._assert_match_is_valid()", "", "", "", "# Match ID tests:", "    def test_match_id_is_not_specified(self):", "        self.match.matchId = None", "        self._assert_match_is_valid()", "", "", "#Player tests:", "    def test_player1_must_not_be_blank(self):", "        self.match.player1 = None", "        self._assert_match_is_invalid()", "", "    def test_player2_must_not_be_blank(self):", "        self.match.player2 = None", "        self._assert_match_is_invalid()", "", "", "#tournament tests:", "    def test_tournament_must_not_be_blank(self):", "        self.match.tournament = None", "        self._assert_match_is_invalid()", "", "", "#club tests:", "    def test_club_must_not_be_blank(self):", "        self.match.club = None", "        self._assert_match_is_invalid()", "", "", "#round test:   -- maybe get rid of ?", "    def test_round_can_not_be_blank(self):", "        self.match.round = None", "        self._assert_match_is_invalid()", "", "", "", "# Assert valid and invalid helper methods:", "    def _assert_match_is_valid(self):", "        try:", "            self.match.full_clean()", "        except (ValidationError):", "            self.fail(\"Test match should be valid\")", "", "    def _assert_match_is_invalid(self):", "        with self.assertRaises(ValidationError):", "            self.match.full_clean()"], "clubs/tests/models/test_tournament_model.py": ["\"\"\"Tests of the Tournament Model.\"\"\"", "    \"\"\"Tests of the Tournament Model.\"\"\"", "    def test_tournament_name_must_not_be_over_20_characters(self):", "        self.tournament.tournament_name = 'x' * 21", "        self.tournament.tournament_name = 'x' * 20", "    def test_number_of_participants_must_not_be_blank(self):"], "clubs/tests/views/test_applicant_list_view.py": ["\"\"\"Tests of the Applicant List view.\"\"\"", "    \"\"\"Tests of the Applicant List view.\"\"\"", "            "], "clubs/tests/views/test_approve_toggle_view.py": ["\"\"\"Tests of the Approve Toggle view.\"\"\"", "    \"\"\"Tests of the Approve Toggle view.\"\"\""], "clubs/tests/views/test_cancel_toggle_view.py": ["\"\"\"Tests of the Cancel Toggle view.\"\"\"", "    \"\"\"Tests of the Cancel Toggle view.\"\"\""], "clubs/tests/views/test_co_organiser_list_view.py": ["\"\"\"Tests of the Co Organiser List view.\"\"\"", "from django.conf import settings", "    \"\"\"Tests of the Co Organiser List view.\"\"\"", "    def test_user_list_url(self):", "        self.assertEqual(f'/club/{self.club.id}/co_organise/{self.tournament.id}',self.url)", "    def test_get_co_organiser_list_redirects_when_not_logged_in(self):", "         redirect_url = reverse_with_next('log_in', self.url)", "         response = self.client.get(self.url)", "         self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "    def test_get_co_organiser_list(self):", "        self.client.login(email=self.user.email, password='Password123')", "        self._create_test_officers(settings.USERS_PER_PAGE-1)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'co_organiser_list.html')", "        self.assertEqual(len(response.context['officers']), settings.USERS_PER_PAGE)", "        self.assertFalse(response.context['is_paginated'])", "        for user_id in range(settings.USERS_PER_PAGE-1):", "            self.assertContains(response,f'user{user_id}@test.org')", "            self.assertContains(response, f'First{user_id}')", "            self.assertContains(response, f'Last{user_id}')", "            user = User.objects.get(username=f'user{user_id}@test.org')", "            user_url = reverse('show_user', kwargs={'user_id': user.id})", "            self.assertContains(response, user_url)", "", "    def test_get_co_organiser_list_with_pagination(self):", "        self.client.login(email=self.user.email, password='Password123')", "        club = Club.objects.get(club_name='Chess Club 1')", "        self._create_test_officers(settings.USERS_PER_PAGE*2+3-1)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'co_organiser_list.html')", "        self.assertEqual(len(response.context['officers']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_one_url = reverse('co_organiser_list',  kwargs={'club_id': self.club.id, 'tournament_id':self.tournament.id}) + '?page=1'", "        response = self.client.get(page_one_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'co_organiser_list.html')", "        self.assertEqual(len(response.context['officers']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_two_url = reverse('co_organiser_list', kwargs={'club_id': self.club.id, 'tournament_id':self.tournament.id}) + '?page=2'", "        response = self.client.get(page_two_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'co_organiser_list.html')", "        self.assertEqual(len(response.context['officers']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_three_url = reverse('co_organiser_list', kwargs={'club_id': self.club.id, 'tournament_id':self.tournament.id}) + '?page=3'", "        response = self.client.get(page_three_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'co_organiser_list.html')", "        self.assertEqual(len(response.context['officers']), 3)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertFalse(page_obj.has_next())", "", "    def test_get_user_list_redirects_when_not_logged_in(self):", "          redirect_url = reverse_with_next('log_in', self.url)", "          response = self.client.get(self.url)", "          self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "    def _create_test_officers(self, user_count=10):", "        for user_id in range(user_count):", "            user = User.objects.create_user(", "                username = f'user{user_id}@test.org',", "                first_name=f'First{user_id}',", "                last_name=f'Last{user_id}',", "                email=f'user{user_id}@test.org',", "                password='Password123',", "                public_bio= \"My bio\",", "                chess_experience_level= 1,", "                short_personal_statement= \"I love chess.\" )", "            self.club.officers.add(user)", "            user.clubs.add(self.club)", "            self.tournament.organisers.add(user)"], "clubs/tests/views/test_create_club_view.py": ["\"\"\"Tests of the Create Club view.\"\"\"", "    \"\"\"Tests of the Create Club view.\"\"\""], "clubs/tests/views/test_demote_toggle_view.py": ["\"\"\"Tests of the Demote Toggle view.\"\"\"", "    \"\"\"Tests of the Demote Toggle view.\"\"\""], "clubs/tests/views/test_generate_match_view.py": ["\"\"\"Tests of the Generate Matches view. (First set of matches)\"\"\"", "from django.test import TestCase", "from django.urls import reverse", "from clubs.models import Club, User, Tournament, Match", "from clubs.tests.helpers import reverse_with_next", "", "", "class GenerateMatchesTest(TestCase):", "    \"\"\"Tests of the Generate Matches view. (First set of matches)\"\"\"", "", "    fixtures = ['clubs/tests/fixtures/default_user.json',", "                 'clubs/tests/fixtures/other_users.json',", "                 'clubs/tests/fixtures/default_tournament.json',", "                 'clubs/tests/fixtures/other_tournaments.json',", "                 'clubs/tests/fixtures/default_club.json',", "                 'clubs/tests/fixtures/other_clubs.json',", "                 'clubs/tests/fixtures/default_match.json',", "                  'clubs/tests/fixtures/other_matches.json'", "                ]", "", "    def setUp(self):", "        super(TestCase, self).setUp()", "        self.user = User.objects.get(email='johndoe@example.org')", "        self.other_user1 = User.objects.get(email='janedoe@example.org')", "        self.other_user2 = User.objects.get(email='petrapickles@example.org')", "        self.other_user3 = User.objects.get(email ='peterpickles@example.org')", "        self.club = Club.objects.get(club_name = \"Chess Club 1\")", "        self.tournament = Tournament.objects.get(tournament_name=\"Tournament 1\")", "        self.club.tournaments.add(self.tournament)", "        self.club.tournament_list.add(self.tournament)", "        self.club.officers.add(self.user)", "        self.club.members.add(self.other_user1)", "        self.club.members.add(self.other_user2)", "        self.club.members.add(self.other_user3)", "        self.tournament.organisers.add(self.user)", "        self.tournament.participants_list.add(self.other_user1)", "        self.tournament.participants_list.add(self.other_user2)", "        self.tournament.participants_list.add(self.other_user3)", "", "", "        self.url = reverse('generate_matches', kwargs={'tournament_id': self.tournament.id, 'club_id':self.club.id})", "", "    def test_generate_matches_url(self):", "        self.assertEqual(f'/club/{self.club.id}/generate_matches/{self.tournament.id}',self.url)", "", "", "    def test_generate_match_redirects_when_not_logged_in(self):", "        match_count_before = Match.objects.count()", "        redirect_url = reverse_with_next('log_in', self.url)", "        response = self.client.get(self.url)", "        self.assertRedirects(response, redirect_url,", "            status_code=302, target_status_code=200, fetch_redirect_response=True)", "        match_count_after = Match.objects.count()", "        self.assertEqual(match_count_after, match_count_before)", "", "", "    def test_successful_new_match(self):", "        self.client.login(email=self.user.email, password='Password123')", "        match_count_before = Match.objects.count()", "        response = self.client.get(self.url)", "        participants_list_count = len(self.tournament.participants_list.all())", "        previous_power_of_two= self.tournament.power_Of_Two(participants_list_count)", "        self.tournament.make_Participants_Power_Of_2(previous_power_of_two)", "        participants_list =  self.tournament.participants_list.all()", "        round_input = 1", "        self.tournament.create_matches(round_input, participants_list)", "        match_count_after = Match.objects.count()", "        self.assertEqual(match_count_after, match_count_before+2)", "        new_match = Match.objects.latest('date')", "        self.assertEqual(self.tournament, new_match.tournament)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'generate_matches.html')", "", "", "    def test_unsuccessful_generate_match(self):", "        self.client.login(email='johndoe@example.org', password='Password123')", "        match_count_before = Match.objects.count()", "        self.tournament.participants_list.clear()", "        response = self.client.get(self.url)", "        participants_list_count = len(self.tournament.participants_list.all())", "        previous_power_of_two= self.tournament.power_Of_Two(participants_list_count)", "        self.tournament.make_Participants_Power_Of_2(previous_power_of_two)", "        participants_list =  self.tournament.participants_list.all()", "        round_input = 1", "        self.tournament.create_matches(round_input, participants_list)", "        match_count_after = Match.objects.count()", "        self.assertEqual(match_count_after, match_count_before)", "        new_match = Match.objects.latest('date')", "        self.assertEqual(self.tournament, new_match.tournament)", "        self.assertEqual(self.tournament, new_match.tournament)", "        redirect_url = reverse('tournament_list', kwargs={'club_id': self.club.id})", "        response = self.client.get(self.url, follow=True)", "        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "", "    def test_get_generate_match_redirects_when_not_an_organiser(self):", "        user = User.objects.get(email='peterpickles@example.org')", "        self.client.login(email=user.email, password='Password123')", "        redirect_url = reverse('show_club', kwargs={'club_id': self.club.id})", "        response = self.client.get(self.url, follow=True)", "        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)"], "clubs/tests/views/test_generate_next_matches_view.py": ["\"\"\"Tests of the Generate Next Matches view.\"\"\"", "from django.test import TestCase", "from django.urls import reverse", "from clubs.models import Club, User, Tournament, Match", "from clubs.tests.helpers import reverse_with_next", "", "", "class GenerateNextMatchesTest(TestCase):", "    \"\"\"Tests of the Generate Next Matches view.", "    (Generating matches for all rounds after the first)\"\"\"", "", "    fixtures = ['clubs/tests/fixtures/default_user.json',", "                 'clubs/tests/fixtures/other_users.json',", "                 'clubs/tests/fixtures/default_tournament.json',", "                 'clubs/tests/fixtures/other_tournaments.json',", "                 'clubs/tests/fixtures/default_club.json',", "                 'clubs/tests/fixtures/other_clubs.json',", "                 'clubs/tests/fixtures/default_match.json',", "                  'clubs/tests/fixtures/other_matches.json'", "                ]", "", "", "    def setUp(self):", "        super(TestCase, self).setUp()", "        self.user = User.objects.get(email='johndoe@example.org')", "        self.other_user1 = User.objects.get(email='janedoe@example.org')", "        self.other_user2 = User.objects.get(email='petrapickles@example.org')", "        self.other_user3 = User.objects.get(email ='peterpickles@example.org')", "        self.club = Club.objects.get(club_name = \"Chess Club 1\")", "        self.tournament = Tournament.objects.get(tournament_name=\"Tournament 1\")", "        self.club.tournaments.add(self.tournament)", "        self.club.tournament_list.add(self.tournament)", "        self.club.officers.add(self.user)", "        self.club.members.add(self.other_user1)", "        self.club.members.add(self.other_user2)", "        self.club.members.add(self.other_user3)", "        self.tournament.organisers.add(self.user)", "        self.tournament.participants_list.add(self.other_user1)", "        self.tournament.participants_list.add(self.other_user2)", "        self.tournament.participants_list.add(self.other_user3)", "", "", "        self.url = reverse('generate_next_matches', kwargs={'tournament_id': self.tournament.id, 'club_id':self.club.id})", "", "    def test_generate_next_matches_url(self):", "        self.assertEqual(f'/club/{self.club.id}/generate_next_match/{self.tournament.id}',self.url)", "", "", "    def test_generate_next_match_redirects_when_not_logged_in(self):", "        match_count_before = Match.objects.count()", "        redirect_url = reverse_with_next('log_in', self.url)", "        response = self.client.get(self.url)", "        self.assertRedirects(response, redirect_url,", "            status_code=302, target_status_code=200, fetch_redirect_response=True", "        )", "        match_count_after = Match.objects.count()", "        self.assertEqual(match_count_after, match_count_before)", "", "", "    def test_successful_new_match(self):", "        self.client.login(email=self.user.email, password='Password123')", "        match_count_before = Match.objects.count()", "        response = self.client.get(self.url)", "        self._create_tournament_participants_(16-3)", "        participants_list_count = len(self.tournament.participants_list.all())", "        previous_power_of_two= self.tournament.power_Of_Two(participants_list_count)", "        self.tournament.make_Participants_Power_Of_2(previous_power_of_two)", "        participants_list =  self.tournament.participants_list.all()", "        round_input = 2", "        self.tournament.create_matches(round_input, participants_list)", "        match_count_after = Match.objects.count()", "        self.assertEqual(match_count_after, match_count_before+8)", "        new_match = Match.objects.latest('date')", "        self.assertEqual(self.tournament, new_match.tournament)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'generate_matches.html')", "", "", "    def _create_tournament_participants_(self, user_count=13):", "            for user_id in range(user_count):", "                new_participant = User.objects.create_user(", "                    username = f'user{user_id}@test.org',", "                    first_name=f'First{user_id}',", "                    last_name=f'Last{user_id}',", "                    email=f'user{user_id}@test.org',", "                    password='Password123',", "                    public_bio= \"My bio\",", "                    chess_experience_level= 1,", "                    short_personal_statement= \"I love chess.\" )", "", "                new_participant.clubs.add(self.club)", "                self.club.members.add(new_participant)", "                self.tournament.participants_list.add(new_participant)", "", "", "    def test_get_generate_next_match_redirects_when_not_an_organiser(self):", "        user = User.objects.get(email='peterpickles@example.org')", "        self.client.login(email=user.email, password='Password123')", "        redirect_url = reverse('show_club', kwargs={'club_id': self.club.id})", "        response = self.client.get(self.url, follow=True)", "        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "", "    def test_unsuccessful_generate_next_match(self):", "        self.client.login(email='johndoe@example.org', password='Password123')", "        match_count_before = Match.objects.count()", "        self.tournament.participants_list.clear()", "        response = self.client.get(self.url)", "        participants_list_count = len(self.tournament.participants_list.all())", "        previous_power_of_two= self.tournament.power_Of_Two(participants_list_count)", "        self.tournament.make_Participants_Power_Of_2(previous_power_of_two)", "        participants_list =  self.tournament.participants_list.all()", "        round_input = 2", "        self.tournament.create_matches(round_input, participants_list)", "        match_count_after = Match.objects.count()", "        self.assertEqual(match_count_after, match_count_before)", "        new_match = Match.objects.latest('date')", "        self.assertEqual(self.tournament, new_match.tournament)", "        self.assertEqual(self.tournament, new_match.tournament)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'generate_matches.html')"], "clubs/tests/views/test_home_view.py": ["\"\"\"Tests of the home view.\"\"\"", "from django.test import TestCase", "from django.urls import reverse", "from clubs.models import Club, User, Tournament, Match", "from clubs.tests.helpers import reverse_with_next", "", "class HomeViewTestCase(TestCase):", "    \"\"\"Tests of the home view.\"\"\"", "", "    fixtures = ['clubs/tests/fixtures/default_user.json']", "", "    def setUp(self):", "        super(TestCase, self).setUp()", "        self.url = reverse('home')", "        self.user = User.objects.get(email='johndoe@example.org')", "", "", "    def test_home_url(self):", "        self.assertEqual(self.url,'/')", "", "    def test_get_home(self):", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'home.html')", "", "    def test_get_home_when_logged_in(self):", "        self.client.login(username=self.user.email, password=\"Password123\")", "        response = self.client.get(self.url, follow=True)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'home.html')"], "clubs/tests/views/test_log_winners_toggle_view.py": ["\"\"\"Tests of the Log Winners view.\"\"\"", "from django.test import TestCase", "from django.urls import reverse", "from clubs.models import Club, User, Tournament, Match", "from clubs.tests.helpers import reverse_with_next", "", "", "class LogWinnersTestCase(TestCase):", "    \"\"\"Tests of the Log Winners view.\"\"\"", "", "    fixtures = ['clubs/tests/fixtures/default_user.json',", "                 'clubs/tests/fixtures/other_users.json',", "                 'clubs/tests/fixtures/default_tournament.json',", "                 'clubs/tests/fixtures/other_tournaments.json',", "                 'clubs/tests/fixtures/default_club.json',", "                 'clubs/tests/fixtures/other_clubs.json',", "                 'clubs/tests/fixtures/default_match.json',", "                  'clubs/tests/fixtures/other_matches.json'", "                ]", "", "", "    def setUp(self):", "        super(TestCase, self).setUp()", "        self.user = User.objects.get(email='johndoe@example.org')", "        self.other_user1 = User.objects.get(email='janedoe@example.org')", "        self.other_user2 = User.objects.get(email='petrapickles@example.org')", "        self.other_user3 = User.objects.get(email ='peterpickles@example.org')", "        self.club = Club.objects.get(club_name = \"Chess Club 1\")", "        self.tournament = Tournament.objects.get(tournament_name=\"Tournament 1\")", "        self.club.tournaments.add(self.tournament)", "        self.club.tournament_list.add(self.tournament)", "        self.club.officers.add(self.user)", "        self.club.members.add(self.other_user1)", "        self.club.members.add(self.other_user2)", "        self.club.members.add(self.other_user3)", "        self.other_user1.clubs.add(self.club)", "        self.tournament.organisers.add(self.user)", "        self.tournament.participants_list.add(self.other_user1)", "        self.tournament.participants_list.add(self.other_user2)", "        self.match = Match.objects.get(matchId=1)", "        self.match.player1 = self.other_user1", "        self.match.player2 = self.other_user2", "", "        self.url = reverse('log_winners', kwargs={'tournament_id': self.tournament.id, 'club_id':self.club.id, 'user_id':self.user.id, 'match_id':self.match.matchId})", "", "    def test_log_winners_toggle_url(self):", "        self.assertEqual(f'/club/{self.club.id}/log_winners/{self.tournament.id}/{self.user.id}/{self.match.matchId}',self.url)", "", "", "    def test_get_log_winners_toggle_redirects_when_not_logged_in(self):", "        redirect_url = reverse_with_next('log_in', self.url)", "        response = self.client.get(self.url)", "        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "    def test_get_log_winners_toggle_for_match(self):", "        self.client.login(email=self.user, password='Password123')", "        winners_before = self.tournament.winners_list.count()", "        self.match.log_winner_toggle(self.user, self.other_user1, self.club, self.tournament)", "        response = self.client.get(self.url, follow=True)", "        winners_after = self.tournament.winners_list.count()", "        self.assertEqual(winners_before+1, winners_after)", "        response_url = reverse('generate_next_matches', kwargs={'club_id': self.club.id, 'tournament_id': self.tournament.id})", "        self.assertRedirects(response, response_url, status_code=302, target_status_code=200)", "        self.assertTemplateUsed(response, 'generate_matches.html')", "", "    def test_get_log_winners_toggle_for_non_participants_of_match(self):", "        self.client.login(email=self.user.email, password='Password123')", "        winners_before = self.tournament.winners_list.count()", "        self.match.log_winner_toggle(self.user, self.other_user3, self.club, self.tournament)", "        winners_after = self.tournament.winners_list.count()", "        url = reverse('log_winners', kwargs={'tournament_id': self.tournament.id, 'club_id':self.club.id, 'user_id':self.user.id, 'match_id':self.match.matchId})", "        response = self.client.get(url, follow=True)", "        winners_after = self.tournament.winners_list.count()", "        self.assertEqual(winners_before, winners_after)", "        response_url = reverse('generate_next_matches', kwargs={'club_id': self.club.id, 'tournament_id': self.tournament.id})", "        self.assertRedirects(response, response_url, status_code=302, target_status_code=200)", "        self.assertTemplateUsed(response, 'generate_matches.html')", "", "    def test_get_log_winner_with_invalid_id(self):", "        self.client.login(email=self.user.email, password='Password123')", "        url = reverse('log_winners', kwargs={'tournament_id': self.tournament.id, 'club_id':self.club.id, 'user_id':self.user.id, 'match_id':self.match.matchId})", "        response = self.client.get(url, follow=True)", "        response_url = reverse('generate_next_matches', kwargs={'club_id': self.club.id, 'tournament_id': self.tournament.id})", "        self.assertRedirects(response, response_url, status_code=302, target_status_code=200)", "        self.assertTemplateUsed(response, 'generate_matches.html')"], "clubs/tests/views/test_member_list_for_members_view.py": ["\"\"\"Tests of the Member List For Members view.\"\"\"", "    \"\"\"Tests of the Member List For Members view.\"\"\""], "clubs/tests/views/test_member_list_for_staff_view.py": ["\"\"\"Tests of the Member List For Staff view.\"\"\"", "    \"\"\"Tests of the Member List For Staff view.\"\"\""], "clubs/tests/views/test_next_match_view.py": ["\"\"\"Tests of the next match view.\"\"\"", "from django.test import TestCase", "from django.urls import reverse", "from clubs.models import User, Club, Tournament, Match", "from clubs.tests.helpers import reverse_with_next", "", "class NextMatchViewTestCase(TestCase):", "    \"\"\"Tests of the Next Match view.\"\"\"", "", "    fixtures = ['clubs/tests/fixtures/default_user.json',", "                 'clubs/tests/fixtures/other_users.json',", "                 'clubs/tests/fixtures/default_tournament.json',", "                 'clubs/tests/fixtures/other_tournaments.json',", "                 'clubs/tests/fixtures/default_club.json',", "                 'clubs/tests/fixtures/other_clubs.json',", "                 'clubs/tests/fixtures/default_match.json',", "                  'clubs/tests/fixtures/other_matches.json'", "                ]", "", "    def setUp(self):", "        super(TestCase, self).setUp()", "        self.user = User.objects.get(email='johndoe@example.org')", "        self.other_user1 = User.objects.get(email='janedoe@example.org')", "        self.club = Club.objects.get(club_name = \"Chess Club 1\")", "        self.tournament = Tournament.objects.get(tournament_name=\"Tournament 1\")", "        self.club.tournaments.add(self.tournament)", "        self.club.tournament_list.add(self.tournament)", "        self.club.officers.add(self.user)", "        self.club.members.add(self.other_user1)", "        self.tournament.organisers.add(self.user)", "        self.tournament.participants_list.add(self.other_user1)", "        self.match = Match.objects.get(matchId=1)", "        self.url = reverse('next_match', kwargs={'tournament_id': self.tournament.id, 'club_id':self.club.id})", "", "    def test_next_match_url(self):", "        self.assertEqual(f'/club/{self.club.id}/next_match/{self.tournament.id}',self.url)", "", "    def test_get_next_match_redirects_when_not_logged_in(self):", "        redirect_url = reverse_with_next('log_in', self.url)", "        response = self.client.get(self.url)", "        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "    def test_get_next_match_redirects_when_not_an_organiser(self):", "        user = User.objects.get(email='petrapickles@example.org')", "        self.client.login(email=user.email, password='Password123')", "        redirect_url = reverse('show_club', kwargs={'club_id': self.club.id})", "        response = self.client.get(self.url, follow=True)", "        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "", "    def test_get_next_match(self):", "        self.client.login(email=self.user.email, password='Password123')", "        # self.client.login(email=self.other_user1.email, password='Password123')", "        response = self.client.get(self.url)", "        redirect_url = reverse('generate_next_matches', kwargs={'club_id': self.club.id, 'tournament_id': self.tournament.id})", "        response = self.client.get(self.url, follow=True)", "        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "        self.assertTemplateUsed(response, 'generate_matches.html')"], "clubs/tests/views/test_officer_list_view.py": ["\"\"\"Tests of the Officer List view.\"\"\"", "    \"\"\"Tests of the Officer List view.\"\"\""], "clubs/tests/views/test_password_view.py": ["    def test_password_change_unsuccesful_without_correct_old_password(self):", "        self.client.login(email=self.user.email, password='Password123')", "        self.form_input['old_password'] = 'WrongPassword123'", "        response = self.client.post(self.url, self.form_input, follow=True)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'password.html')", "        form = response.context['form']", "        self.assertTrue(isinstance(form, PasswordForm))", "        self.user.refresh_from_db()", "        is_password_correct = check_password('Password123', self.user.password)", "        self.assertTrue(is_password_correct)", "", "    def test_post_profile_redirects_when_not_logged_in(self):", "        redirect_url = reverse_with_next('log_in', self.url)", "        response = self.client.post(self.url, self.form_input)", "        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "        is_password_correct = check_password('Password123', self.user.password)", "        self.assertTrue(is_password_correct)", ""], "clubs/tests/views/test_promote_toggle_view.py": ["\"\"\"Tests of the Promote Toggle view.\"\"\"", "    \"\"\"Tests of the Promote Toggle view.\"\"\"", ""], "clubs/tests/views/test_show_clubs_view.py": ["\"\"\"Test aspects of the view that lists all clubs and acts as a home page\"\"\""], "clubs/tests/views/test_sign_up_toggle_view.py": ["\"\"\"Test for the Sign Up Toggle View - sign up to clubs\"\"\"", "    \"\"\"Test for the Sign Up Toggle View - sign up to clubs\"\"\""], "clubs/tests/views/test_transfer_toggle_view.py": ["\"\"\"Test for the Transfer Toggle View - transfer ownership to new club owner\"\"\"", "    \"\"\"Test for the Transfer Toggle View - transfer ownership to new club owner\"\"\""], "clubs/tests/views/test_withdraw_toggle_view.py": ["\"\"\"Test for the Withdraw Toggle View - transfer ownership to new club owner\"\"\"", "    \"\"\"Test for the Withdraw Toggle View - transfer ownership to new club owner\"\"\""], "clubs/views.py": ["# from django.contrib import messages", "# from django.shortcuts import render, redirect", "# from .forms import SignUpForm, LogInForm, UserForm, PasswordForm, ClubForm, TournamentForm", "# from django.core.exceptions import ObjectDoesNotExist", "# from django.contrib.auth import authenticate, login, logout", "# from django.contrib.auth.decorators import login_required", "# from django.contrib.auth.models import Group", "# from .models import User, Club, Tournament, Match", "# from .helpers import login_prohibited, member_only, staff_only, owner_only, organiser_only", "# from django.http import HttpResponseForbidden", "# from django.utils import timezone", "# import random", "# from django.contrib.auth.hashers import check_password", "#", "# def home(request):", "#     return render(request, 'home.html')", "#", "#", "# @login_required", "# def user_profile(request):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     return render(request, 'user_profile.html',", "#                     {'current_user': current_user,", "#                      'clubs': clubs,", "#                     }", "#                  )", "#", "# @login_prohibited", "# def sign_up(request):", "#     if request.method == 'POST':", "#         form = SignUpForm(request.POST)", "#         if form.is_valid():", "#             user = form.save()", "#             applicants, created = Group.objects.get_or_create(name = 'applicants')", "#             applicants.user_set.add(user)", "#             login(request, user)", "#             return redirect('user_profile')", "#     else:", "#         form = SignUpForm()", "#     return render(request, 'sign_up.html', {'form': form})", "#", "# @login_required", "# @member_only", "# def member_list_for_members(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     members = current_club.members.all()", "#     return render(request, 'member_list_for_members.html',", "#                     {'members': members,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club", "#                     }", "#                  )", "#", "# @login_required", "# @staff_only", "# def member_list_for_staff(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     members = current_club.members.all()", "#     return render(request, 'member_list_for_staff.html',", "#                     {'members': members,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club", "#                     }", "#                  )", "#", "# @login_required", "# @staff_only", "# def applicant_list(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     applicants = current_club.applicants.all()", "#     return render(request, 'applicant_list.html',", "#                     {'applicants': applicants,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club", "#                     }", "#                  )", "#", "# @login_required", "# # @owner_only", "# def officer_list(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     officers = current_club.officers.all()", "#     return render(request, 'officer_list.html',", "#                     {'officers': officers,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club", "#                     }", "#                  )", "#", "# @login_required", "# def show_user(request, user_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     try:", "#         user = User.objects.get(id=user_id)", "#     except ObjectDoesNotExist:", "#         return redirect('user_profile')", "#     else:", "#         return render(request, 'show_user.html',", "#             {'user': user,", "#              'current_user': current_user,", "#              'clubs': clubs,", "#             }", "#         )", "#", "# @login_prohibited", "# def log_in(request):", "#     if request.method == 'POST':", "#         form = LogInForm(request.POST)", "#         if form.is_valid():", "#             email = form.cleaned_data.get('email')", "#             password = form.cleaned_data.get('password')", "#             user = authenticate(email=email, password=password)", "#             if user is not None:", "#                 login(request, user)", "#                 return redirect('user_profile')", "#         messages.add_message(request, messages.ERROR, \"The credentials provided were invalid!\")", "#     form = LogInForm()", "#     return render(request, 'log_in.html', {'form': form})", "#", "# def log_out(request):", "#     logout(request)", "#     return redirect('home')", "#", "# @login_required", "# def profile(request):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     if request.method == 'POST':", "#         form = UserForm(instance=current_user, data=request.POST)", "#         if form.is_valid():", "#             messages.add_message(request, messages.SUCCESS, \"Profile updated!\")", "#             form.save()", "#             return redirect('user_profile')", "#     else:", "#         form = UserForm(instance=current_user)", "#     return render(request, 'profile.html',", "#                     {'form': form,", "#                      'current_user': current_user,", "#                      'clubs': clubs}", "#                  )", "#", "# @login_required", "# def password(request):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     if request.method == 'POST':", "#         form = PasswordForm(data=request.POST)", "#         if form.is_valid():", "#             password = form.cleaned_data.get('password')", "#             if check_password(password, current_user.password):", "#                 new_password = form.cleaned_data.get('new_password')", "#                 current_user.set_password(new_password)", "#                 current_user.save()", "#                 login(request, current_user)", "#                 messages.add_message(request, messages.SUCCESS, \"Password updated!\")", "#                 return redirect('user_profile')", "#     form = PasswordForm()", "#     return render(request, 'password.html',", "#                     {'form': form,", "#                      'current_user': current_user,", "#                      'clubs': clubs}", "#                  )", "#", "#", "# @login_required", "# @staff_only", "# def approve_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_approve(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('applicant_list', club_id)", "#     else:", "#         return redirect('applicant_list', club_id)", "#", "#", "# @login_required", "# @staff_only", "# def cancel_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_cancel(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('member_list_for_staff', club_id)", "#     else:", "#         return redirect('member_list_for_staff', club_id)", "#", "# @login_required", "# @owner_only", "# def promote_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_promote(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('member_list_for_staff', club_id)", "#     else:", "#         return redirect('member_list_for_staff', club_id)", "#", "# @login_required", "# @owner_only", "# def demote_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_demote(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('officer_list', club_id)", "#     else:", "#         return redirect('officer_list', club_id)", "#", "# @login_required", "# @owner_only", "# def transfer_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_transfer(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('officer_list', club_id)", "#     else:", "#         return redirect('officer_list', club_id)", "#", "#", "# @login_required", "# def create_club(request, user_id):", "#     if request.method == 'POST':", "#         if request.user.is_authenticated:", "#             current_user = request.user", "#             form = ClubForm(request.POST)", "#             if form.is_valid():", "#                 club_name = form.cleaned_data.get('club_name')", "#                 location = form.cleaned_data.get('location')", "#                 description = form.cleaned_data.get('description')", "#                 club = Club.objects.create(club_owner = current_user, club_name = club_name, location = location, description = description)", "#                 club.club_owner.clubs.add(club)", "#                 # club.officers.add(user)", "#                 return redirect('user_profile')", "#             else:", "#                 return render(request, 'create_club.html', {'form': form, 'current_user': current_user})", "#         else:", "#             return redirect('log_in')", "#     else:", "#         # return HttpResponseForbidden()", "#         form = ClubForm()", "#         current_user = request.user", "#     return render(request, 'create_club.html', {'form': form, 'current_user': current_user})", "#", "# @login_required", "# @staff_only", "# def create_tournament(request, club_id):", "#     clubs = Club.objects.all()", "#     current_club = Club.objects.get(id=club_id)", "#     if request.method == 'POST':", "#         if request.user.is_authenticated:", "#             current_user = request.user", "#", "#             form = TournamentForm(request.POST)", "#             if form.is_valid():", "#                 tournament_name = form.cleaned_data.get('tournament_name')", "#                 short_description = form.cleaned_data.get('short_description')", "#                 number_of_participants = form.cleaned_data.get('number_of_participants')", "#                 deadline = form.cleaned_data.get('deadline')", "#                 start_time = form.cleaned_data.get('start_time')", "#                 tournament = Tournament.objects.create(tournament_name = tournament_name,", "#                                                         short_description = short_description,", "#                                                         number_of_participants = number_of_participants,", "#                                                         club = current_club,", "#                                                         deadline = deadline,", "#                                                         start_time = start_time)", "#                 tournament.organisers.add(current_user)", "#                 current_club.tournaments.add(tournament)", "#                 current_club.tournament_list.add(tournament)", "#                 return redirect('tournament_list', club_id)", "#             else:", "#                 return render(request, 'create_tournament.html',", "#                                 {'form': form,", "#                                  'current_user': current_user,", "#                                  'current_club': current_club,", "#                                  'clubs': clubs", "#                                 }", "#                             )", "#         else:", "#             return redirect('log_in')", "#     else:", "#         form = TournamentForm()", "#         current_user = request.user", "#     return render(request, 'create_tournament.html',", "#                     {'form': form,", "#                      'current_user': current_user,", "#                      'current_club': current_club,", "#                      'clubs': clubs", "#                     }", "#                 )", "#", "# @login_required", "# def show_club(request, club_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     now = timezone.now", "#     try:", "#         current_club = Club.objects.get(id=club_id)", "#         tournaments = current_club.tournaments.all()", "#     except ObjectDoesNotExist:", "#         return redirect('user_profile')", "#     else:", "#         return render(request, 'show_club.html',", "#             {'current_club': current_club,", "#              'current_user': current_user,", "#              'clubs': clubs,", "#              'tournaments': tournaments,", "#              'now': now", "#             }", "#         )", "#", "# @login_required", "# def apply_membership(request, club_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     try:", "#         current_club = Club.objects.get(id=club_id)", "#         current_club.applicants.add(current_user)", "#         current_user.clubs.add(current_club)", "#     except ObjectDoesNotExist:", "#         return redirect('user_profile')", "#     else:", "#         return render(request, 'show_club.html',", "#             {'current_club': current_club,", "#              'current_user': current_user,", "#              'clubs': clubs", "#             }", "#         )", "#", "# @login_required", "# def edit_tournament_info(request, club_id, tournament_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     current_club = Club.objects.get(id=club_id)", "#     current_tournament = Tournament.objects.get(id=tournament_id)", "#     if request.method == 'POST':", "#         form = TournamentForm(data = request.POST, instance=current_tournament)", "#         if form.is_valid():", "#             messages.add_message(request, messages.SUCCESS, \"Successfully updated!\")", "#             form.save()", "#             return redirect('tournament_list', club_id)", "#     else:", "#         form = TournamentForm(instance = current_tournament)", "#     return render(request, 'edit_tournament_info.html',", "#                     {'form': form,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club,", "#                      'current_tournament': current_tournament", "#                     }", "#                  )", "#", "#", "#", "#", "# @login_required", "# @staff_only", "# @organiser_only", "# def co_organise(request, club_id, tournament_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     current_club = Club.objects.get(id=club_id)", "#     officers = current_club.officers.all()", "#     current_tournament = Tournament.objects.get(id=tournament_id)", "#     organisers = current_tournament.organisers.all()", "#     return render(request, 'co_organiser_list.html',", "#                     {'officers': officers,", "#                      'organisers': organisers,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club,", "#                      'tournament': current_tournament", "#                     }", "#                  )", "#", "# @login_required", "# @staff_only", "# @organiser_only", "# def co_organise_toggle(request, club_id, tournament_id, user_id):", "#     try:", "#         current_user = request.user", "#         user =  User.objects.get(id=user_id)", "#         current_club = Club.objects.get(id=club_id)", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#         current_tournament.organisers.add(user)", "#     except ObjectDoesNotExist:", "#         return redirect('co_organise', club_id, tournament_id)", "#     else:", "#         return redirect('co_organise', club_id, tournament_id)", "#", "#", "# @login_required", "# def tournament_list(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     tournaments = current_club.tournaments.all()", "#", "# #THIS IS MORE MATCHES - FARIHA WAS TESTING WITH IT --- KEEP FOR NOW PLEASE!!!", "#     # tournament_list = current_club.tournament_list.all()", "#     # for t in tournament_list:", "#     #     t.all_winners_list.clear()", "#     #     t.winners_list.clear()", "#     #     t.tournament_winner = None", "#     #     print(t.tournament_winner)", "#     #     t.matches_list.clear()", "#     #     t.all_matches_list.clear()", "#     #     if t.tournament_winner:", "#     #         t.tournament_winner = None", "#     #         t.save()", "#     #     t.save()", "#", "#", "#     now = timezone.now", "#     return render(request, 'tournament_list.html',", "#                     {'tournaments': tournaments,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club,", "#                      'now': now,", "#                     }", "#                  )", "#", "# @login_required", "# @member_only", "# def tournament_joined(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     tournament_joined = current_user.tournaments.all()", "#     now = timezone.now", "#     return render(request, 'tournament_joined.html',", "#                     {'tournament_joined': tournament_joined,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club,", "#                      'now': now,", "#                     }", "#                  )", "#", "# @login_required", "# @member_only", "# def show_tournament(request, tournament_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     try:", "#         tournament = Tournament.objects.get(id=tournament_id)", "#     except ObjectDoesNotExist:", "#         return redirect('user_profile')", "#     else:", "#         return render(request, 'show_tournament.html',", "#             {'tournament': tournament,", "#              'current_user': current_user,", "#              'clubs': clubs,", "#             }", "#         )", "# #", "# @login_required", "# @member_only", "# def sign_up_toggle(request, tournament_id, club_id):", "#     current_user = request.user", "#     try:", "#         tournament = Tournament.objects.get(id=tournament_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_sign_up(tournament, club)", "#     except ObjectDoesNotExist:", "#         return redirect('tournament_list', club_id)", "#     else:", "#         return redirect('tournament_list', club_id)", "#", "#", "# @login_required", "# @member_only", "# def withdraw_toggle(request, tournament_id, club_id):", "#     current_user = request.user", "#     try:", "#         tournament = Tournament.objects.get(id=tournament_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_withdraw(tournament, club)", "#     except ObjectDoesNotExist:", "#         return redirect('tournament_joined', club_id)", "#     else:", "#         return redirect('tournament_joined', club_id)", "#", "#", "#", "#", "#", "#", "#", "# @login_required", "# @organiser_only", "# def generate_matches(request, tournament_id, club_id):", "#     try:", "#         clubs = Club.objects.all()", "#         current_user = request.user", "#         current_club = Club.objects.get(id=club_id)", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#", "# # THIS IS MORE MATCHES - FARIHA WAS TESTING WITH IT --- KEEP FOR NOW PLEASE!!!", "# #         Match.objects.all().delete()", "#         # current_tournament.matches_list.clear()", "#         # current_tournament.winners_list.clear()", "#         # tournament = Tournament.objects.all()", "# #         --^^^ USE THIS AFTER CLICKING 'GENERATE_MATCHES', THEN COMMENT OUT AGAIN", "# #         USE IT TO CLEAR THE WINNERS FOR A TOURNAMENT - FOR DEV PURPOSES", "#         current_tournament.tournament_winner= None", "#         current_tournament.current_participants.clear()", "#         current_tournament.removed_participants.clear()", "#", "#         all_participants_list = current_tournament.participants_list.all()", "#         participants_list_count = len(all_participants_list)", "#         previous_power_of_two = current_tournament.power_Of_Two(participants_list_count)", "#         current_tournament.make_Participants_Power_Of_2(previous_power_of_two)", "#         #Change current participants list to include the highest power of 2 number of particpants", "#         # - if number of particpants is not a power of 2", "#         participants_list = current_tournament.current_participants.all()", "#         matches_list = current_tournament.matches_list.all()", "#         winners_list = current_tournament.winners_list.all()", "#         now = timezone.now()", "#         if all_participants_list.count() <= 1 and current_tournament.start_time >now:", "#             messages.add_message(request, messages.ERROR, \"Not enough participants!\")", "#         else:", "#             if matches_list.count() == 0:    #I.E. NO MATCHES HAVE BEEN MADE FOR THIS ROUND YET!", "#                 round_input = 1  #first round", "#                 current_tournament.create_matches(round_input, participants_list)", "#                 matches_list = current_tournament.matches_list.all()", "#                 winners_list = current_tournament.winners_list.all()", "#", "#                 return render(request, 'generate_matches.html',", "#                                 {'current_user': current_user,", "#                                  'clubs': clubs,", "#                                  'current_club': current_club,", "#                                  'current_tournament': current_tournament,", "#                                  'matches_list': matches_list,", "#                                  'all_participants_list': all_participants_list,", "#                                  'winners_list': winners_list,", "#                                  'now':now", "#                                 }", "#                              )", "#             else:", "#                 return render(request, 'generate_matches.html',   #redisplay html template with selected winners + unselected winners", "#                                 {'current_user': current_user,", "#                                  'clubs': clubs,", "#                                  'current_club': current_club,", "#                                  'current_tournament': current_tournament,", "#                                  'matches_list': matches_list,", "#                                  'all_participants_list': all_participants_list,", "#                                  'winners_list': winners_list,", "#                                  'now':now", "#                                 }", "#                              )", "#     except ObjectDoesNotExist:", "#         return redirect('tournament_list', club_id)", "#     else:", "#         return redirect('tournament_list', club_id)", "#", "#", "#", "#", "# @login_required", "# @organiser_only", "# def log_winners(request, tournament_id, club_id, user_id, match_id):", "#     try:", "#         current_user = request.user", "#         winner_user =  User.objects.get(id=user_id)", "#         current_club = Club.objects.get(id=club_id)", "#         current_match = Match.objects.get(matchId = match_id)", "#", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#", "#         if winner_user not in current_tournament.organisers.all():", "#             if winner_user == current_match.player1 or winner_user == current_match.player2:", "#                 current_tournament.winners_list.add(winner_user)", "#                 current_tournament.all_winners_list.add(winner_user)", "#", "#             # current_match = Match.objects.get(matchId = match_id)", "#                 current_match.winner = winner_user", "#", "#         if current_tournament.winners_list.count() == 1 and current_tournament.matches_list.count() ==1:", "#             current_tournament.tournament_winner = winner_user", "#             current_tournament.save()", "#", "#     except ObjectDoesNotExist:", "#         return redirect('generate_matches', club_id, tournament_id)", "#     else:", "#         if current_match.round == 1:", "#             return redirect('generate_matches', club_id, tournament_id)", "#         else:", "#             return redirect('generate_next_matches', club_id, tournament_id)", "#", "#", "#", "#", "#", "# @login_required", "# @organiser_only", "# def next_match(request, tournament_id, club_id):", "#     try:", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#         current_winners = current_tournament.winners_list.all()", "#", "#         if current_winners.count() != 1 :", "#             current_tournament.current_participants.clear()", "#", "#             for winner in current_winners:", "#                 current_tournament.current_participants.add(winner)   #Move all winners from last round into current_participants_list", "#", "#             current_tournament.winners_list.clear()    #clear winners for this round.", "#", "#     except ObjectDoesNotExist:", "#         return redirect('generate_next_matches',  club_id, tournament_id)", "#     else:", "#         return redirect('generate_next_matches',  club_id, tournament_id)", "#", "#", "#", "#", "#", "# @login_required", "# @organiser_only", "# def generate_next_matches(request, tournament_id, club_id):", "#     try:", "#         clubs = Club.objects.all()", "#         current_user = request.user", "#         current_club = Club.objects.get(id=club_id)", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#", "#         all_participants_list = current_tournament.participants_list.all()", "#         participants_list = current_tournament.current_participants.all()", "#", "#", "#         round_input = 2  #All other rounds have 'round =2' except first round has round 2", "#         current_tournament.create_matches(round_input, participants_list)", "#         matches_list = current_tournament.matches_list.all()", "#         now = timezone.now()", "#", "#         winners_list = current_tournament.winners_list.all()", "#", "#         return render(request, 'generate_matches.html',", "#                         {'current_user': current_user,", "#                          'clubs': clubs,", "#                          'current_club': current_club,", "#                          'current_tournament': current_tournament,", "#                          'matches_list': matches_list,", "#                          'winners_list': winners_list,", "#                          'all_participants_list': all_participants_list,", "#                          'now':now", "#                         }", "#                      )", "#", "#     except ObjectDoesNotExist:", "#         return redirect('tournament_list', club_id)", "#     else:", "#         return redirect('tournament_list', club_id)"], "clubs/views/match_views.py": ["@organiser_only", "        clubs = Club.objects.all()", "", "# THIS IS MORE MATCHES - FARIHA WAS TESTING WITH IT --- KEEP FOR NOW PLEASE!!!", "#         Match.objects.all().delete()", "        # current_tournament.matches_list.clear()", "        # current_tournament.winners_list.clear()", "        # tournament = Tournament.objects.all()", "#         --^^^ USE THIS AFTER CLICKING 'GENERATE_MATCHES', THEN COMMENT OUT AGAIN", "#         USE IT TO CLEAR THE WINNERS FOR A TOURNAMENT - FOR DEV PURPOSES", "        current_tournament.tournament_winner= None", "        participants_list_count = len(all_participants_list)", "        previous_power_of_two = current_tournament.power_Of_Two(participants_list_count)", "        current_tournament.make_Participants_Power_Of_2(previous_power_of_two)", "        #Change current participants list to include the highest power of 2 number of particpants", "        # - if number of particpants is not a power of 2", "        now = timezone.now()", "        if all_participants_list.count() <= 1 and current_tournament.start_time >now:", "                                 'clubs': clubs,", "                                 'now':now", "                                 'clubs': clubs,", "                                 'now':now", "# def power_Of_Two(x):    #x= len(participants_list)", "#     \"\"\"Calculate if the number of participants in a tournament is a power of 2,", "#     if not, if it is not, calculate the previous power of two. \"\"\"", "#", "#     if(x & (x-1) != 0):  #Not a power of 2", "#         while (x & x-1):", "#             x = x & x-1    #Finds previous power of 2", "#         print(\"not power of 2, next power of 2 is:\")", "#         print(x)", "#         return x", "", "# def make_Participants_Power_Of_2(current_tournament, previous_power_of_two):", "#     participants_list = current_tournament.participants_list.all()", "#     if previous_power_of_two:", "#         print(participants_list)", "#", "#         print(previous_power_of_two)", "#", "#", "#         new_participants = participants_list[:previous_power_of_two]", "#         for new_p in new_participants:", "#             current_tournament.current_participants.add(new_p)", "#", "#         print(\"new current p:\")", "#         print(current_tournament.current_participants.all())", "#", "#         remaining = (participants_list.count() - previous_power_of_two) +1   #THE OTHER HALF OF THE LIST: WHO WONT PLAY!", "#", "#         removed_participants = participants_list[(remaining):]", "#         for new_p in removed_participants:", "#             current_tournament.removed_participants.add(new_p)", "#", "#         # print(remaining)", "#         # print(participants_list[(remaining):])", "#         print(\"removed p:\")", "#         # current_tournament.removed_participants.add(participants_list[(remaining):].all())", "#         print(current_tournament.removed_participants.all())", "#", "#     else:", "#         print(\"its fine\")", "#         for participants in participants_list:", "#             current_tournament.current_participants.add(participants)", "@organiser_only", "        current_match = Match.objects.get(matchId = match_id)", "        if winner_user not in current_tournament.organisers.all():", "            if winner_user == current_match.player1 or winner_user == current_match.player2:", "                current_tournament.winners_list.add(winner_user)", "                current_tournament.all_winners_list.add(winner_user)", "            # current_match = Match.objects.get(matchId = match_id)", "                current_match.winner = winner_user", "            return redirect('generate_next_matches', club_id, tournament_id)", "", "", "", "@organiser_only", "        return redirect('generate_next_matches',  club_id, tournament_id)", "        return redirect('generate_next_matches',  club_id, tournament_id)", "", "@organiser_only", "def generate_next_matches(request, tournament_id, club_id):", "        clubs = Club.objects.all()", "        round_input = 2  #All other rounds have 'round =2' except first round has round 2", "        now = timezone.now()", "", "                         'clubs': clubs,", "                         'now':now"], "clubs/views/mixins.py": ["", "", "class OrganiserOnlyMixin:", "    \"\"\"Mixin that redirects when a user is not an organiser.\"\"\"", "", "    def dispatch(self, request, club_id, *args, **kwargs):", "        \"\"\"Redirect when not an organiser, or dispatch as normal otherwise.\"\"\"", "        current_club = Club.objects.get(id=club_id)", "        if not current_tournament.organisers.filter(email=request.user.email).exists():", "            return redirect('show_club', club_id)", "        return super().dispatch(request, club_id, *args, **kwargs)"], "clubs/views/user_view.py": ["        self.organisers = self.current_tournament.organisers.all()"], "system/urls.py": ["    path('club/<int:club_id>/generate_next_match/<int:tournament_id>', views.generate_next_matches, name='generate_next_matches'),"]}], "deletionsPerFile": [{"clubs/forms.py": ["        if timezone.now() > start_time:"], "clubs/helpers.py": ["from .models import Club", "# def organiser_only(view_function):", "#     def modified_view_function(request, club_id, tournament_id, **options):", "#         current_club = Club.objects.get(id=club_id)", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#         if current_club.club_owner.email==request.user.email and current_tournament.club == club_id :", "#             return view_function(request, club_id=club_id,tournament_id=tournament_id **options)", "#         else:", "#             return redirect('member_list_for_staff', club_id=club_id, **options)", "#     return modified_view_function"], "clubs/management/commands/seed.py": ["from clubs.models import User, Club", "from random import randint, choice, sample", "    USER_COUNT = 10", "    APPLICANT_COUNT = 20", "    MEMBER_COUNT = 20", "    OFFICER_COUNT = 3", "        self.createRandomUsers()", "        self.createRandomClubs()", "        self.createRequiredUsersAndClub()", "    def createRandomUsers(self):", "                # self._create_user()", "                email = self._email(first_name, last_name)", "                chess_experience_level = self.faker.random_digit()  #0-9", "", "                # return user", "                # members, created = Group.objects.get_or_create(name = 'members')", "                # members.user_set.add(member_instance)", "    def createRandomClubs(self):", "                # club_owner = random.sample(all_users, 1)   #Picks random user to be club owner", "                club_owner = choice(list(User.objects.all()))", "                # created_at = self.faker.datetime()", "                # club.save()", "", "                for i in range(5):", "                        # club.save()", "                        # club.save()", "                        # club.save()", "                # return club", "    def createRequiredUsersAndClub(self):", "        countJeb = User.objects.filter(email = 'jeb@example.org').count()", "        if (countJeb == 0):", "            jeb_instance = User.objects.create_user(", "                'jeb@example.org',", "                first_name='Jebediah',", "                last_name='Kerman',", "                email='jeb@example.org',", "                password=Command.PASSWORD,", "                public_bio='public_bio',", "                chess_experience_level=1,", "                short_personal_statement='short_personal_statement'", "            )", "            # members, created = Group.objects.get_or_create(name = 'members')", "            # members.user_set.add(member_instance)", "            jeb_instance.full_clean()", "            jeb_instance.save()", "", "", "        countVal = User.objects.filter(email = 'val@example.org').count()", "        if (countVal == 0):", "            val_instance = User.objects.create_user(", "                'val@example.org',", "                first_name='Valentina',", "                last_name='Kerman',", "                email='val@example.org',", "                password=Command.PASSWORD,", "                public_bio='public_bio',", "                chess_experience_level=1,", "                short_personal_statement='short_personal_statement'", "            )", "            # officer_instance.is_staff = True", "            val_instance.full_clean()", "            val_instance.save()", "", "                chess_experience_level=1,", "", "            # owner_instance.is_staff = True", "            # owner_instance.is_superuser = True", "", "", ""], "clubs/management/commands/unseed.py": ["from clubs.models import User, Club"], "clubs/models.py": ["    tournament_name = models.CharField(max_length=15, blank=False, unique=True)", "    deadline = models.DateTimeField(default=(timezone.now() + timedelta(days=1)), validators=[MinValueValidator(timezone.now)])", "        # if self.matches_list.count() != self.participants_list.count()/2:", "            # participant_list = list(self.participants_list.all())", "            # create_pairs(list(current_tournament.participants_list.all()))", "", "                # print (str(i), \"and\", str(j))", "                        # date = self.start_time,", "                        date = timezone.now(),", "    winner = models.ForeignKey(User, on_delete=models.CASCADE, null=True, related_name='+')"], "clubs/templates/base.html": ["    <link href= \"{% static 'chicken_font.css'%}\" rel=\"stylesheet\">"], "clubs/templates/generate_matches.html": ["        <h5>Round One:</h5>", "", "", "", "<!--       {% if second_matches_list%}", "        <h5>Round Two:</h5>", "          {% include 'partials/make_matches.html' with current_tournament=current_tournament current_club=current_club matches_list=second_matches_list match_time=second_match_time%}", "       {% endif %}", "       {% if third_matches_list%}", "        <h5>Round Tree:</h5>", "          {% include 'partials/make_matches.html' with current_tournament=current_tournament current_club=current_club matches_list=third_matches_list match_time=third_match_time%}", "       {% endif %}", "       {% if fourth_matches_list%}", "        <h5>Round Four:</h5>", "          {% include 'partials/make_matches.html' with current_tournament=current_tournament current_club=current_club matches_list=fourth_matches_list match_time=fourth_match_time%}", "       {% endif %} -->"], "clubs/templates/partials/make_matches.html": ["            <th> Round </th>", "                <td>Round {{matches.round}}</td>", "                      <button class=\"btn btn-primary\">Select Winner is Player 1</button>", "            <button type=\"button\"disable=\"disable\">Generate matches for next round</button>", "            <button type=\"button\"disable=\"disable\">Generate matches for next round</button>"], "clubs/templates/partials/navbar.html": ["    <a class=\"navbar-brand\" href=\"{% url 'user_profile' %}\">", "      Chess", "    </a>"], "clubs/templates/tournament_list.html": ["              {% if now > tournament.start_time and tournament.participants_list.count <= 1%}", "                <b>Tournament did not occur.</b>", "                  <form action=\"{% url 'sign_up_toggle' club_id=current_club.id tournament_id=tournament.id %}\" method=\"get\">", "                    <button class=\"btn btn-primary\">SIGN UP</button>", "                  </form>", "                {% if tournament.start_time < now%}", "                {% if now > tournament.deadline %}", "                  <form action=\"{% url 'generate_matches' club_id=current_club.id tournament_id=tournament.id%}\" method=\"get\">", "                    <button class=\"btn btn-primary\">Generate Matches</button>", "                  </form>", "      <form action=\"{% url 'create_tournament' club_id=current_club.id %}\" method=\"get\">", "        <button class=\"btn btn-primary\">Create tournament</button>", "      </form>"], "clubs/templates/winners_list.html": ["        <!-- {% for member in members %} -->", "        <!-- {% endfor %} -->"], "clubs/tests/fixtures/default_match.json": ["      \"round\" : 1"], "clubs/tests/fixtures/default_tournament.json": ["      \"start_time\" : \"2023-12-04T03:23:15+00:00\""], "clubs/tests/fixtures/other_tournaments.json": ["        \"start_time\" : \"2023-12-04T03:23:15+00:00\"", "        \"start_time\" : \"2023-12-04T03:23:15+00:00\""], "clubs/tests/forms/test_club_form.py": ["        self.user = User.objects.create_user(", "            '@jonedoe@example.org',", "            first_name='John',", "            last_name='Doe',", "            email='johndoe@example.org',", "            password='Password123',", "            public_bio = 'My bio',", "            chess_experience_level= '1',", "            short_personal_statement = 'I love chess.',", "            password='Password123',", "        )", "        input = {'location': 'x'*200 }", "        form = ClubForm(data=input)", "    def test_invalid_club_form(self):", "        input = {'location': 'x'*600 }", "        form = ClubForm(data=input)"], "clubs/tests/forms/test_log_in_form.py": ["from . import fixtures", "        self.assertEqual(user, None)"], "clubs/tests/forms/test_password_form.py": ["        self.user = User.objects.get(username='@johndoe')", "            'password': 'Password123',", "        self.assertIn('password', form.fields)", "    ", "        self.form_input['password'] = 'WrongPassword123'", "        self.assertTrue(check_password('NewPassword123', self.user.password))"], "clubs/tests/forms/test_sign_up_form.py": ["from django import forms", "        'chess_experience_level': '1',", "        chess_experience_level_field = form.fields['chess_experience_level']", "        self.assertTrue(isinstance(chess_experience_level_field, forms.IntegerField))"], "clubs/tests/forms/test_user_form.py": ["\"\"\"Unit tests of the user form.\"\"\"", "    \"\"\"Unit tests of the user form.\"\"\""], "clubs/tests/models/test_match_model.py": ["# from django.core.exceptions import ValidationError", "# from django.test import TestCase", "# from clubs.models import Tournament, Match, Club, User", "#", "# class MatchModelTest(TestCase):", "#", "#     fixtures = ['clubs/tests/fixtures/default_user.json',", "#                  'clubs/tests/fixtures/other_users.json',", "#                  'clubs/tests/fixtures/default_tournament.json',", "#                  'clubs/tests/fixtures/other_tournaments.json',", "#                  'clubs/tests/fixtures/default_club.json',", "#                  'clubs/tests/fixtures/other_clubs.json',", "#                 'clubs/tests/fixtures/default_match.json'", "#                 ]", "#", "#", "#     def setUp(self):", "#         super(TestCase, self).setUp()", "#         self.user = User.objects.get(username='johndoe@example.org')", "#         self.tournament = Tournament.objects.get(tournament_name=\"Tournament 1\")", "#         self.other_tournament = Tournament.objects.get(tournament_name=\"Tournament 2\")", "#         self.match = Match.objects.get(matchId=1)", "#", "#", "#     def test_valid_message(self):", "#         self._assert_match_is_valid()", "#", "#", "#", "# # Match ID tests:", "#     # def test_match_id_must_not_be_blank(self):", "#     #     self.match.matchId = None", "#     #     self._assert_match_is_invalid()", "#", "#", "# #Player tests:", "#     def test_player1_must_not_be_blank(self):", "#         self.match.player1 = None", "#         self._assert_match_is_invalid()", "#", "#     def test_player2_must_not_be_blank(self):", "#         self.match.player2 = None", "#         self._assert_match_is_invalid()", "#", "#", "# #tournament tests:", "#     def test_tournament_must_not_be_blank(self):", "#         self.match.tournament = None", "#         self._assert_match_is_invalid()", "#", "#", "# #club tests:", "#     def test_club_must_not_be_blank(self):", "#         self.match.club = None", "#         self._assert_match_is_invalid()", "#", "#", "# #round test:   -- maybe get rid of ?", "#     def test_round_can_not_be_blank(self):", "#         self.tournament.round = None", "#         self._assert_match_is_valid()", "#", "#", "#", "#     #", "#     # def test_tournament_name_must_be_unique(self):", "#     #     self.tournament.tournament_name = self.other_tournament.tournament_name", "#     #     self._assert_tournament_is_invalid()", "#     #", "#     # def test_tournament_name_must_not_be_over_50_characters(self):", "#     #     self.tournament.tournament_name = 'x' * 51", "#     #     self._assert_tournament_is_invalid()", "#     #", "#     # def test_name_can_be_50_characters(self):", "#     #     self.tournament.tournament_name = 'x' * 50", "#     #     self._assert_tournament_is_valid()", "#", "#", "# # Description Tests:", "#     # def test_short_description_can_not_be_blank(self):", "#     #     self.tournament.short_description = None", "#     #     self._assert_tournament_is_valid()", "#     #", "#     # def test_short_description_must_not_be_over_100_characters(self):", "#     #     self.tournament.short_description = 'x' * 141", "#     #     self._assert_tournament_is_invalid()", "#     #", "#     # def test_short_description_can_be_140_characters(self):", "#     #     self.tournament.short_description = 'x' * 140", "#     #     self._assert_tournament_is_valid()", "#     #", "#     # def test_short_description_need_not_be_unique(self):", "#     #     self.tournament.short_description = self.other_tournament.short_description", "#     #     self._assert_tournament_is_valid()", "#", "# # Number of participants Tests:", "#     # def test_number_of_participants_can_not_be_under_2_participants(self):", "#     #     self.tournament.number_of_participants = 1", "#     #     self._assert_tournament_is_valid()", "#     #", "#     # def test_number_of_participants_can_not_be_over_16_participants(self):", "#     #     self.tournament.number_of_participants = 17", "#     #     self._assert_tournament_is_valid()", "#     #", "#     # def test_number_of_applicants_must_not_be_blank(self):", "#     #     self.tournament.number_of_participants = None", "#     #     self._assert_tournament_is_invalid()", "#", "#", "# # Assert valid and invalid helper methods:", "#     def _assert_match_is_valid(self):", "#         try:", "#             self.match.full_clean()", "#         except (ValidationError):", "#             self.fail(\"Test match should be valid\")", "#", "#     def _assert_match_is_invalid(self):", "#         with self.assertRaises(ValidationError):", "#             self.match.full_clean()"], "clubs/tests/models/test_tournament_model.py": ["    def test_tournament_name_must_not_be_over_15_characters(self):", "        self.tournament.tournament_name = 'x' * 16", "        self.tournament.tournament_name = 'x' * 15", "    def test_number_of_applicants_must_not_be_blank(self):"], "clubs/tests/models/test_user_model.py": ["# Chess experience level tests:", "    # def test_chess_experience_level_default_0(self):", "    #     # self.user.chess_experience_level =", "    #     self._assert_user_is_valid()", "", "        # second_user = self._create_second_user()", "        # second_user = self._create_second_user()"], "clubs/tests/views/test_applicant_list_view.py": ["            # self.assertContains(response, f'Last{user_id}')", "            # EXTENDED THIS TEST FOR SHOW USER FUNCTIONALITY:", "            # user = User.objects.get(email=f'{user_id}@example.org')", "            # user_url = reverse('show_user', kwargs={'user_id': user.id})", "            # self.assertContains(response, user_url)"], "clubs/tests/views/test_co_organiser_list_view.py": ["    # def test_user_list_url(self):", "    #     self.assertEqual(f'/club/{self.club.id}/co_organiser_list/{self.tournament.id}',self.url)", "    #         # path('club/<int:club_id>/co_organiser_list/<int:tournament_id>', views.co_organiser_list, name='co_organiser_list'),", "    #", "    #", "    #", "    # def test_get_co_organiser_list_redirects_when_not_logged_in(self):", "    #      redirect_url = reverse_with_next('log_in', self.url)", "    #      response = self.client.get(self.url)", "    #      self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "    #", "    #", "    # def test_get_co_organiser_list(self):", "    #     self.client.login(email=self.user.email, password='Password123')", "    #     self._create_test_officers(14)", "    #     response = self.client.get(self.url)", "    #     self.assertEqual(response.status_code, 200)", "    #     self.assertTemplateUsed(response, 'co_organiser_list.html')", "    #     self.assertEqual(len(response.context['officers']), 15)", "    #     for user_id in range(15-1):", "    #         self.assertContains(response,f'user{user_id}@test.org')", "    #         # self.assertContains(response, f'Last{user_id}')", "    #         # EXTENDED THIS TEST FOR SHOW USER FUNCTIONALITY:", "    #         # user = User.objects.get(email=f'{user_id}@example.org')", "    #         # user_url = reverse('show_user', kwargs={'user_id': user.id})", "    #         # self.assertContains(response, user_url)", "    #", "    #", "    #", "    # def _create_test_officers(self, user_count=10):", "    #     for user_id in range(user_count):", "    #         user = User.objects.create_user(", "    #             username = f'user{user_id}@test.org',", "    #             first_name=f'First{user_id}',", "    #             last_name=f'Last{user_id}',", "    #             email=f'user{user_id}@test.org',", "    #             password='Password123',", "    #             public_bio= \"My bio\",", "    #             chess_experience_level= 1,", "    #             short_personal_statement= \"I love chess.\" )", "    #         self.club.officers.add(user)", "    #         user.clubs.add(self.club)", "    #         self.tournament.organisers.add(user)"], "clubs/tests/views/test_create_club_view.py": ["    # def test_get_create_club_is_forbidden(self):", "    #     self.client.login(username=self.user.email, password=\"Password123\")", "    #     club_count_before = Club.objects.count()", "    #     response = self.client.get(self.url, follow=True)", "    #     club_count_after = Club.objects.count()", "    #     self.assertEqual(club_count_after, club_count_before)", "    #     self.assertEqual(response.status_code, 403)", "", "", "", "        # response = self.client.get(self.url, self.data, follow=True)", "", "", "", "", "", ""], "clubs/tests/views/test_officer_applicant_list_view.py": ["        print(self.club.officers.all())"], "clubs/tests/views/test_password_view.py": ["    def test_post_profile_redirects_when_not_logged_in(self):", "        redirect_url = reverse_with_next('log_in', self.url)", "        response = self.client.post(self.url, self.form_input)", "        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "        is_password_correct = check_password('Password123', self.user.password)", "        self.assertTrue(is_password_correct)", ""], "clubs/tests/views/test_show_clubs_view.py": ["", "# NEED TO INCLUDE FOR CLUB PROFILE when club selected-----", "", "", "", "        #self._create_test_clubs(14)", "", "        #self.assertEqual(len(response.context['officers']), 14)", "        ##for user_id in range(15-1):", "            # self.assertContains(response, f'Last{user_id}')", "            # EXTENDED THIS TEST FOR SHOW USER FUNCTIONALITY:", "            # user = User.objects.get(email=f'{user_id}@example.org')", "            # user_url = reverse('show_club', kwargs={'club_id': self.club.id})", "            # self.assertContains(response, user_url)"], "clubs/tests/views/test_sign_up_toggle_view.py": ["", ""], "clubs/views/match_views.py": ["        #", "        Match.objects.all().delete()", "        current_tournament.matches_list.clear()", "        current_tournament.winners_list.clear()", "        current_tournament.winner= None", "        #--^^^ USE THIS AFTER CLICKING 'GENERATE_MATCHES', THEN COMMENT OUT AGAIN", "        # USE IT TO CLEAR THE WINNERS FOR A TOURNAMENT - FOR DEV PURPOSES", "", "", "        x = len(all_participants_list)", "        print(x)", "        previous_power_of_two = power_Of_Two(x)", "", "        make_Participants_Power_Of_2(current_tournament, previous_power_of_two)", "", "        # if(len(participants_list) & (len(participants_list)-1) != 0):", "        #", "        #     print(\"not power of 2\")", "", "        now = timezone.now", "        finals=1", "", "        if all_participants_list.count() <= 1:", "", "", "                # now = timezone.now", "                                 # 'clubs': clubs,", "                                 'now':now,", "                                 'finals':finals", "                                 # 'clubs': clubs,", "                                 'now':now,", "                                 'finals':finals", "", "", "def power_Of_Two(x):    #x= len(participants_list)", "    \"\"\"Calculate if the number of participants in a tournament is a power of 2,", "    if not, if it is not, calculate the previous power of two. \"\"\"", "", "    if(x & (x-1) != 0):  #Not a power of 2", "        while (x & x-1):", "            x = x & x-1    #Finds previous power of 2", "        print(\"not power of 2, next power of 2 is:\")", "        print(x)", "        return x", "", "def make_Participants_Power_Of_2(current_tournament, previous_power_of_two):", "    participants_list = current_tournament.participants_list.all()", "    if previous_power_of_two:", "        print(participants_list)", "", "        print(previous_power_of_two)", "", "", "        new_participants = participants_list[:previous_power_of_two]", "        for new_p in new_participants:", "            current_tournament.current_participants.add(new_p)", "        print(\"new current p:\")", "        print(current_tournament.current_participants.all())", "", "        remaining = (participants_list.count() - previous_power_of_two) +1   #THE OTHER HALF OF THE LIST: WHO WONT PLAY!", "", "        removed_participants = participants_list[(remaining):]", "        for new_p in removed_participants:", "            current_tournament.removed_participants.add(new_p)", "", "        # print(remaining)", "        # print(participants_list[(remaining):])", "        print(\"removed p:\")", "        # current_tournament.removed_participants.add(participants_list[(remaining):].all())", "        print(current_tournament.removed_participants.all())", "", "    else:", "        print(\"its fine\")", "        for participants in participants_list:", "            current_tournament.current_participants.add(participants)", "        current_tournament.winners_list.add(winner_user)", "        current_tournament.all_winners_list.add(winner_user)", "        current_match = Match.objects.get(matchId = match_id)", "        current_match.winner = winner_user", "        # current_match.match_winner_list.add(winner_user)", "            # current_tournament.winner = winner_user", "", "", "            return redirect('generate_next_match', club_id, tournament_id)", "            print(current_tournament.current_participants.all())", "        return redirect('generate_next_match',  club_id, tournament_id)", "        return redirect('generate_next_match',  club_id, tournament_id)", "def generate_next_match(request, tournament_id, club_id):", "        finals=1", "", "        round_input = 2  #All other rounds have 'round =2' for now --- maybe remove round field ?", "        now = timezone.now", "                         # 'clubs': clubs,", "                         'now':now,", "                         'finals':finals,"], "clubs/views/user_view.py": ["        organisers = current_tournament.organisers.all()"], "static/chicken_font.css": ["@font-face {", "  font-family: 'chicken';", "  src:  url('fonts/chicken.eot?lgzsjg');", "  src:  url('fonts/chicken.eot?lgzsjg#iefix') format('embedded-opentype'),", "    url('fonts/chicken.ttf?lgzsjg') format('truetype'),", "    url('fonts/chicken.woff?lgzsjg') format('woff'),", "    url('fonts/chicken.svg?lgzsjg#icomoon') format('svg');", "  font-weight: normal;", "  font-style: normal;", "  font-display: block;", "}", "", "[class^=\"icon-\"], [class*=\" icon-\"] {", "  /* use !important to prevent issues with browser extensions that change fonts */", "  font-family: 'chicken' !important;", "  speak: never;", "  font-style: normal;", "  font-weight: normal;", "  font-variant: normal;", "  text-transform: none;", "  line-height: 1;", "", "  /* Better Font Rendering =========== */", "  -webkit-font-smoothing: antialiased;", "  -moz-osx-font-smoothing: grayscale;", "}", "", ".icon-chicken3:before {", "  content: \"\\e901\";", "}", ".icon-chicken2:before {", "  content: \"\\e902\";", "}", ".icon-chicken1:before {", "  content: \"\\e900\";", "}"], "system/urls.py": ["", "", "", "    path('club/<int:club_id>/generate_next_match/<int:tournament_id>', views.generate_next_match, name='generate_next_matches'),"]}]}, {"commitAuthor": "FarihaChoudhury", "commitSha": "953c28f19f4fd90637d2ec8c77262dfa57c7045d", "filesEdited": ["clubs/models.py", "clubs/templates/tournament_list.html"], "additionsPerFile": [{"clubs/models.py": ["    deadline = models.DateTimeField(default=(timezone.now() + timedelta(days=1)))"], "clubs/templates/tournament_list.html": ["                {% if tournament.start_time > now%}"]}], "deletionsPerFile": [{"clubs/models.py": ["    deadline = models.DateTimeField(default=(timezone.now() + timedelta(days=1)), validators=[MinValueValidator(timezone.now)])"], "clubs/templates/tournament_list.html": ["                {% if tournament.start_time < now%}"]}]}, {"commitAuthor": "FarihaChoudhury", "commitSha": "03b465479f2d45d930cb73379bd9f271c0f29040", "filesEdited": ["clubs/forms.py", "clubs/tests/forms/test_tournament_form.py"], "additionsPerFile": [{"clubs/forms.py": ["        if timezone.now() > deadline:"], "clubs/tests/forms/test_tournament_form.py": ["\"\"\"Unit tests of the tournament form.\"\"\"", "from django import forms", "from django.test import TestCase", "from clubs.forms import TournamentForm", "from clubs.models import User, Club, Tournament", "", "class TournamentFormTestCase(TestCase):", "    \"\"\"Unit tests of the tournament form.\"\"\"", "", "    fixtures = ['clubs/tests/fixtures/default_club.json',", "                'clubs/tests/fixtures/default_user.json']", "", "    def setUp(self):", "        self.user = User.objects.get(email='johndoe@example.org')", "        self.form_input = {", "            'tournament_name': 'Tournament 4',", "            'short_description': 'Another chess club tournament',", "            'number_of_participants': 13,", "            'deadline': '2022-12-04T03:23:15+00:00',", "            'start_time': '2023-12-04T03:23:15+00:00',", "        }", "        self.club = Club.objects.get(club_name = \"Chess Club 1\")", "        self.club.officers.add(self.user)", "        self.user.clubs.add(self.club)", "", "", "    def test_valid_tournament_form(self):", "        form = TournamentForm(data=self.form_input)", "        self.assertTrue(form.is_valid())", "", "    def test_form_has_necessary_fields(self):", "        form = TournamentForm()", "        self.assertIn('tournament_name', form.fields)", "        self.assertIn('short_description', form.fields)", "        self.assertIn('number_of_participants', form.fields)", "        self.assertIn('deadline', form.fields)", "        self.assertIn('start_time', form.fields)", "        deadline_field = form.fields['deadline']", "        self.assertTrue(isinstance(deadline_field , forms.DateTimeField))", "        start_time_field = form.fields['start_time']", "        self.assertTrue(isinstance(start_time_field , forms.DateTimeField))", "", "", "    def test_form_tournament_model_validation(self):", "        self.form_input['number_of_participants'] = 'bad_number_of_participants'", "        form = TournamentForm(data=self.form_input)", "        self.assertFalse(form.is_valid())", "", "", "    def test_form_rejects_blank_tournament_name(self):", "        self.form_input['tournament_name'] = ''", "        form = TournamentForm(data=self.form_input)", "        self.assertFalse(form.is_valid())", "", "    def test_form_rejects_blank_number_of_participants(self):", "        self.form_input['number_of_participants'] = ''", "        form = TournamentForm(data=self.form_input)", "        self.assertFalse(form.is_valid())", "", "    def test_form_rejects_no_short_description(self):", "        self.form_input['short_description'] = ''", "        form = TournamentForm(data=self.form_input)", "        self.assertFalse(form.is_valid())"]}], "deletionsPerFile": [{"clubs/forms.py": ["        if timezone.now() > start_time or all_matches_list != 0:   #CHECK THIS!!!"], "clubs/tests/forms/test_tournament_form.py": ["# \"\"\"Unit tests of the tournament form.\"\"\"", "# from django import forms", "# from django.test import TestCase", "# from clubs.forms import TournamentForm", "# from clubs.models import User, Club, Tournament", "#", "# class TournamentFormTestCase(TestCase):", "#     \"\"\"Unit tests of the tournament form.\"\"\"", "#", "#     fixtures = ['clubs/tests/fixtures/default_club.json',", "#                 'clubs/tests/fixtures/default_user.json']", "#", "#     def setUp(self):", "#         self.user = User.objects.get(email='johndoe@example.org')", "#         self.form_input = {", "#             'tournament_name': 'Tournament 4',", "#             'short_description': 'Another chess club tournament',", "#             'number_of_participants': 13,", "#             'deadline': '2022-12-04T03:23:15+00:00',", "#             'start_time': '023-12-04T03:23:15+00:00',", "#         }", "#         self.club = Club.objects.get(club_name = \"Chess Club 1\")", "#         self.club.officers.add(self.user)", "#         self.user.clubs.add(self.club)", "#", "#", "#     def test_valid_tournament_form(self):", "#         form = TournamentForm(data=self.form_input)", "#         self.assertTrue(form.is_valid())", "", "    # def test_form_has_necessary_fields(self):", "    #     form = TournamentForm()", "    #     self.assertIn('tournament_name', form.fields)", "    #     self.assertIn('short_description', form.fields)", "    #     self.assertIn('number_of_participants', form.fields)", "    #     self.assertIn('deadline', form.fields)", "    #     self.assertIn('start_time', form.fields)", "        # number_of_participants_field = form.fields['number_of_participants']", "        # self.assertIn()", "        # self.assertTrue(isinstance(number_of_participants_field , forms.IntegerField))", "        # deadline_field = form.fields['deadline']", "        # self.assertTrue(isinstance(deadline_field , forms.DateTimeField))", "        # start_time_field = form.fields['start_time']", "        # self.assertTrue(isinstance(start_time_field , forms.DateTimeField))", "", "", "", "    # def test_form_tournament_model_validation(self):", "    #     self.form_input['number_of_participants'] = 'bad_number_of_participants'", "    #     form = TournamentForm(data=self.form_input)", "    #     self.assertFalse(form.is_valid())", "    #", "    #", "    # def test_form_rejects_blank_tournament_name(self):", "    #     self.form_input['tournament_name'] = ''", "    #     form = TournamentForm(data=self.form_input)", "    #     self.assertFalse(form.is_valid())", "    #", "    # def test_form_rejects_blank_number_of_participants(self):", "    #     self.form_input['number_of_participants'] = ''", "    #     form = TournamentForm(data=self.form_input)", "    #     self.assertFalse(form.is_valid())", "    #", "    # def test_form_accepts_no_short_description(self):", "    #     self.form_input['short_description'] = ''", "    #     form = TournamentForm(data=self.form_input)", "    #     self.assertTrue(form.is_valid())", "", "", "", "", "", "", "", "", "    # def test_form_must_save_correctly(self):", "    #     tournament = Tournament.objects.get(tournament_name='Tournament 4')", "    #     form = TornamentForm(instance=tournament, data=self.form_input)", "    #     before_count = Tournament.objects.count()", "    #     form.save()", "    #     after_count = Tournament.objects.count()", "    #     self.assertEqual(after_count, before_count)", "    #     self.assertEqual(Tournament.tournament_name, 'Tournament 4')", "    #     self.assertEqual(Tournament.short_description, 'Another chess club tournament')", "    #     self.assertEqual(Tournament.number_of_participants,'13')", "    #     self.assertEqual(Tournament.deadline, '2022-12-04T03:23:15+00:00')", "    #     self.assertEqual(Tournament.start_time, '023-12-04T03:23:15+00:00')", "    #     self.assertEqual(Tournament.description, 'I love chess.')"]}]}, {"commitAuthor": "FarihaChoudhury", "commitSha": "3e7906c8a3ad93569e2153c2b1623bc9eb5cb5d3", "filesEdited": [":q", "clubs/management/commands/seed.py"], "additionsPerFile": [{":q": ["-Merge branch 'complete_matches' of github.com:lisa947/SEG-small-group-project into complete_matches", "# Please enter a commit message to explain why this merge is necessary,", "# especially if it merges an updated upstream into a topic branch.", "#", "# Lines starting with '#' will be ignored, and an empty message aborts", "# the commit."], "clubs/management/commands/seed.py": ["    def create_Required_Users_And_Club(self):", "        #Create Billie FIRST:    (will create jeb and val after filling the kerbal club to add their specifc roles)", "        countBillie = User.objects.filter(email = 'billie@example.org').count()", "        if (countBillie == 0):", "            billie_instance = User.objects.create_user(", "                'billie@example.org',", "                first_name='Billie',", "                email='billie@example.org',", "                chess_experience_level=2,", "                short_personal_statement='short_personal_statement',", "            billie_instance.full_clean()", "            billie_instance.save()"]}], "deletionsPerFile": [{"clubs/management/commands/seed.py": ["# <<<<<<< HEAD", "# =======", "    def createRequiredUsersAndClub(self):", "        countJeb = User.objects.filter(email = 'jeb@example.org').count()", "        if (countJeb == 0):", "            jeb_instance = User.objects.create_user(", "                'jeb@example.org',", "                first_name='Jebediah',", "                last_name='Kerman',", "                email='jeb@example.org',", "                password=Command.PASSWORD,", "                public_bio='public_bio',", "                chess_experience_level=1,", "                short_personal_statement='short_personal_statement'", "            )", "            # members, created = Group.objects.get_or_create(name = 'members')", "            # members.user_set.add(member_instance)", "            jeb_instance.full_clean()", "            jeb_instance.save()", "", "        countVal = User.objects.filter(email = 'val@example.org').count()", "        if (countVal == 0):", "            val_instance = User.objects.create_user(", "                'val@example.org',", "                first_name='Valentina',", "                email='val@example.org',", "                chess_experience_level=1,", "                short_personal_statement='short_personal_statement'", "            # officer_instance.is_staff = True", "            val_instance.full_clean()", "            val_instance.save()", "", "# >>>>>>> origin", "#", "#     def create_Required_Users_And_Club(self):", "#         #Create Billie FIRST:    (will create jeb and val after filling the kerbal club to add their specifc roles)", "#         countBillie = User.objects.filter(email = 'billie@example.org').count()", "#         if (countBillie == 0):", "#             billie_instance = User.objects.create_user(", "#                 'billie@example.org',", "#                 first_name='Billie',", "#                 last_name='Kerman',", "#                 email='billie@example.org',", "#                 password=Command.PASSWORD,", "#                 public_bio='public_bio',", "# <<<<<<< HEAD", "#                 chess_experience_level=2,", "# =======", "#                 chess_experience_level=1,", "# >>>>>>> origin", "#                 short_personal_statement='short_personal_statement',", "#             )", "#             billie_instance.full_clean()", "#             billie_instance.save()"]}]}, {"commitAuthor": "FarihaChoudhury", "commitSha": "5aa1df19d60861d9977abf6ce3a0b4eeec1cfb6e", "filesEdited": ["README.md"], "additionsPerFile": [{"README.md": ["- Borrowed ideas from SEG practice training videos (clucker) - mainly for home, log in, sign up, lists displays etc.", "https://rahmanfadhil.com/django-login-with-email/", ""]}], "deletionsPerFile": [{"README.md": ["- Borrowed ideas from SEG practice training videos - mainly for home, log in, sign up, lists displays etc."]}]}, {"commitAuthor": "FarihaChoudhury", "commitSha": "b5e0a1b8c259ece0d2965a43e23fec91a3aebd79", "filesEdited": ["clubs/management/commands/seed.py"], "additionsPerFile": [{"clubs/management/commands/seed.py": ["# <<<<<<< HEAD", "# =======", "# >>>>>>> origin", "#", "#     def create_Required_Users_And_Club(self):", "#         #Create Billie FIRST:    (will create jeb and val after filling the kerbal club to add their specifc roles)", "#         countBillie = User.objects.filter(email = 'billie@example.org').count()", "#         if (countBillie == 0):", "#             billie_instance = User.objects.create_user(", "#                 'billie@example.org',", "#                 first_name='Billie',", "#                 last_name='Kerman',", "#                 email='billie@example.org',", "#                 password=Command.PASSWORD,", "#                 public_bio='public_bio',", "# <<<<<<< HEAD", "#                 chess_experience_level=2,", "# =======", "#                 chess_experience_level=1,", "# >>>>>>> origin", "#                 short_personal_statement='short_personal_statement',", "#             )", "#             billie_instance.full_clean()", "#             billie_instance.save()"]}], "deletionsPerFile": [{"clubs/management/commands/seed.py": ["<<<<<<< HEAD", "=======", ">>>>>>> origin", "", "    def create_Required_Users_And_Club(self):", "        #Create Billie FIRST:    (will create jeb and val after filling the kerbal club to add their specifc roles)", "        countBillie = User.objects.filter(email = 'billie@example.org').count()", "        if (countBillie == 0):", "            billie_instance = User.objects.create_user(", "                'billie@example.org',", "                first_name='Billie',", "                last_name='Kerman',", "                email='billie@example.org',", "                password=Command.PASSWORD,", "                public_bio='public_bio',", "<<<<<<< HEAD", "                chess_experience_level=2,", "=======", "                chess_experience_level=1,", ">>>>>>> origin", "                short_personal_statement='short_personal_statement',", "            )", "            billie_instance.full_clean()", "            billie_instance.save()"]}]}, {"commitAuthor": "FarihaChoudhury", "commitSha": "974d629eeee09c6a3d61341565fa1c808eea0de2", "filesEdited": ["README.md"], "additionsPerFile": [{"README.md": ["- Borrowed ideas from SEG practice training videos (clucker) - mainly for home, log in, sign up, lists displays etc.", "https://rahmanfadhil.com/django-login-with-email/", ""]}], "deletionsPerFile": [{"README.md": ["- Borrowed ideas from SEG practice training videos - mainly for home, log in, sign up, lists displays etc."]}]}, {"commitAuthor": "FarihaChoudhury", "commitSha": "0bb05f87deaeea08415654f8dd6384f043ceb2d4", "filesEdited": ["README.md", "clubs/migrations/0006_auto_20211217_1132.py", "clubs/migrations/0038_auto_20211215_0801.py", "clubs/migrations/0039_remove_match_match_winner.py", "clubs/migrations/0040_alter_tournament_tournament_winner.py", "clubs/migrations/0041_auto_20211215_1327.py", "clubs/models.py", "clubs/tests/forms/test_log_in_form.py", "clubs/tests/forms/test_password_form.py", "clubs/tests/models/test_club_model.py", "clubs/tests/models/test_match_model.py", "clubs/tests/models/test_tournament_model.py", "clubs/tests/views/test_co_organiser_list_view.py", "clubs/tests/views/test_generate_match_view.py", "clubs/tests/views/test_next_match_view.py", "clubs/tests/views/test_officer_applicant_list_view.py", "clubs/tests/views/test_password_view.py", "clubs/views/user_view.py"], "additionsPerFile": [{"README.md": ["- Borrowed ideas from SEG practice training videos - mainly for home, log in, sign up, lists displays etc.", "https://stackoverflow.com/questions/32296266/randomly-pair-items-in-a-list-using-python"], "clubs/migrations/0006_auto_20211217_1132.py": ["# Generated by Django 3.2.8 on 2021-12-17 11:32", "", "import datetime", "from django.conf import settings", "import django.core.validators", "from django.db import migrations, models", "import django.db.models.deletion", "import django.utils.timezone", "from django.utils.timezone import utc", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0005_auto_20211216_1013'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='match',", "            name='winner',", "            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='deadline',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 18, 11, 32, 6, 218582, tzinfo=utc), validators=[django.core.validators.MinValueValidator(django.utils.timezone.now)]),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='start_time',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 19, 11, 32, 6, 218616, tzinfo=utc)),", "        ),", "    ]"], "clubs/models.py": ["    tournament_name = models.CharField(max_length=20, blank=False, unique=True)"], "clubs/tests/forms/test_log_in_form.py": ["# from . import fixtures"], "clubs/tests/forms/test_password_form.py": ["            'old_password': 'Password123',", "        self.assertIn('old_password', form.fields)", "        self.form_input['old_password'] = 'WrongPassword123'"], "clubs/tests/models/test_club_model.py": ["\"\"\"Tests of the Club Model.\"\"\"", "", "    \"\"\"Tests of the Club  Model.\"\"\""], "clubs/tests/models/test_match_model.py": ["\"\"\"Tests of the Match Model.\"\"\"", "    \"\"\"Tests of the Match Model.\"\"\""], "clubs/tests/models/test_tournament_model.py": ["\"\"\"Tests of the Tournament Model.\"\"\"", "    \"\"\"Tests of the Tournament Model.\"\"\""], "clubs/tests/views/test_co_organiser_list_view.py": ["from django.conf import settings", "        self._create_test_officers(settings.USERS_PER_PAGE-1)", "        self.assertEqual(len(response.context['officers']), settings.USERS_PER_PAGE)", "        self.assertFalse(response.context['is_paginated'])", "        for user_id in range(settings.USERS_PER_PAGE-1):", "            self.assertContains(response, f'First{user_id}')", "            self.assertContains(response, f'Last{user_id}')", "            user = User.objects.get(username=f'user{user_id}@test.org')", "            user_url = reverse('show_user', kwargs={'user_id': user.id})", "            self.assertContains(response, user_url)", "", "    def test_get_co_organiser_list_with_pagination(self):", "        self.client.login(email=self.user.email, password='Password123')", "        club = Club.objects.get(club_name='Chess Club 1')", "        self._create_test_officers(settings.USERS_PER_PAGE*2+3-1)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'co_organiser_list.html')", "        self.assertEqual(len(response.context['officers']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_one_url = reverse('co_organiser_list',  kwargs={'club_id': self.club.id, 'tournament_id':self.tournament.id}) + '?page=1'", "        response = self.client.get(page_one_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'co_organiser_list.html')", "        self.assertEqual(len(response.context['officers']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_two_url = reverse('co_organiser_list', kwargs={'club_id': self.club.id, 'tournament_id':self.tournament.id}) + '?page=2'", "        response = self.client.get(page_two_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'co_organiser_list.html')", "        self.assertEqual(len(response.context['officers']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_three_url = reverse('co_organiser_list', kwargs={'club_id': self.club.id, 'tournament_id':self.tournament.id}) + '?page=3'", "        response = self.client.get(page_three_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'co_organiser_list.html')", "        self.assertEqual(len(response.context['officers']), 3)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertFalse(page_obj.has_next())", "    def test_get_user_list_redirects_when_not_logged_in(self):", "          redirect_url = reverse_with_next('log_in', self.url)", "          response = self.client.get(self.url)", "          self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)"], "clubs/tests/views/test_generate_match_view.py": ["        redirect_url = reverse('tournament_list', kwargs={'club_id': self.club.id})"], "clubs/tests/views/test_next_match_view.py": ["        redirect_url = reverse('show_club', kwargs={'club_id': self.club.id})"], "clubs/tests/views/test_password_view.py": ["        self.form_input['old_password'] = 'WrongPassword123'"], "clubs/views/user_view.py": ["        self.organisers = self.current_tournament.organisers.all()"]}], "deletionsPerFile": [{"README.md": ["https://stackoverflow.com/questions/32296266/randomly-pair-items-in-a-list-using-python"], "clubs/migrations/0038_auto_20211215_0801.py": ["# Generated by Django 3.2.8 on 2021-12-15 08:01", "", "from django.conf import settings", "from django.db import migrations, models", "import django.db.models.deletion", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0037_tournament_removed_participants'),", "    ]", "", "    operations = [", "        migrations.AddField(", "            model_name='match',", "            name='match_winner',", "            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='all_matches_list',", "            field=models.ManyToManyField(blank=True, related_name='all_matches_list', to='clubs.Match'),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='all_winners_list',", "            field=models.ManyToManyField(blank=True, related_name='all_winners_list', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='current_participants',", "            field=models.ManyToManyField(blank=True, related_name='current_participants_list', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='matches_list',", "            field=models.ManyToManyField(blank=True, related_name='matches_list', to='clubs.Match'),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='number_of_participants',", "            field=models.IntegerField(choices=[(2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16)]),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='participants_list',", "            field=models.ManyToManyField(blank=True, related_name='participants', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='removed_participants',", "            field=models.ManyToManyField(blank=True, related_name='removed_participants_list', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='winners_list',", "            field=models.ManyToManyField(blank=True, related_name='winners_list', to=settings.AUTH_USER_MODEL),", "        ),", "    ]"], "clubs/migrations/0039_remove_match_match_winner.py": ["# Generated by Django 3.2.8 on 2021-12-15 08:01", "", "from django.db import migrations", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0038_auto_20211215_0801'),", "    ]", "", "    operations = [", "        migrations.RemoveField(", "            model_name='match',", "            name='match_winner',", "        ),", "    ]"], "clubs/migrations/0040_alter_tournament_tournament_winner.py": ["# Generated by Django 3.2.8 on 2021-12-15 08:07", "", "from django.conf import settings", "from django.db import migrations, models", "import django.db.models.deletion", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0039_remove_match_match_winner'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='tournament',", "            name='tournament_winner',", "            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),", "        ),", "    ]"], "clubs/migrations/0041_auto_20211215_1327.py": ["# Generated by Django 3.2.8 on 2021-12-15 13:27", "", "from django.conf import settings", "from django.db import migrations, models", "import django.db.models.deletion", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0040_alter_tournament_tournament_winner'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='match',", "            name='winner',", "            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.AlterField(", "            model_name='user',", "            name='chess_experience_level',", "            field=models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], null=True),", "        ),", "    ]"], "clubs/models.py": ["    tournament_name = models.CharField(max_length=15, blank=False, unique=True)"], "clubs/tests/forms/test_log_in_form.py": ["from . import fixtures"], "clubs/tests/forms/test_password_form.py": ["            'password': 'Password123',", "        self.assertIn('password', form.fields)", "        self.form_input['password'] = 'WrongPassword123'"], "clubs/tests/models/test_match_model.py": ["<<<<<<< HEAD", "=======", "# from django.core.exceptions import ValidationError", "# from django.test import TestCase", "# from clubs.models import Tournament, Match, Club, User", "#", "# class MatchModelTest(TestCase):", "#", "#     fixtures = ['clubs/tests/fixtures/default_user.json',", "#                  'clubs/tests/fixtures/other_users.json',", "#                  'clubs/tests/fixtures/default_tournament.json',", "#                  'clubs/tests/fixtures/other_tournaments.json',", "#                  'clubs/tests/fixtures/default_club.json',", "#                  'clubs/tests/fixtures/other_clubs.json',", "#                 'clubs/tests/fixtures/default_match.json'", "#                 ]", "#", "#", "#     def setUp(self):", "#         super(TestCase, self).setUp()", "#         self.user = User.objects.get(username='johndoe@example.org')", "#         self.tournament = Tournament.objects.get(tournament_name=\"Tournament 1\")", "#         self.other_tournament = Tournament.objects.get(tournament_name=\"Tournament 2\")", "#         self.match = Match.objects.get(matchId=1)", "#", "#", "#     def test_valid_message(self):", "#         self._assert_match_is_valid()", "#", "#", "#", "# # Match ID tests:", "#     # def test_match_id_must_not_be_blank(self):", "#     #     self.match.matchId = None", "#     #     self._assert_match_is_invalid()", "#", "#", "# #Player tests:", "#     def test_player1_must_not_be_blank(self):", "#         self.match.player1 = None", "#         self._assert_match_is_invalid()", "#", "#     def test_player2_must_not_be_blank(self):", "#         self.match.player2 = None", "#         self._assert_match_is_invalid()", "#", "#", "# #tournament tests:", "#     def test_tournament_must_not_be_blank(self):", "#         self.match.tournament = None", "#         self._assert_match_is_invalid()", "#", "#", "# #club tests:", "#     def test_club_must_not_be_blank(self):", "#         self.match.club = None", "#         self._assert_match_is_invalid()", "#", "#", "# #round test:   -- maybe get rid of ?", "#     def test_round_can_not_be_blank(self):", "#         self.tournament.round = None", "#         self._assert_match_is_valid()", "#", "#", "#", "#     #", "#     # def test_tournament_name_must_be_unique(self):", "#     #     self.tournament.tournament_name = self.other_tournament.tournament_name", "#     #     self._assert_tournament_is_invalid()", "#     #", "#     # def test_tournament_name_must_not_be_over_50_characters(self):", "#     #     self.tournament.tournament_name = 'x' * 51", "#     #     self._assert_tournament_is_invalid()", "#     #", "#     # def test_name_can_be_50_characters(self):", "#     #     self.tournament.tournament_name = 'x' * 50", "#     #     self._assert_tournament_is_valid()", "#", "#", "# # Description Tests:", "#     # def test_short_description_can_not_be_blank(self):", "#     #     self.tournament.short_description = None", "#     #     self._assert_tournament_is_valid()", "#     #", "#     # def test_short_description_must_not_be_over_100_characters(self):", "#     #     self.tournament.short_description = 'x' * 141", "#     #     self._assert_tournament_is_invalid()", "#     #", "#     # def test_short_description_can_be_140_characters(self):", "#     #     self.tournament.short_description = 'x' * 140", "#     #     self._assert_tournament_is_valid()", "#     #", "#     # def test_short_description_need_not_be_unique(self):", "#     #     self.tournament.short_description = self.other_tournament.short_description", "#     #     self._assert_tournament_is_valid()", "#", "# # Number of participants Tests:", "#     # def test_number_of_participants_can_not_be_under_2_participants(self):", "#     #     self.tournament.number_of_participants = 1", "#     #     self._assert_tournament_is_valid()", "#     #", "#     # def test_number_of_participants_can_not_be_over_16_participants(self):", "#     #     self.tournament.number_of_participants = 17", "#     #     self._assert_tournament_is_valid()", "#     #", "#     # def test_number_of_applicants_must_not_be_blank(self):", "#     #     self.tournament.number_of_participants = None", "#     #     self._assert_tournament_is_invalid()", "#", "#", "# # Assert valid and invalid helper methods:", "#     def _assert_match_is_valid(self):", "#         try:", "#             self.match.full_clean()", "#         except (ValidationError):", "#             self.fail(\"Test match should be valid\")", "#", "#     def _assert_match_is_invalid(self):", "#         with self.assertRaises(ValidationError):", "#             self.match.full_clean()", ">>>>>>> origin"], "clubs/tests/views/test_co_organiser_list_view.py": ["", "", "", "        self._create_test_officers(14)", "        self.assertEqual(len(response.context['officers']), 15)", "        for user_id in range(15-1):"], "clubs/tests/views/test_generate_match_view.py": ["        redirect_url = reverse('show_club', kwargs={'club_id': self.club.id})"], "clubs/tests/views/test_next_match_view.py": ["        redirect_url = reverse('tournament_list', kwargs={'club_id': self.club.id})"], "clubs/tests/views/test_officer_applicant_list_view.py": ["        print(self.club.officers.all())"], "clubs/tests/views/test_password_view.py": ["        self.form_input['password'] = 'WrongPassword123'"], "clubs/views/user_view.py": ["        organisers = current_tournament.organisers.all()"]}]}, {"commitAuthor": "HristinaSararu", "commitSha": "4581ef82b0deaad7724409d324ec50fad517c1df", "filesEdited": ["README.md"], "additionsPerFile": [{"README.md": ["https://stackoverflow.com/questions/32296266/randomly-pair-items-in-a-list-using-python", "https://rahmanfadhil.com/django-login-with-email/"]}], "deletionsPerFile": [{"README.md": ["https://stackoverflow.com/questions/32296266/randomly-pair-items-in-a-list-using-python"]}]}, {"commitAuthor": "FarihaChoudhury", "commitSha": "297bbed95fe28c4a4c33335dad897381572d84a6", "filesEdited": ["clubs/forms.py", "clubs/tests/models/test_user_model.py", "clubs/tests/views/test_cancel_toggle_view.py"], "additionsPerFile": [{"clubs/forms.py": ["        if timezone.now() > start_time or all_matches_list != 0:   #CHECK THIS!!!"]}], "deletionsPerFile": [{"clubs/forms.py": ["        if timezone.now() > start_time:", "<<<<<<< HEAD", "=======", ">>>>>>> origin"], "clubs/tests/models/test_user_model.py": ["# Chess experience level tests:", "    # def test_chess_experience_level_default_0(self):", "    #     # self.user.chess_experience_level =", "    #     self._assert_user_is_valid()", "", "        # second_user = self._create_second_user()", "        # second_user = self._create_second_user()"], "clubs/tests/views/test_cancel_toggle_view.py": ["<<<<<<< HEAD", "=======", ">>>>>>> origin", "<<<<<<< HEAD", "=======", ">>>>>>> origin", "<<<<<<< HEAD", "        redirect_url = reverse('user_profile')", "=======", ">>>>>>> origin"]}]}, {"commitAuthor": "FarihaChoudhury", "commitSha": "fa4e68233d90bb10fdcb3c705c7db4162142847b", "filesEdited": ["clubs/forms.py", "clubs/helpers.py", "clubs/management/commands/seed.py", "clubs/migrations/0001_initial.py", "clubs/migrations/0002_alter_tournament_start_time.py", "clubs/migrations/0002_auto_20211118_0933.py", "clubs/migrations/0003_alter_user_chess_experience_level.py", "clubs/migrations/0003_auto_20211216_1000.py", "clubs/migrations/0004_auto_20211129_1857.py", "clubs/migrations/0004_auto_20211216_1012.py", "clubs/migrations/0005_alter_club_location.py", "clubs/migrations/0005_auto_20211216_1013.py", "clubs/migrations/0005_post.py", "clubs/migrations/0006_delete_post.py", "clubs/migrations/0007_user_clubs.py", "clubs/migrations/0008_merge_0005_alter_club_location_0007_user_clubs.py", "clubs/migrations/0009_alter_user_clubs.py", "clubs/migrations/0010_club_members.py", "clubs/migrations/0011_club_applicants.py", "clubs/migrations/0012_club_officers.py", "clubs/migrations/0013_auto_20211208_1820.py", "clubs/migrations/0014_auto_20211209_0250.py", "clubs/migrations/0015_alter_club_tournaments.py", "clubs/migrations/0016_alter_club_tournaments.py", "clubs/migrations/0017_alter_tournament_deadline.py", "clubs/migrations/0018_tournament_start_time.py", "clubs/migrations/0019_auto_20211209_0925.py", "clubs/migrations/0019_club_created_at.py", "clubs/migrations/0020_club_tournament_member.py", "clubs/migrations/0021_auto_20211209_1351.py", "clubs/migrations/0022_merge_0019_club_created_at_0021_auto_20211209_1351.py", "clubs/migrations/0023_auto_20211210_2110.py", "clubs/migrations/0024_alter_tournament_number_of_participants.py", "clubs/migrations/0025_rename_participants_tournament_participants_list.py", "clubs/migrations/0026_tournament_matches_list.py", "clubs/migrations/0027_alter_match_options.py", "clubs/migrations/0028_match_round.py", "clubs/migrations/0029_auto_20211212_1249.py", "clubs/migrations/0030_tournament_all_winners_list.py", "clubs/migrations/0031_match_match_winner_list.py", "clubs/migrations/0032_tournament_all_matches_list.py", "clubs/migrations/0033_tournament_current_particpants.py", "clubs/migrations/0034_auto_20211212_2133.py", "clubs/migrations/0035_auto_20211212_2146.py", "clubs/migrations/0036_auto_20211213_1224.py", "clubs/migrations/0037_tournament_removed_participants.py", "clubs/models.py", "clubs/templates/applicant_list.html", "clubs/templates/generate_matches.html", "clubs/templates/member_list_for_members.html", "clubs/templates/member_list_for_staff.html", "clubs/templates/officer_applicant_list.html", "clubs/templates/officer_list.html", "clubs/templates/partials/club_profile.html", "clubs/templates/partials/menu.html", "clubs/templates/tournament_joined.html", "clubs/templates/tournament_list.html", "clubs/templates/winners_list.html", "clubs/tests/forms/test_log_in_form.py", "clubs/tests/forms/test_password_form.py", "clubs/tests/forms/test_sign_up_form.py", "clubs/tests/models/test_match_model.py", "clubs/tests/models/test_tournament_model.py", "clubs/tests/models/test_user_model.py", "clubs/tests/views/test_applicant_list_view.py", "clubs/tests/views/test_apply_membership_toggle_view.py", "clubs/tests/views/test_apply_officer_toggle_view.py", "clubs/tests/views/test_approve_officer_toggle_view.py", "clubs/tests/views/test_approve_toggle_view.py", "clubs/tests/views/test_cancel_toggle_view.py", "clubs/tests/views/test_co_organiser_list_view.py", "clubs/tests/views/test_create_club_view.py", "clubs/tests/views/test_demote_toggle_view.py", "clubs/tests/views/test_generate_match_view.py", "clubs/tests/views/test_generate_next_matches_view.py", "clubs/tests/views/test_member_list_for_members_view.py", "clubs/tests/views/test_member_list_for_staff_view.py", "clubs/tests/views/test_officer_applicant_list_view.py", "clubs/tests/views/test_officer_list_view.py", "clubs/tests/views/test_password_view.py", "clubs/tests/views/test_profile_view.py", "clubs/tests/views/test_promote_toggle_view.py", "clubs/tests/views/test_show_clubs_view.py", "clubs/tests/views/test_sign_up_toggle_view.py", "clubs/tests/views/test_tournament_joined_view.py", "clubs/tests/views/test_tournament_list_view.py", "clubs/tests/views/test_transfer_toggle_view.py", "clubs/tests/views/test_withdraw_toggle_view.py", "clubs/views.py", "clubs/views/account_views.py", "clubs/views/authentication_views.py", "clubs/views/club_view.py", "clubs/views/match_views.py", "clubs/views/mixins.py", "clubs/views/static_views.py", "clubs/views/toggle_view.py", "clubs/views/tournament_view.py", "clubs/views/user_view.py", "system/settings.py", "system/urls.py"], "additionsPerFile": [{"clubs/forms.py": ["from django.utils import timezone", "from django.contrib.auth import authenticate", "    def get_user(self):", "        \"\"\"Returns authenticated user if possible.\"\"\"", "        user = None", "        if self.is_valid():", "            email = self.cleaned_data.get('email')", "            password = self.cleaned_data.get('password')", "            user = authenticate(email=email, password=password)", "            return user", "", "", "class NewPasswordMixin(forms.Form):", "    \"\"\"Form mixing for new_password and password_confirmation fields.\"\"\"", "        label='New Password',", "            regex=r'^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9]).*$',", "            message='Password must contain an uppercase character, a lowercase '", "                    'character and a number'", "            )]", "        \"\"\" Ensure that new_password and password_confirmation contain the same password.\"\"\"", "", "            self.add_error('password_confirmation', 'Confirmation does not match password.')", "", "", "class PasswordForm(NewPasswordMixin):", "    \"\"\"Form enabling users to change their password.\"\"\"", "", "    old_password = forms.CharField(label='Old password', widget=forms.PasswordInput())", "", "    def __init__(self, user=None, **kwargs):", "        \"\"\"Construct new form instance with a user instance.\"\"\"", "", "        super().__init__(**kwargs)", "        self.user = user", "", "    def clean(self):", "        \"\"\"Clean the data and generate messages for any errors.\"\"\"", "", "        super().clean()", "        old_password = self.cleaned_data.get('old_password')", "        if self.user is not None:", "            user = authenticate(email=self.user.email, password=old_password)", "        else:", "            user = None", "        if user is None:", "            self.add_error('old_password', \"Password is invalid\")", "", "    def save(self):", "        \"\"\"Save the user's new password.\"\"\"", "", "        new_password = self.cleaned_data['new_password']", "        if self.user is not None:", "            self.user.set_password(new_password)", "            self.user.save()", "        return self.user", "", "", "class SignUpForm(NewPasswordMixin, forms.ModelForm):", "    \"\"\"Form enabling unregistered users to sign up.\"\"\"", "", "    class Meta:", "        \"\"\"Form options.\"\"\"", "", "        model = User", "        fields = ['first_name', 'last_name', 'email', 'public_bio',", "                  'chess_experience_level', 'short_personal_statement']", "        widgets = { 'public_bio': forms.Textarea(), 'short_personal_statement': forms.Textarea() }", "        \"\"\"Create a new user.\"\"\"", "", "    def __init__(self, *args, **kwargs):", "        super(TournamentForm, self).__init__(*args, **kwargs)", "        start_time = self.instance.start_time", "        deadline = self.instance.deadline", "        if timezone.now() > start_time:", "            self.fields['number_of_participants'].disabled = True", "            self.fields['deadline'].disabled = True", "            self.fields['start_time'].disabled = True", "", "<<<<<<< HEAD", "=======", "        widgets = {'description': forms.Textarea()}", "", "    def clean(self):", "        \"\"\"Clean the data and generate messages for any errors.\"\"\"", "", "        super().clean()", "        deadline = self.cleaned_data.get('deadline')", "        start_time = self.cleaned_data.get('start_time')", "        if deadline > start_time:", "            self.add_error('start_time', 'Start time cannot be earlier than deadline!')", ">>>>>>> origin"], "clubs/helpers.py": ["            return redirect('show_club', club_id=club_id)", "def officer_only(view_function):", "        if current_club.officers.filter(email=request.user.email).exists():", "            return redirect('show_club', club_id=club_id)", "            return redirect('show_club', club_id=club_id)", "    return modified_view_function", "", "def officer_or_owner_only(view_function):", "    def modified_view_function(request, club_id, **options):", "        current_club = Club.objects.get(id=club_id)", "        if current_club.officers.filter(email=request.user.email).exists() or current_club.club_owner.email==request.user.email:", "            return view_function(request, club_id=club_id, **options)", "        else:", "            return redirect('show_club', club_id=club_id)", "            return redirect('show_club', club_id=club_id, **options)"], "clubs/management/commands/seed.py": ["<<<<<<< HEAD", "=======", "    def createRequiredUsersAndClub(self):", "        countJeb = User.objects.filter(email = 'jeb@example.org').count()", "        if (countJeb == 0):", "            jeb_instance = User.objects.create_user(", "                'jeb@example.org',", "                first_name='Jebediah',", "                last_name='Kerman',", "                email='jeb@example.org',", "                password=Command.PASSWORD,", "                public_bio='public_bio',", "                chess_experience_level=1,", "                short_personal_statement='short_personal_statement'", "            )", "            # members, created = Group.objects.get_or_create(name = 'members')", "            # members.user_set.add(member_instance)", "            jeb_instance.full_clean()", "            jeb_instance.save()", "", "", "        countVal = User.objects.filter(email = 'val@example.org').count()", "        if (countVal == 0):", "            val_instance = User.objects.create_user(", "                'val@example.org',", "                first_name='Valentina',", "                last_name='Kerman',", "                email='val@example.org',", "                password=Command.PASSWORD,", "                public_bio='public_bio',", "                chess_experience_level=1,", "                short_personal_statement='short_personal_statement'", "            )", "            # officer_instance.is_staff = True", "            val_instance.full_clean()", "            val_instance.save()", "", ">>>>>>> origin", "<<<<<<< HEAD", "=======", "                chess_experience_level=1,", ">>>>>>> origin"], "clubs/migrations/0001_initial.py": ["# Generated by Django 3.2.8 on 2021-12-16 09:42", "import datetime", "from django.conf import settings", "import django.core.validators", "import django.db.models.deletion", "from django.utils.timezone import utc", "                ('chess_experience_level', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)])),", "                ('short_personal_statement', models.CharField(blank=True, max_length=520)),", "                'ordering': ['last_name', 'first_name'],", "        migrations.CreateModel(", "            name='Club',", "            fields=[", "                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),", "                ('club_name', models.CharField(max_length=50, unique=True)),", "                ('location', models.CharField(max_length=50)),", "                ('description', models.CharField(blank=True, max_length=140)),", "                ('created_at', models.DateTimeField(auto_now_add=True)),", "                ('applicants', models.ManyToManyField(related_name='applicants', to=settings.AUTH_USER_MODEL)),", "                ('club_owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),", "                ('members', models.ManyToManyField(related_name='members', to=settings.AUTH_USER_MODEL)),", "                ('officer_applicants', models.ManyToManyField(related_name='officer_applicants', to=settings.AUTH_USER_MODEL)),", "                ('officers', models.ManyToManyField(related_name='officers', to=settings.AUTH_USER_MODEL)),", "            ],", "        ),", "        migrations.CreateModel(", "            name='Match',", "            fields=[", "                ('matchId', models.AutoField(primary_key=True, serialize=False)),", "                ('date', models.DateTimeField()),", "                ('round', models.IntegerField(default=0)),", "                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clubs.club')),", "                ('player1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player1', to=settings.AUTH_USER_MODEL)),", "                ('player2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player2', to=settings.AUTH_USER_MODEL)),", "            ],", "            options={", "                'ordering': ['date'],", "            },", "        ),", "        migrations.CreateModel(", "            name='Tournament',", "            fields=[", "                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),", "                ('tournament_name', models.CharField(max_length=15, unique=True)),", "                ('short_description', models.CharField(max_length=100)),", "                ('number_of_participants', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16)], default=2)),", "                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),", "                ('deadline', models.DateTimeField(default=django.utils.timezone.now, validators=[django.core.validators.MinValueValidator(django.utils.timezone.now)])),", "                ('start_time', models.DateTimeField(default=datetime.datetime(2021, 12, 17, 9, 42, 31, 83710, tzinfo=utc))),", "                ('all_matches_list', models.ManyToManyField(blank=True, related_name='all_matches_list', to='clubs.Match')),", "                ('all_winners_list', models.ManyToManyField(blank=True, related_name='all_winners_list', to=settings.AUTH_USER_MODEL)),", "                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clubs.club')),", "                ('current_participants', models.ManyToManyField(blank=True, related_name='current_participants_list', to=settings.AUTH_USER_MODEL)),", "                ('matches_list', models.ManyToManyField(blank=True, related_name='matches_list', to='clubs.Match')),", "                ('organisers', models.ManyToManyField(related_name='organisers', to=settings.AUTH_USER_MODEL)),", "                ('participants_list', models.ManyToManyField(blank=True, related_name='participants', to=settings.AUTH_USER_MODEL)),", "                ('removed_participants', models.ManyToManyField(blank=True, related_name='removed_participants_list', to=settings.AUTH_USER_MODEL)),", "                ('tournament_winner', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),", "                ('winners_list', models.ManyToManyField(blank=True, related_name='winners_list', to=settings.AUTH_USER_MODEL)),", "            ],", "            options={", "                'ordering': ['created_at'],", "            },", "        ),", "        migrations.AddField(", "            model_name='match',", "            name='tournament',", "            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clubs.tournament'),", "        ),", "        migrations.AddField(", "            model_name='match',", "            name='winner',", "            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.AddField(", "            model_name='club',", "            name='tournament_list',", "            field=models.ManyToManyField(blank=True, related_name='tournament_list', to='clubs.Tournament'),", "        ),", "        migrations.AddField(", "            model_name='club',", "            name='tournament_member',", "            field=models.ManyToManyField(blank=True, related_name='tournament_member', to='clubs.Tournament'),", "        ),", "        migrations.AddField(", "            model_name='club',", "            name='tournaments',", "            field=models.ManyToManyField(blank=True, related_name='tournaments', to='clubs.Tournament'),", "        ),", "        migrations.AddField(", "            model_name='user',", "            name='clubs',", "            field=models.ManyToManyField(related_name='clubs', to='clubs.Club'),", "        ),", "        migrations.AddField(", "            model_name='user',", "            name='groups',", "            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),", "        ),", "        migrations.AddField(", "            model_name='user',", "            name='tournaments',", "            field=models.ManyToManyField(blank=True, related_name='tournament', to='clubs.Tournament'),", "        ),", "        migrations.AddField(", "            model_name='user',", "            name='user_permissions',", "            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),", "        ),"], "clubs/migrations/0002_alter_tournament_start_time.py": ["# Generated by Django 3.2.8 on 2021-12-16 09:42", "", "import datetime", "from django.db import migrations, models", "from django.utils.timezone import utc", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0001_initial'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='tournament',", "            name='start_time',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 17, 9, 42, 41, 799021, tzinfo=utc)),", "        ),", "    ]"], "clubs/migrations/0003_auto_20211216_1000.py": ["# Generated by Django 3.2.8 on 2021-12-16 10:00", "", "import datetime", "from django.conf import settings", "from django.db import migrations, models", "import django.db.models.deletion", "from django.utils.timezone import utc", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0002_alter_tournament_start_time'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='club',", "            name='applicants',", "            field=models.ManyToManyField(blank=True, related_name='applicants', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.AlterField(", "            model_name='club',", "            name='members',", "            field=models.ManyToManyField(blank=True, related_name='members', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.AlterField(", "            model_name='club',", "            name='officer_applicants',", "            field=models.ManyToManyField(blank=True, related_name='officer_applicants', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.AlterField(", "            model_name='club',", "            name='officers',", "            field=models.ManyToManyField(blank=True, related_name='officers', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='start_time',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 17, 10, 0, 9, 208293, tzinfo=utc)),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='tournament_winner',", "            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.AlterField(", "            model_name='user',", "            name='chess_experience_level',", "            field=models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], default=1),", "        ),", "    ]"], "clubs/migrations/0004_auto_20211216_1012.py": ["# Generated by Django 3.2.8 on 2021-12-16 10:12", "", "import datetime", "import django.core.validators", "from django.db import migrations, models", "from django.utils.timezone import utc", "import django.utils.timezone", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0003_auto_20211216_1000'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='tournament',", "            name='deadline',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 17, 10, 12, 46, 962431, tzinfo=utc), validators=[django.core.validators.MinValueValidator(django.utils.timezone.now)]),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='start_time',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 18, 10, 12, 46, 962447, tzinfo=utc)),", "        ),", "    ]"], "clubs/migrations/0005_auto_20211216_1013.py": ["# Generated by Django 3.2.8 on 2021-12-16 10:13", "", "import datetime", "from django.conf import settings", "import django.core.validators", "from django.db import migrations, models", "import django.db.models.deletion", "from django.utils.timezone import utc", "import django.utils.timezone", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0004_auto_20211216_1012'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='tournament',", "            name='deadline',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 17, 10, 13, 38, 873311, tzinfo=utc), validators=[django.core.validators.MinValueValidator(django.utils.timezone.now)]),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='start_time',", "            field=models.DateTimeField(default=datetime.datetime(2021, 12, 18, 10, 13, 38, 873329, tzinfo=utc)),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='tournament_winner',", "            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),", "        ),", "    ]"], "clubs/models.py": ["from datetime import timedelta", "    chess_experience_level = models.IntegerField(choices=chess_experience_level_choices, default=1)", "    def toggle_apply_membership(self, club):", "        if not self.clubs.filter(club_name=club.club_name).exists():", "            club.applicants.add(self)", "            self.clubs.add(club)", "", "    def toggle_apply_officer(self, club):", "        if club.members.filter(email=self.email).exists():", "            club.officer_applicants.add(self)", "", "    def toggle_approve_member_to_officer(self, member, club):", "        if club.officer_applicants.filter(email=member.email).exists():", "            club.members.remove(member)", "            club.officer_applicants.remove(member)", "            club.officers.add(member)", "", "", "    officers = models.ManyToManyField(User, related_name='officers', blank=True)", "    members = models.ManyToManyField(User, related_name='members', blank=True)", "    applicants = models.ManyToManyField(User, related_name='applicants', blank=True)", "    officer_applicants = models.ManyToManyField(User, related_name='officer_applicants', blank=True)", "", "    tournament_name = models.CharField(max_length=15, blank=False, unique=True)", "    short_description =  models.CharField(max_length=100, blank=False)", "    tournament_choices = zip( range(1,17), range(1,17) )", "    number_of_participants = models.IntegerField(choices=tournament_choices, blank=False, default=2)", "    deadline = models.DateTimeField(default=(timezone.now() + timedelta(days=1)), validators=[MinValueValidator(timezone.now)])", "    start_time = models.DateTimeField(default=(timezone.now() + timedelta(days=2)))", "    tournament_winner = models.ForeignKey(User, on_delete=models.CASCADE, null=True, related_name='+', blank=True)"], "clubs/templates/applicant_list.html": ["{% load bootstrap_pagination %}", "      {% bootstrap_paginate page_obj range=6 previous_label=\"Previous\" next_label=\"Next\" show_first_last=\"true\" %}"], "clubs/templates/member_list_for_members.html": ["{% load bootstrap_pagination %}", "      <h1>Members</h1>", "      {% bootstrap_paginate page_obj range=6 previous_label=\"Previous\" next_label=\"Next\" show_first_last=\"true\" %}"], "clubs/templates/member_list_for_staff.html": ["{% load bootstrap_pagination %}", "       {% bootstrap_paginate page_obj range=6 previous_label=\"Previous\" next_label=\"Next\" show_first_last=\"true\" %}"], "clubs/templates/officer_applicant_list.html": ["{% extends 'base_content.html' %}", "{% load bootstrap_pagination %}", "{% block title %}", "| Officer Applicants List", "{% endblock %}", "{% block content %}", "<div class=\"container\">", "  <div class=\"row\">", "    <div class=\"col-12\">", "      <h1>Officer applicants</h1>", "      {% bootstrap_paginate page_obj range=6 previous_label=\"Previous\" next_label=\"Next\" show_first_last=\"true\" %}", "      <table class=\"table\">", "        <th> {{current_club.club_name}} </th>", "        {% for officer_applicant in officer_applicants %}", "          <tr>", "            <td>", "              <img src=\"{{ officer_applicant.mini_gravatar }}\" alt=\"Gravatar of {{ officer_applicant.username }}\" class=\"rounded-circle\" >", "            </td>", "            <td>{{ officer_applicant.full_name }}</td>", "            <td><a href=\"{% url 'show_user' officer_applicant.id %}\">{{ officer_applicant.email }}</a></td>", "            {% if current_user == current_club.club_owner %}", "            <td>", "              <form action=\"{% url 'approve_member_to_officer_toggle' club_id=current_club.id user_id=officer_applicant.id %}\" method=\"get\">", "                <button class=\"btn btn-primary\">Approve request</button>", "              </form>", "            </td>", "            {% endif%}", "          </tr>", "        {% endfor %}", "      </table>", "    </div>", "  </div>", "</div>", "{% endblock %}"], "clubs/templates/officer_list.html": ["{% load bootstrap_pagination %}", "      {% bootstrap_paginate page_obj range=6 previous_label=\"Previous\" next_label=\"Next\" show_first_last=\"true\" %}"], "clubs/templates/partials/club_profile.html": ["          <form action=\"{% url 'apply_membership_toggle' current_club.id %}\" method=\"get\">", "            <button class=\"btn btn-primary\">Apply for membership</button>", "          </form>", "        {% elif current_user in current_club.applicants.all%}", "        {% elif current_user in current_club.members.all %}", "          {% if current_user in current_club.officer_applicants.all%}", "            <p><b>My status: </b><big> Member, Officer applicant</big><p><br>", "          {% else %}", "            <p><b>My status: </b><big> Member</big><p><br>", "            <form action=\"{% url 'apply_officer_toggle' current_club.id %}\" method=\"get\">", "              <button class=\"btn btn-primary\">Apply for officer</button>", "            </form>", "          {% endif %}", "        {% elif current_user in current_club.officers.all%}", "          <p><b>My status: </b><big> Officer</big><p><br>", "        {% elif current_user == current_club.club_owner%}", "         {% endif %}"], "clubs/templates/partials/menu.html": ["      <li class=\"nav-item\">", "        <a class=\"nav-link\" href=\"{% url 'officer_applicant_list' current_club.id %}\">Officer applicants</a>", "      </li>", ""], "clubs/templates/tournament_joined.html": ["{% load bootstrap_pagination %}", "       <h1>My Tournament</h1>", "       {% bootstrap_paginate page_obj range=6 previous_label=\"Previous\" next_label=\"Next\" show_first_last=\"true\" %}"], "clubs/templates/tournament_list.html": ["{% load bootstrap_pagination %}", "       {% bootstrap_paginate page_obj range=6 previous_label=\"Previous\" next_label=\"Next\" show_first_last=\"true\" %}", "                {% if tournament.start_time < now%}", "                  <form action=\"{% url 'co_organiser_list' club_id=current_club.id tournament_id=tournament.id%}\" method=\"get\">"], "clubs/tests/forms/test_log_in_form.py": ["from clubs.forms import LogInForm, User", "from . import fixtures", "    fixtures = ['clubs/tests/fixtures/default_user.json']", "", "    def test_can_authenticate_valid_user(self):", "        fixture = User.objects.get(email='johndoe@example.org')", "        form_input = {'email': 'johndoe@example.org', 'password': 'Password123'}", "        form = LogInForm(data=form_input)", "        user = form.get_user()", "        self.assertEqual(user, fixture)", "", "    def test_invalid_credentials_do_not_authenticate(self):", "        form_input = {'email': 'johndoe@example.org', 'password': 'WrongPassword123'}", "        form = LogInForm(data=form_input)", "        user = form.get_user()", "        self.assertEqual(user, None)", "", "    def test_blank_password_does_not_authenticate(self):", "        form_input = {'email': 'johndoe@example.org', 'password': ''}", "        form = LogInForm(data=form_input)", "        user = form.get_user()", "        self.assertEqual(user, None)", "", "    def test_blank_username_does_not_authenticate(self):", "        form_input = {'email': '', 'password': 'Password123'}", "        form = LogInForm(data=form_input)", "        user = form.get_user()", "        self.assertEqual(user, None)"], "clubs/tests/forms/test_password_form.py": ["from django.contrib.auth.hashers import check_password", "        form = PasswordForm(user=self.user)", "        form = PasswordForm(user=self.user, data=self.form_input)", "        form = PasswordForm(user=self.user, data=self.form_input)", "        form = PasswordForm(user=self.user, data=self.form_input)", "        form = PasswordForm(user=self.user, data=self.form_input)", "        form = PasswordForm(user=self.user, data=self.form_input)", "        self.assertFalse(form.is_valid())", "", "    def test_password_must_be_valid(self):", "        self.form_input['password'] = 'WrongPassword123'", "        form = PasswordForm(user=self.user, data=self.form_input)", "        self.assertFalse(form.is_valid())", "", "    def test_form_must_contain_user(self):", "", "    def test_save_form_changes_password(self):", "        form = PasswordForm(user=self.user, data=self.form_input)", "        form.full_clean()", "        form.save()", "        self.user.refresh_from_db()", "        self.assertFalse(check_password('Password123', self.user.password))", "        self.assertTrue(check_password('NewPassword123', self.user.password))"], "clubs/tests/models/test_match_model.py": ["<<<<<<< HEAD", "=======", "# from django.core.exceptions import ValidationError", "# from django.test import TestCase", "# from clubs.models import Tournament, Match, Club, User", "#", "# class MatchModelTest(TestCase):", "#", "#     fixtures = ['clubs/tests/fixtures/default_user.json',", "#                  'clubs/tests/fixtures/other_users.json',", "#                  'clubs/tests/fixtures/default_tournament.json',", "#                  'clubs/tests/fixtures/other_tournaments.json',", "#                  'clubs/tests/fixtures/default_club.json',", "#                  'clubs/tests/fixtures/other_clubs.json',", "#                 'clubs/tests/fixtures/default_match.json'", "#                 ]", "#", "#", "#     def setUp(self):", "#         super(TestCase, self).setUp()", "#         self.user = User.objects.get(username='johndoe@example.org')", "#         self.tournament = Tournament.objects.get(tournament_name=\"Tournament 1\")", "#         self.other_tournament = Tournament.objects.get(tournament_name=\"Tournament 2\")", "#         self.match = Match.objects.get(matchId=1)", "#", "#", "#     def test_valid_message(self):", "#         self._assert_match_is_valid()", "#", "#", "#", "# # Match ID tests:", "#     # def test_match_id_must_not_be_blank(self):", "#     #     self.match.matchId = None", "#     #     self._assert_match_is_invalid()", "#", "#", "# #Player tests:", "#     def test_player1_must_not_be_blank(self):", "#         self.match.player1 = None", "#         self._assert_match_is_invalid()", "#", "#     def test_player2_must_not_be_blank(self):", "#         self.match.player2 = None", "#         self._assert_match_is_invalid()", "#", "#", "# #tournament tests:", "#     def test_tournament_must_not_be_blank(self):", "#         self.match.tournament = None", "#         self._assert_match_is_invalid()", "#", "#", "# #club tests:", "#     def test_club_must_not_be_blank(self):", "#         self.match.club = None", "#         self._assert_match_is_invalid()", "#", "#", "# #round test:   -- maybe get rid of ?", "#     def test_round_can_not_be_blank(self):", "#         self.tournament.round = None", "#         self._assert_match_is_valid()", "#", "#", "#", "#     #", "#     # def test_tournament_name_must_be_unique(self):", "#     #     self.tournament.tournament_name = self.other_tournament.tournament_name", "#     #     self._assert_tournament_is_invalid()", "#     #", "#     # def test_tournament_name_must_not_be_over_50_characters(self):", "#     #     self.tournament.tournament_name = 'x' * 51", "#     #     self._assert_tournament_is_invalid()", "#     #", "#     # def test_name_can_be_50_characters(self):", "#     #     self.tournament.tournament_name = 'x' * 50", "#     #     self._assert_tournament_is_valid()", "#", "#", "# # Description Tests:", "#     # def test_short_description_can_not_be_blank(self):", "#     #     self.tournament.short_description = None", "#     #     self._assert_tournament_is_valid()", "#     #", "#     # def test_short_description_must_not_be_over_100_characters(self):", "#     #     self.tournament.short_description = 'x' * 141", "#     #     self._assert_tournament_is_invalid()", "#     #", "#     # def test_short_description_can_be_140_characters(self):", "#     #     self.tournament.short_description = 'x' * 140", "#     #     self._assert_tournament_is_valid()", "#     #", "#     # def test_short_description_need_not_be_unique(self):", "#     #     self.tournament.short_description = self.other_tournament.short_description", "#     #     self._assert_tournament_is_valid()", "#", "# # Number of participants Tests:", "#     # def test_number_of_participants_can_not_be_under_2_participants(self):", "#     #     self.tournament.number_of_participants = 1", "#     #     self._assert_tournament_is_valid()", "#     #", "#     # def test_number_of_participants_can_not_be_over_16_participants(self):", "#     #     self.tournament.number_of_participants = 17", "#     #     self._assert_tournament_is_valid()", "#     #", "#     # def test_number_of_applicants_must_not_be_blank(self):", "#     #     self.tournament.number_of_participants = None", "#     #     self._assert_tournament_is_invalid()", "#", "#", "# # Assert valid and invalid helper methods:", "#     def _assert_match_is_valid(self):", "#         try:", "#             self.match.full_clean()", "#         except (ValidationError):", "#             self.fail(\"Test match should be valid\")", "#", "#     def _assert_match_is_invalid(self):", "#         with self.assertRaises(ValidationError):", "#             self.match.full_clean()", ">>>>>>> origin"], "clubs/tests/models/test_tournament_model.py": ["        self._assert_tournament_is_invalid()"], "clubs/tests/models/test_user_model.py": ["    # def test_chess_experience_level_default_0(self):", "    #     # self.user.chess_experience_level =", "    #     self._assert_user_is_valid()", "    def test_chess_experience_level_max_value_11(self):", "        self.user.chess_experience_level = 11"], "clubs/tests/views/test_applicant_list_view.py": ["from django.conf import settings", "        self._create_test_applicants(settings.USERS_PER_PAGE-1)", "        self.assertEqual(len(response.context['applicants']), settings.USERS_PER_PAGE)", "        self.assertFalse(response.context['is_paginated'])", "        for user_id in range(settings.USERS_PER_PAGE-1):", "            ", "", "    def test_get_applicant_list_with_pagination(self):", "        self.client.login(email=self.user.email, password='Password123')", "        club = Club.objects.get(club_name='Chess Club 1')", "        self._create_test_applicants(settings.USERS_PER_PAGE*2+3-1)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'applicant_list.html')", "        self.assertEqual(len(response.context['applicants']), settings.USERS_PER_PAGE)", "        self.assertTrue(response.context['is_paginated'])", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_one_url = reverse('applicant_list', kwargs={'club_id': club.id}) + '?page=1'", "        response = self.client.get(page_one_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'applicant_list.html')", "        self.assertEqual(len(response.context['applicants']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_two_url = reverse('applicant_list', kwargs={'club_id': club.id}) + '?page=2'", "        response = self.client.get(page_two_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'applicant_list.html')", "        self.assertEqual(len(response.context['applicants']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_three_url = reverse('applicant_list', kwargs={'club_id': club.id}) + '?page=3'", "        response = self.client.get(page_three_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'applicant_list.html')", "        self.assertEqual(len(response.context['applicants']), 3)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertFalse(page_obj.has_next())"], "clubs/tests/views/test_apply_membership_toggle_view.py": ["from django.test import TestCase", "from django.urls import reverse", "from clubs.models import User, Club", "from clubs.tests.helpers import reverse_with_next", "", "class ApplyMembershipToggleTest(TestCase):", "", "    fixtures = ['clubs/tests/fixtures/default_club.json',", "                'clubs/tests/fixtures/default_user.json',", "                'clubs/tests/fixtures/other_users.json']", "", "", "    def setUp(self):", "        self.club = Club.objects.get(club_name = 'Chess Club 1')", "        self.user = User.objects.get(email='johndoe@example.org')", "        self.url = reverse('apply_membership_toggle', kwargs={'club_id': self.club.id})", "", "    def test_apply_membership_url(self):", "        self.assertEqual(f'/club/{self.club.id}/apply_membership_toggle/',self.url)", "", "    def test_get_apply_membership_toggle_redirects_when_not_logged_in(self):", "        redirect_url = reverse_with_next('log_in', self.url)", "        response = self.client.get(self.url)", "        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "    def test_get_apply_membership_toggle(self):", "        self.client.login(email=self.user.email, password='Password123')", "        applicants_before = self.club.applicants.count()", "        self.user.toggle_apply_membership(self.club)", "        response = self.client.get(self.url, follow=True)", "        applicants_after = self.club.applicants.count()", "        self.assertEqual(applicants_before+1, applicants_after)", "        response_url = reverse('show_club', kwargs={'club_id': self.club.id})", "        self.assertRedirects(response, response_url, status_code=302, target_status_code=200)", "        self.assertTemplateUsed(response, 'show_club.html')", "", "    def test_get_apply_membership_toggle_for_an_applicant(self):", "        user = User.objects.get(email='petrapickles@example.org')", "        self.club.applicants.add(user)", "        user.clubs.add(self.club)", "        self.client.login(email=user.email, password='Password123')", "        applicants_before = self.club.applicants.count()", "        user.toggle_apply_membership(self.club)", "        response = self.client.get(self.url, follow=True)", "        applicants_after = self.club.applicants.count()", "        self.assertEqual(applicants_before, applicants_after)", "        response_url = reverse('show_club', kwargs={'club_id': self.club.id})", "        self.assertRedirects(response, response_url, status_code=302, target_status_code=200)", "        self.assertTemplateUsed(response, 'show_club.html')", "", "    def test_get_apply_membeship_toggle_with_invalid_id(self):", "        self.client.login(email=self.user.email, password='Password123')", "        url = reverse('apply_membership_toggle', kwargs={'club_id': self.club.id+9999})", "        response = self.client.get(url, follow=True)", "        response_url = reverse('user_profile')", "        self.assertRedirects(response, response_url, status_code=302, target_status_code=200)", "        self.assertTemplateUsed(response, 'user_profile.html')"], "clubs/tests/views/test_apply_officer_toggle_view.py": ["from django.test import TestCase", "from django.urls import reverse", "from clubs.models import User, Club", "from clubs.tests.helpers import reverse_with_next", "", "class ApplyOfficerToggleTest(TestCase):", "", "    fixtures = ['clubs/tests/fixtures/default_club.json',", "                'clubs/tests/fixtures/default_user.json',", "                'clubs/tests/fixtures/other_users.json']", "", "", "    def setUp(self):", "        self.club = Club.objects.get(club_name = 'Chess Club 1')", "        self.user = User.objects.get(email='johndoe@example.org')", "        self.club.members.add(self.user)", "        self.user.clubs.add(self.club)", "        self.url = reverse('apply_officer_toggle', kwargs={'club_id': self.club.id})", "", "    def test_apply_officer_url(self):", "        self.assertEqual(f'/club/{self.club.id}/apply_officer_toggle/',self.url)", "", "    def test_get_apply_officer_toggle_redirects_when_not_logged_in(self):", "        redirect_url = reverse_with_next('log_in', self.url)", "        response = self.client.get(self.url)", "        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "    def test_get_apply_officer_toggle_for_a_member(self):", "        self.client.login(email=self.user.email, password='Password123')", "        members_before = self.club.members.count()", "        officers_before = self.club.officers.count()", "        officer_applicants_before = self.club.officer_applicants.count()", "        self.user.toggle_apply_membership(self.club)", "        response = self.client.get(self.url, follow=True)", "        members_after = self.club.members.count()", "        officers_after = self.club.officers.count()", "        officer_applicants_after = self.club.officer_applicants.count()", "        self.assertEqual(members_before, members_after)", "        self.assertEqual(officers_after, officers_after)", "        self.assertEqual(officer_applicants_before+1, officer_applicants_after)", "        response_url = reverse('show_club', kwargs={'club_id': self.club.id})", "        self.assertRedirects(response, response_url, status_code=302, target_status_code=200)", "        self.assertTemplateUsed(response, 'show_club.html')", "", "    def test_get_apply_officer_toggle_for_non_member(self):", "        user = User.objects.get(email='petrapickles@example.org')", "        self.club.applicants.add(user)", "        user.clubs.add(self.club)", "        self.client.login(email=user.email, password='Password123')", "        applicants_before = self.club.applicants.count()", "        officers_before = self.club.officers.count()", "        officer_applicants_before = self.club.officer_applicants.count()", "        user.toggle_apply_membership(self.club)", "        response = self.client.get(self.url, follow=True)", "        applicants_after = self.club.applicants.count()", "        officers_after = self.club.officers.count()", "        officer_applicants_after = self.club.officer_applicants.count()", "        self.assertEqual(applicants_before, applicants_after)", "        self.assertEqual(officers_after, officers_after)", "        self.assertEqual(officer_applicants_before, officer_applicants_after)", "        response_url = reverse('show_club', kwargs={'club_id': self.club.id})", "        self.assertRedirects(response, response_url, status_code=302, target_status_code=200)", "        self.assertTemplateUsed(response, 'show_club.html')", "", "    def test_get_apply_officer_toggle_with_invalid_club_id(self):", "        self.client.login(email=self.user.email, password='Password123')", "        url = reverse('apply_officer_toggle', kwargs={'club_id': self.club.id+9999})", "        response = self.client.get(url, follow=True)", "        response_url = reverse('user_profile')", "        self.assertRedirects(response, response_url, status_code=302, target_status_code=200)", "        self.assertTemplateUsed(response, 'user_profile.html')"], "clubs/tests/views/test_approve_officer_toggle_view.py": ["from django.test import TestCase", "from django.urls import reverse", "from clubs.models import User, Club", "from clubs.tests.helpers import reverse_with_next", "", "class ApproveMemberToOfficerToggleTest(TestCase):", "", "    fixtures = ['clubs/tests/fixtures/default_club.json',", "                'clubs/tests/fixtures/default_user.json',", "                'clubs/tests/fixtures/other_users.json']", "", "", "    def setUp(self):", "        self.club = Club.objects.get(club_name = 'Chess Club 1')", "        self.user = User.objects.get(email='johndoe@example.org')", "        self.member = User.objects.get(email='janedoe@example.org')", "        self.club.members.add(self.member)", "        self.club.officer_applicants.add(self.member)", "        self.user.clubs.add(self.club)", "        self.member.clubs.add(self.club)", "        self.url = reverse('approve_member_to_officer_toggle', kwargs={'club_id': self.club.id, 'user_id': self.member.id})", "", "    def test_approve_member_to_officer_toggle_url(self):", "        self.assertEqual(self.url, f'/club/{self.club.id}/approve_member_to_officer_toggle/{self.member.id}')", "", "    def test_get_approve_member_to_officer_toggle_redirects_when_not_logged_in(self):", "        redirect_url = reverse_with_next('log_in', self.url)", "        response = self.client.get(self.url)", "        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "    def test_get_approve_member_to_officer_toggle_redirects_when_not_a_club_owner(self):", "        user = User.objects.get(email='petrapickles@example.org')", "        self.client.login(email=user.email, password='Password123')", "        redirect_url = reverse('show_club', kwargs={'club_id': self.club.id})", "        response = self.client.get(self.url, follow=True)", "        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "    def test_get_approve_member_to_officer_toggle_for_member_applicant(self):", "        self.client.login(email=self.user.email, password='Password123')", "        members_before = self.club.members.count()", "        officers_before = self.club.officers.count()", "        officer_applicants_before = self.club.officer_applicants.count()", "        self.user.toggle_approve_member_to_officer(self.member, self.club)", "        response = self.client.get(self.url, follow=True)", "        members_after = self.club.members.count()", "        officers_after = self.club.officers.count()", "        officer_applicants_after = self.club.officer_applicants.count()", "        self.assertEqual(members_before, members_after+1)", "        self.assertEqual(officers_before+1, officers_after)", "        self.assertEqual(officer_applicants_before, officer_applicants_after+1)", "        response_url = reverse('officer_applicant_list', kwargs={'club_id': self.club.id})", "        self.assertRedirects(response, response_url, status_code=302, target_status_code=200)", "        self.assertTemplateUsed(response, 'officer_applicant_list.html')", "", "    def test_get_approve_member_to_officer_toggle_for_non_member_applicant(self):", "        self.client.login(email=self.user.email, password='Password123')", "        user = User.objects.get(email='petrapickles@example.org')", "        members_before = self.club.members.count()", "        officers_before = self.club.officers.count()", "        officer_applicants_before = self.club.officer_applicants.count()", "        self.user.toggle_approve_member_to_officer(user, self.club)", "        url = reverse('approve_member_to_officer_toggle', kwargs={'club_id': self.club.id, 'user_id': user.id})", "        response = self.client.get(url, follow=True)", "        members_after = self.club.members.count()", "        officers_after = self.club.officers.count()", "        officer_applicants_after = self.club.officer_applicants.count()", "        self.assertEqual(members_before, members_after)", "        self.assertEqual(officers_before, officers_after)", "        self.assertEqual(officer_applicants_before, officer_applicants_after)", "        response_url = reverse('officer_applicant_list', kwargs={'club_id': self.club.id})", "        self.assertRedirects(response, response_url, status_code=302, target_status_code=200)", "        self.assertTemplateUsed(response, 'officer_applicant_list.html')", "", "    def test_get_approve_member_to_officer_toggle_with_invalid_id(self):", "        self.client.login(email=self.user.email, password='Password123')", "        url = reverse('approve_member_to_officer_toggle', kwargs={'club_id': self.club.id, 'user_id': self.user.id+9999})", "        response = self.client.get(url, follow=True)", "        response_url = reverse('officer_applicant_list', kwargs={'club_id': self.club.id})", "        self.assertRedirects(response, response_url, status_code=302, target_status_code=200)", "        self.assertTemplateUsed(response, 'officer_applicant_list.html')"], "clubs/tests/views/test_approve_toggle_view.py": ["        redirect_url = reverse('show_club', kwargs={'club_id': self.club.id})"], "clubs/tests/views/test_cancel_toggle_view.py": ["<<<<<<< HEAD", "=======", ">>>>>>> origin", "<<<<<<< HEAD", "=======", ">>>>>>> origin", "<<<<<<< HEAD", "=======", "        redirect_url = reverse('show_club', kwargs={'club_id': self.club.id})", ">>>>>>> origin"], "clubs/tests/views/test_co_organiser_list_view.py": ["        self.url = reverse('co_organiser_list', kwargs={'club_id': self.club.id, 'tournament_id':self.tournament.id})"], "clubs/tests/views/test_create_club_view.py": ["        response_url = reverse('show_club', kwargs={'club_id': new_club.id})", "        self.assertTemplateUsed(response, 'show_club.html')"], "clubs/tests/views/test_demote_toggle_view.py": ["        redirect_url = reverse('show_club', kwargs={'club_id': self.club.id})"], "clubs/tests/views/test_generate_match_view.py": ["            status_code=302, target_status_code=200, fetch_redirect_response=True)", "        redirect_url = reverse('show_club', kwargs={'club_id': self.club.id})", "        redirect_url = reverse('show_club', kwargs={'club_id': self.club.id})"], "clubs/tests/views/test_generate_next_matches_view.py": ["        redirect_url = reverse('show_club', kwargs={'club_id': self.club.id})"], "clubs/tests/views/test_member_list_for_members_view.py": ["from django.conf import settings", "        self._create_test_members(settings.USERS_PER_PAGE-1)", "        self.assertEqual(len(response.context['members']), settings.USERS_PER_PAGE)", "        for user_id in range(settings.USERS_PER_PAGE-1):", "    def test_get_member_list_with_pagination(self):", "        self.client.login(email=self.user.email, password='Password123')", "        club = Club.objects.get(club_name='Chess Club 1')", "        self._create_test_members(settings.USERS_PER_PAGE*2+3-1)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_members.html')", "        self.assertEqual(len(response.context['members']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_one_url = reverse('member_list_for_members', kwargs={'club_id': club.id}) + '?page=1'", "        response = self.client.get(page_one_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_members.html')", "        self.assertEqual(len(response.context['members']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_two_url = reverse('member_list_for_members', kwargs={'club_id': club.id}) + '?page=2'", "        response = self.client.get(page_two_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_members.html')", "        self.assertEqual(len(response.context['members']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_three_url = reverse('member_list_for_members', kwargs={'club_id': club.id}) + '?page=3'", "        response = self.client.get(page_three_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_members.html')", "        self.assertEqual(len(response.context['members']), 3)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertFalse(page_obj.has_next())"], "clubs/tests/views/test_member_list_for_staff_view.py": ["from django.conf import settings", "    def test_get_member_list_for_staff(self):", "        self._create_test_members(settings.USERS_PER_PAGE)", "        self.assertEqual(len(response.context['members']), settings.USERS_PER_PAGE)", "        self.assertFalse(response.context['is_paginated'])", "        for user_id in range(settings.USERS_PER_PAGE):", "            self.assertContains(response, f'First{user_id}')", "            self.assertContains(response, f'Last{user_id}')", "            user = User.objects.get(username=f'user{user_id}@test.org')", "            user_url = reverse('show_user', kwargs={'user_id': user.id})", "            self.assertContains(response, user_url)", "    def test_get_member_list_with_pagination(self):", "        self.client.login(email=self.user.email, password='Password123')", "        club = Club.objects.get(club_name='Chess Club 1')", "        self._create_test_members(settings.USERS_PER_PAGE*2+3)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_staff.html')", "        self.assertEqual(len(response.context['members']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_one_url = reverse('member_list_for_staff', kwargs={'club_id': club.id}) + '?page=1'", "        response = self.client.get(page_one_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_staff.html')", "        self.assertEqual(len(response.context['members']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_two_url = reverse('member_list_for_staff', kwargs={'club_id': club.id}) + '?page=2'", "        response = self.client.get(page_two_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_staff.html')", "        self.assertEqual(len(response.context['members']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_three_url = reverse('member_list_for_staff', kwargs={'club_id': club.id}) + '?page=3'", "        response = self.client.get(page_three_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_staff.html')", "        self.assertEqual(len(response.context['members']), 3)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertFalse(page_obj.has_next())", "                username=f'user{user_id}@test.org',"], "clubs/tests/views/test_officer_applicant_list_view.py": ["from django.test import TestCase", "from django.urls import reverse", "from clubs.models import User, Club", "from clubs.tests.helpers import reverse_with_next", "from django.contrib.auth import authenticate", "from django.conf import settings", "", "class OfficerApplicantListTest(TestCase):", "", "    fixtures = ['clubs/tests/fixtures/default_club.json',", "                'clubs/tests/fixtures/default_user.json']", "", "    def setUp(self):", "        self.user = User.objects.get(email='johndoe@example.org')", "        self.club = Club.objects.get(club_name = 'Chess Club 1')", "        self.user.clubs.add(self.club)", "        self.url = reverse('officer_applicant_list', kwargs={'club_id': self.club.id})", "", "    def test_user_list_url(self):", "        self.assertEqual(f'/club/{self.club.id}/officer_applicants/',self.url)", "", "    def test_get_officer_applicant_list_redirects_when_not_logged_in(self):", "         redirect_url = reverse_with_next('log_in', self.url)", "         response = self.client.get(self.url)", "         self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "    def test_get_officer_applicant_list(self):", "        self.client.login(email=self.user.email, password='Password123')", "        self._create_test_officer_applicants(settings.USERS_PER_PAGE)", "        print(self.club.officers.all())", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_applicant_list.html')", "        self.assertEqual(len(response.context['officer_applicants']), settings.USERS_PER_PAGE)", "        self.assertFalse(response.context['is_paginated'])", "        for user_id in range(settings.USERS_PER_PAGE):", "            self.assertContains(response,f'user{user_id}@test.org')", "            self.assertContains(response, f'First{user_id}')", "            self.assertContains(response, f'Last{user_id}')", "            user = User.objects.get(username=f'user{user_id}@test.org')", "            user_url = reverse('show_user', kwargs={'user_id': user.id})", "            self.assertContains(response, user_url)", "", "    def test_get_officer_applicant_list_with_pagination(self):", "        self.client.login(email=self.user.email, password='Password123')", "        club = Club.objects.get(club_name='Chess Club 1')", "        self._create_test_officer_applicants(settings.USERS_PER_PAGE*2+3)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_applicant_list.html')", "        self.assertEqual(len(response.context['officer_applicants']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_one_url = reverse('officer_applicant_list', kwargs={'club_id': club.id}) + '?page=1'", "        response = self.client.get(page_one_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_applicant_list.html')", "        self.assertEqual(len(response.context['officer_applicants']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_two_url = reverse('officer_applicant_list', kwargs={'club_id': club.id}) + '?page=2'", "        response = self.client.get(page_two_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_applicant_list.html')", "        self.assertEqual(len(response.context['officer_applicants']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_three_url = reverse('officer_applicant_list', kwargs={'club_id': club.id}) + '?page=3'", "        response = self.client.get(page_three_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_applicant_list.html')", "        self.assertEqual(len(response.context['officer_applicants']), 3)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertFalse(page_obj.has_next())", "", "    def test_get_user_list_redirects_when_not_logged_in(self):", "          redirect_url = reverse_with_next('log_in', self.url)", "          response = self.client.get(self.url)", "          self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "    def _create_test_officer_applicants(self, user_count=10):", "        for user_id in range(user_count):", "            user = User.objects.create_user(", "                username = f'user{user_id}@test.org',", "                first_name=f'First{user_id}',", "                last_name=f'Last{user_id}',", "                email=f'user{user_id}@test.org',", "                password='Password123',", "                public_bio= \"My bio\",", "                chess_experience_level= 1,", "                short_personal_statement= \"I love chess.\" )", "            self.club.officer_applicants.add(user)", "            user.clubs.add(self.club)"], "clubs/tests/views/test_officer_list_view.py": ["from django.conf import settings", "                'clubs/tests/fixtures/default_user.json',", "                'clubs/tests/fixtures/other_users.json']", "    def test_get_officer_list_url(self):", "        self.assertEqual(f'/club/{self.club.id}/officers/', self.url)", "    def test_get_transfer_toggle_redirects_when_not_an_owner(self):", "        user = User.objects.get(email='petrapickles@example.org')", "        self.client.login(email=user.email, password='Password123')", "        redirect_url = reverse('show_club', kwargs={'club_id': self.club.id})", "        response = self.client.get(self.url, follow=True)", "        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "        self._create_test_officers(settings.USERS_PER_PAGE)", "        self.assertEqual(len(response.context['officers']), settings.USERS_PER_PAGE)", "        self.assertFalse(response.context['is_paginated'])", "        for user_id in range(settings.USERS_PER_PAGE):", "            self.assertContains(response, f'First{user_id}')", "            self.assertContains(response, f'Last{user_id}')", "            user = User.objects.get(username=f'user{user_id}@test.org')", "            user_url = reverse('show_user', kwargs={'user_id': user.id})", "            self.assertContains(response, user_url)", "    def test_get_officer_list_with_pagination(self):", "        self.client.login(email=self.user.email, password='Password123')", "        club = Club.objects.get(club_name='Chess Club 1')", "        self._create_test_officers(settings.USERS_PER_PAGE*2+3)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_list.html')", "        self.assertEqual(len(response.context['officers']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_one_url = reverse('officer_list', kwargs={'club_id': club.id}) + '?page=1'", "        response = self.client.get(page_one_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_list.html')", "        self.assertEqual(len(response.context['officers']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_two_url = reverse('officer_list', kwargs={'club_id': club.id}) + '?page=2'", "        response = self.client.get(page_two_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_list.html')", "        self.assertEqual(len(response.context['officers']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_three_url = reverse('officer_list', kwargs={'club_id': club.id}) + '?page=3'", "        response = self.client.get(page_three_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_list.html')", "        self.assertEqual(len(response.context['officers']), 3)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertFalse(page_obj.has_next())"], "clubs/tests/views/test_password_view.py": ["            'old_password': 'Password123',", "    def test_post_profile_redirects_when_not_logged_in(self):", "        redirect_url = reverse_with_next('log_in', self.url)", "        response = self.client.post(self.url, self.form_input)", "        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "        is_password_correct = check_password('Password123', self.user.password)", "        self.assertTrue(is_password_correct)", "", "    def test_password_change_unsuccesful_with_incorrect_old_password(self):", "        self.form_input['old_password'] = 'WrongPassword123'", "    def test_password_change_unsuccesful_without_password_confirmation(self):", "        self.client.login(email=self.user.email, password='Password123')", "        self.form_input['password_confirmation'] = 'WrongPassword123'", "        response = self.client.post(self.url, self.form_input, follow=True)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'password.html')", "        form = response.context['form']", "        self.assertTrue(isinstance(form, PasswordForm))", "        self.user.refresh_from_db()"], "clubs/tests/views/test_profile_view.py": ["    def test_unsuccessful_profile_update_due_to_duplicate_email(self):"], "clubs/tests/views/test_promote_toggle_view.py": ["        redirect_url = reverse('show_club', kwargs={'club_id': self.club.id})"], "clubs/tests/views/test_show_clubs_view.py": ["        self.assertEqual(f'/club/{self.club.id}',self.url)"], "clubs/tests/views/test_sign_up_toggle_view.py": ["        redirect_url = reverse('show_club', kwargs={'club_id': self.club.id})"], "clubs/tests/views/test_tournament_joined_view.py": ["from django.test import TestCase", "from django.urls import reverse", "from clubs.models import User, Club, Tournament", "from clubs.tests.helpers import reverse_with_next", "from django.contrib.auth import authenticate", "from django.conf import settings", "", "class TournamentJoinedTest(TestCase):", "", "    fixtures = ['clubs/tests/fixtures/default_user.json',", "                'clubs/tests/fixtures/other_users.json',", "                'clubs/tests/fixtures/default_tournament.json',", "                'clubs/tests/fixtures/other_tournaments.json',", "                'clubs/tests/fixtures/default_club.json',", "                'clubs/tests/fixtures/other_clubs.json'", "                ]", "", "    def setUp(self):", "        super(TestCase, self).setUp()", "        self.user = User.objects.get(username='johndoe@example.org')", "        self.club = Club.objects.get(club_name = 'Chess Club 1')", "        self.tournament = Tournament.objects.get(tournament_name=\"Tournament 1\")", "        self.url = reverse('tournament_joined', kwargs={'club_id': self.club.id})", "", "    def test_tournament_joined_url(self):", "        self.assertEqual(f'/club/{self.club.id}/tournament_joined/',self.url)", "", "    def test_get_tournament_joined_redirects_when_not_logged_in(self):", "         redirect_url = reverse_with_next('log_in', self.url)", "         response = self.client.get(self.url)", "         self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "    def test_get_tournament_joined(self):", "        self.client.login(email=self.user.email, password='Password123')", "        self._create_test_tournaments(settings.TOURNAMENTS_PER_PAGE)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_joined.html')", "        self.assertEqual(len(response.context['tournament_joined']), settings.TOURNAMENTS_PER_PAGE)", "        for tournament_id in range(settings.TOURNAMENTS_PER_PAGE-1):", "            self.assertContains(response,f'tournament_name{tournament_id}')", "", "    def test_get_tournament_joined_with_pagination(self):", "        self.client.login(email=self.user.email, password='Password123')", "        club = Club.objects.get(club_name='Chess Club 1')", "        self._create_test_tournaments(settings.USERS_PER_PAGE*2+3)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_joined.html')", "        self.assertEqual(len(response.context['tournament_joined']), settings.TOURNAMENTS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_one_url = reverse('tournament_joined', kwargs={'club_id': club.id}) + '?page=1'", "        response = self.client.get(page_one_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_joined.html')", "        self.assertEqual(len(response.context['tournament_joined']), settings.TOURNAMENTS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_two_url = reverse('tournament_joined', kwargs={'club_id': club.id}) + '?page=2'", "        response = self.client.get(page_two_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_joined.html')", "        self.assertEqual(len(response.context['tournament_joined']), settings.TOURNAMENTS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_three_url = reverse('tournament_joined', kwargs={'club_id': club.id}) + '?page=3'", "        response = self.client.get(page_three_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_joined.html')", "        self.assertEqual(len(response.context['tournament_joined']), 3)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertFalse(page_obj.has_next())", "", "    def _create_test_tournaments(self, tournament_count=10):", "        for tournament_id in range(tournament_count):", "            club = Club.objects.get(id=1)", "            tournament = Tournament.objects.create(", "                tournament_name = f'tournament_name{tournament_id}',", "                short_description=\"this is a new tournament\",", "                number_of_participants=tournament_count,", "                club = club", "                )", "            self.user.tournaments.add(tournament)"], "clubs/tests/views/test_tournament_list_view.py": ["from django.test import TestCase", "from django.urls import reverse", "from clubs.models import User, Club, Tournament", "from clubs.tests.helpers import reverse_with_next", "from django.contrib.auth import authenticate", "from django.conf import settings", "", "class TournamentListTest(TestCase):", "", "    fixtures = ['clubs/tests/fixtures/default_user.json',", "                'clubs/tests/fixtures/other_users.json',", "                'clubs/tests/fixtures/default_tournament.json',", "                'clubs/tests/fixtures/other_tournaments.json',", "                'clubs/tests/fixtures/default_club.json',", "                'clubs/tests/fixtures/other_clubs.json'", "                ]", "", "    def setUp(self):", "        super(TestCase, self).setUp()", "        self.user = User.objects.get(username='johndoe@example.org')", "        self.club = Club.objects.get(club_name = 'Chess Club 1')", "        self.tournament = Tournament.objects.get(tournament_name=\"Tournament 1\")", "        self.url = reverse('tournament_list', kwargs={'club_id': self.club.id})", "", "", "    def test_tournament_list_url(self):", "        self.assertEqual(f'/club/{self.club.id}/tournaments/',self.url)", "", "    def test_get_tournament_list_redirects_when_not_logged_in(self):", "         redirect_url = reverse_with_next('log_in', self.url)", "         response = self.client.get(self.url)", "         self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "    def test_get_tournament_list(self):", "        self.client.login(email=self.user.email, password='Password123')", "        self._create_test_tournaments(settings.TOURNAMENTS_PER_PAGE)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_list.html')", "        self.assertEqual(len(response.context['tournaments']), settings.TOURNAMENTS_PER_PAGE)", "        for tournament_id in range(settings.TOURNAMENTS_PER_PAGE-1):", "            self.assertContains(response,f'tournament_name{tournament_id}')", "", "    def test_get_tournament_list_with_pagination(self):", "        self.client.login(email=self.user.email, password='Password123')", "        club = Club.objects.get(club_name='Chess Club 1')", "        self._create_test_tournaments(settings.USERS_PER_PAGE*2+3)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_list.html')", "        self.assertEqual(len(response.context['tournaments']), settings.TOURNAMENTS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_one_url = reverse('tournament_list', kwargs={'club_id': club.id}) + '?page=1'", "        response = self.client.get(page_one_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_list.html')", "        self.assertEqual(len(response.context['tournaments']), settings.TOURNAMENTS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_two_url = reverse('tournament_list', kwargs={'club_id': club.id}) + '?page=2'", "        response = self.client.get(page_two_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_list.html')", "        self.assertEqual(len(response.context['tournaments']), settings.TOURNAMENTS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_three_url = reverse('tournament_list', kwargs={'club_id': club.id}) + '?page=3'", "        response = self.client.get(page_three_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_list.html')", "        self.assertEqual(len(response.context['tournaments']), 3)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertFalse(page_obj.has_next())", "", "    def _create_test_tournaments(self, tournament_count=10):", "        for tournament_id in range(tournament_count):", "            club = Club.objects.get(id=1)", "            tournament = Tournament.objects.create(", "                tournament_name = f'tournament_name{tournament_id}',", "                short_description=\"this is a new tournament\",", "                number_of_participants=tournament_count,", "                club = club", "                )", "            self.club.tournaments.add(tournament)"], "clubs/tests/views/test_transfer_toggle_view.py": ["                'clubs/tests/fixtures/other_users.json']", "        redirect_url = reverse('show_club', kwargs={'club_id': self.club.id})", "        response_url = reverse('show_club', kwargs={'club_id': self.club.id})", "        self.assertTemplateUsed(response, 'show_club.html')"], "clubs/tests/views/test_withdraw_toggle_view.py": ["        redirect_url = reverse('show_club', kwargs={'club_id': self.club.id})"], "clubs/views.py": ["# from django.contrib import messages", "# from django.shortcuts import render, redirect", "# from .forms import SignUpForm, LogInForm, UserForm, PasswordForm, ClubForm, TournamentForm", "# from django.core.exceptions import ObjectDoesNotExist", "# from django.contrib.auth import authenticate, login, logout", "# from django.contrib.auth.decorators import login_required", "# from django.contrib.auth.models import Group", "# from .models import User, Club, Tournament, Match", "# from .helpers import login_prohibited, member_only, staff_only, owner_only, organiser_only", "# from django.http import HttpResponseForbidden", "# from django.utils import timezone", "# import random", "# from django.contrib.auth.hashers import check_password", "#", "# def home(request):", "#     return render(request, 'home.html')", "#", "#", "# @login_required", "# def user_profile(request):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     return render(request, 'user_profile.html',", "#                     {'current_user': current_user,", "#                      'clubs': clubs,", "#                     }", "#                  )", "#", "# @login_prohibited", "# def sign_up(request):", "#     if request.method == 'POST':", "#         form = SignUpForm(request.POST)", "#         if form.is_valid():", "#             user = form.save()", "#             applicants, created = Group.objects.get_or_create(name = 'applicants')", "#             applicants.user_set.add(user)", "#             login(request, user)", "#             return redirect('user_profile')", "#     else:", "#         form = SignUpForm()", "#     return render(request, 'sign_up.html', {'form': form})", "#", "# @login_required", "# @member_only", "# def member_list_for_members(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     members = current_club.members.all()", "#     return render(request, 'member_list_for_members.html',", "#                     {'members': members,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club", "#                     }", "#                  )", "#", "# @login_required", "# @staff_only", "# def member_list_for_staff(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     members = current_club.members.all()", "#     return render(request, 'member_list_for_staff.html',", "#                     {'members': members,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club", "#                     }", "#                  )", "#", "# @login_required", "# @staff_only", "# def applicant_list(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     applicants = current_club.applicants.all()", "#     return render(request, 'applicant_list.html',", "#                     {'applicants': applicants,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club", "#                     }", "#                  )", "#", "# @login_required", "# # @owner_only", "# def officer_list(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     officers = current_club.officers.all()", "#     return render(request, 'officer_list.html',", "#                     {'officers': officers,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club", "#                     }", "#                  )", "#", "# @login_required", "# def show_user(request, user_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     try:", "#         user = User.objects.get(id=user_id)", "#     except ObjectDoesNotExist:", "#         return redirect('user_profile')", "#     else:", "#         return render(request, 'show_user.html',", "#             {'user': user,", "#              'current_user': current_user,", "#              'clubs': clubs,", "#             }", "#         )", "#", "# @login_prohibited", "# def log_in(request):", "#     if request.method == 'POST':", "#         form = LogInForm(request.POST)", "#         if form.is_valid():", "#             email = form.cleaned_data.get('email')", "#             password = form.cleaned_data.get('password')", "#             user = authenticate(email=email, password=password)", "#             if user is not None:", "#                 login(request, user)", "#                 return redirect('user_profile')", "#         messages.add_message(request, messages.ERROR, \"The credentials provided were invalid!\")", "#     form = LogInForm()", "#     return render(request, 'log_in.html', {'form': form})", "#", "# def log_out(request):", "#     logout(request)", "#     return redirect('home')", "#", "# @login_required", "# def profile(request):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     if request.method == 'POST':", "#         form = UserForm(instance=current_user, data=request.POST)", "#         if form.is_valid():", "#             messages.add_message(request, messages.SUCCESS, \"Profile updated!\")", "#             form.save()", "#             return redirect('user_profile')", "#     else:", "#         form = UserForm(instance=current_user)", "#     return render(request, 'profile.html',", "#                     {'form': form,", "#                      'current_user': current_user,", "#                      'clubs': clubs}", "#                  )", "#", "# @login_required", "# def password(request):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     if request.method == 'POST':", "#         form = PasswordForm(data=request.POST)", "#         if form.is_valid():", "#             password = form.cleaned_data.get('password')", "#             if check_password(password, current_user.password):", "#                 new_password = form.cleaned_data.get('new_password')", "#                 current_user.set_password(new_password)", "#                 current_user.save()", "#                 login(request, current_user)", "#                 messages.add_message(request, messages.SUCCESS, \"Password updated!\")", "#                 return redirect('user_profile')", "#     form = PasswordForm()", "#     return render(request, 'password.html',", "#                     {'form': form,", "#                      'current_user': current_user,", "#                      'clubs': clubs}", "#                  )", "#", "#", "# @login_required", "# @staff_only", "# def approve_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_approve(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('applicant_list', club_id)", "#     else:", "#         return redirect('applicant_list', club_id)", "#", "#", "# @login_required", "# @staff_only", "# def cancel_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_cancel(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('member_list_for_staff', club_id)", "#     else:", "#         return redirect('member_list_for_staff', club_id)", "#", "# @login_required", "# def promote_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_promote(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('member_list_for_staff', club_id)", "#     else:", "#         return redirect('member_list_for_staff', club_id)", "#", "# @login_required", "# @owner_only", "# def demote_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_demote(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('officer_list', club_id)", "#     else:", "#         return redirect('officer_list', club_id)", "#", "# @login_required", "# @owner_only", "# def transfer_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_transfer(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('officer_list', club_id)", "#     else:", "#         return redirect('officer_list', club_id)", "#", "#", "# @login_required", "# def create_club(request, user_id):", "#     if request.method == 'POST':", "#         if request.user.is_authenticated:", "#             current_user = request.user", "#             form = ClubForm(request.POST)", "#             if form.is_valid():", "#                 club_name = form.cleaned_data.get('club_name')", "#                 location = form.cleaned_data.get('location')", "#                 description = form.cleaned_data.get('description')", "#                 club = Club.objects.create(club_owner = current_user, club_name = club_name, location = location, description = description)", "#                 club.club_owner.clubs.add(club)", "#                 # club.officers.add(user)", "#                 return redirect('user_profile')", "#             else:", "#                 return render(request, 'create_club.html', {'form': form, 'current_user': current_user})", "#         else:", "#             return redirect('log_in')", "#     else:", "#         # return HttpResponseForbidden()", "#         form = ClubForm()", "#         current_user = request.user", "#     return render(request, 'create_club.html', {'form': form, 'current_user': current_user})", "#", "# @login_required", "# @staff_only", "# def create_tournament(request, club_id):", "#     clubs = Club.objects.all()", "#     current_club = Club.objects.get(id=club_id)", "#     if request.method == 'POST':", "#         if request.user.is_authenticated:", "#             current_user = request.user", "#", "#             form = TournamentForm(request.POST)", "#             if form.is_valid():", "#                 tournament_name = form.cleaned_data.get('tournament_name')", "#                 short_description = form.cleaned_data.get('short_description')", "#                 number_of_participants = form.cleaned_data.get('number_of_participants')", "#                 deadline = form.cleaned_data.get('deadline')", "#                 start_time = form.cleaned_data.get('start_time')", "#                 tournament = Tournament.objects.create(tournament_name = tournament_name,", "#                                                         short_description = short_description,", "#                                                         number_of_participants = number_of_participants,", "#                                                         club = current_club,", "#                                                         deadline = deadline,", "#                                                         start_time = start_time)", "#                 tournament.organisers.add(current_user)", "#                 current_club.tournaments.add(tournament)", "#                 current_club.tournament_list.add(tournament)", "#                 return redirect('tournament_list', club_id)", "#             else:", "#                 return render(request, 'create_tournament.html',", "#                                 {'form': form,", "#                                  'current_user': current_user,", "#                                  'current_club': current_club,", "#                                  'clubs': clubs", "#                                 }", "#                             )", "#         else:", "#             return redirect('log_in')", "#     else:", "#         form = TournamentForm()", "#         current_user = request.user", "#     return render(request, 'create_tournament.html',", "#                     {'form': form,", "#                      'current_user': current_user,", "#                      'current_club': current_club,", "#                      'clubs': clubs", "#                     }", "#                 )", "#", "# @login_required", "# def show_club(request, club_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     now = timezone.now", "#     try:", "#         current_club = Club.objects.get(id=club_id)", "#         tournaments = current_club.tournaments.all()", "#     except ObjectDoesNotExist:", "#         return redirect('user_profile')", "#     else:", "#         return render(request, 'show_club.html',", "#             {'current_club': current_club,", "#              'current_user': current_user,", "#              'clubs': clubs,", "#              'tournaments': tournaments,", "#              'now': now", "#             }", "#         )", "#", "# @login_required", "# def apply_membership(request, club_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     try:", "#         current_club = Club.objects.get(id=club_id)", "#         current_club.applicants.add(current_user)", "#         current_user.clubs.add(current_club)", "#     except ObjectDoesNotExist:", "#         return redirect('user_profile')", "#     else:", "#         return render(request, 'show_club.html',", "#             {'current_club': current_club,", "#              'current_user': current_user,", "#              'clubs': clubs", "#             }", "#         )", "#", "# @login_required", "# def edit_tournament_info(request, club_id, tournament_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     current_club = Club.objects.get(id=club_id)", "#     current_tournament = Tournament.objects.get(id=tournament_id)", "#     if request.method == 'POST':", "#         form = TournamentForm(data = request.POST, instance=current_tournament)", "#         if form.is_valid():", "#             messages.add_message(request, messages.SUCCESS, \"Successfully updated!\")", "#             form.save()", "#             return redirect('tournament_list', club_id)", "#     else:", "#         form = TournamentForm(instance = current_tournament)", "#     return render(request, 'edit_tournament_info.html',", "#                     {'form': form,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club,", "#                      'current_tournament': current_tournament", "#                     }", "#                  )", "#", "#", "#", "#", "# @login_required", "# @staff_only", "# @organiser_only", "# def co_organise(request, club_id, tournament_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     current_club = Club.objects.get(id=club_id)", "#     officers = current_club.officers.all()", "#     current_tournament = Tournament.objects.get(id=tournament_id)", "#     organisers = current_tournament.organisers.all()", "#     return render(request, 'co_organiser_list.html',", "#                     {'officers': officers,", "#                      'organisers': organisers,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club,", "#                      'tournament': current_tournament", "#                     }", "#                  )", "#", "# @login_required", "# @staff_only", "# @organiser_only", "# def co_organise_toggle(request, club_id, tournament_id, user_id):", "#     try:", "#         current_user = request.user", "#         user =  User.objects.get(id=user_id)", "#         current_club = Club.objects.get(id=club_id)", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#         current_tournament.organisers.add(user)", "#     except ObjectDoesNotExist:", "#         return redirect('co_organise', club_id, tournament_id)", "#     else:", "#         return redirect('co_organise', club_id, tournament_id)", "#", "#", "# @login_required", "# def tournament_list(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     tournaments = current_club.tournaments.all()", "#", "# #THIS IS MORE MATCHES - FARIHA WAS TESTING WITH IT --- KEEP FOR NOW PLEASE!!!", "#     # tournament_list = current_club.tournament_list.all()", "#     # for t in tournament_list:", "#     #     t.all_winners_list.clear()", "#     #     t.winners_list.clear()", "#     #     t.tournament_winner = None", "#     #     print(t.tournament_winner)", "#     #     t.matches_list.clear()", "#     #     t.all_matches_list.clear()", "#     #     if t.tournament_winner:", "#     #         t.tournament_winner = None", "#     #         t.save()", "#     #     t.save()", "#", "#", "#     now = timezone.now", "#     return render(request, 'tournament_list.html',", "#                     {'tournaments': tournaments,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club,", "#                      'now': now,", "#                     }", "#                  )", "#", "# @login_required", "# @member_only", "# def tournament_joined(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     tournament_joined = current_user.tournaments.all()", "#     now = timezone.now", "#     return render(request, 'tournament_joined.html',", "#                     {'tournament_joined': tournament_joined,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club,", "#                      'now': now,", "#                     }", "#                  )", "#", "# @login_required", "# @member_only", "# def show_tournament(request, tournament_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     try:", "#         tournament = Tournament.objects.get(id=tournament_id)", "#     except ObjectDoesNotExist:", "#         return redirect('user_profile')", "#     else:", "#         return render(request, 'show_tournament.html',", "#             {'tournament': tournament,", "#              'current_user': current_user,", "#              'clubs': clubs,", "#             }", "#         )", "# #", "# @login_required", "# @member_only", "# def sign_up_toggle(request, tournament_id, club_id):", "#     current_user = request.user", "#     try:", "#         tournament = Tournament.objects.get(id=tournament_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_sign_up(tournament, club)", "#     except ObjectDoesNotExist:", "#         return redirect('tournament_list', club_id)", "#     else:", "#         return redirect('tournament_list', club_id)", "#", "#", "# @login_required", "# @member_only", "# def withdraw_toggle(request, tournament_id, club_id):", "#     current_user = request.user", "#     try:", "#         tournament = Tournament.objects.get(id=tournament_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_withdraw(tournament, club)", "#     except ObjectDoesNotExist:", "#         return redirect('tournament_joined', club_id)", "#     else:", "#         return redirect('tournament_joined', club_id)", "#", "#", "#", "#", "#", "#", "#", "# @login_required", "# @organiser_only", "# def generate_matches(request, tournament_id, club_id):", "#     try:", "#         clubs = Club.objects.all()", "#         current_user = request.user", "#         current_club = Club.objects.get(id=club_id)", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#", "# # THIS IS MORE MATCHES - FARIHA WAS TESTING WITH IT --- KEEP FOR NOW PLEASE!!!", "# #         Match.objects.all().delete()", "#         # current_tournament.matches_list.clear()", "#         # current_tournament.winners_list.clear()", "#         # tournament = Tournament.objects.all()", "# #         --^^^ USE THIS AFTER CLICKING 'GENERATE_MATCHES', THEN COMMENT OUT AGAIN", "# #         USE IT TO CLEAR THE WINNERS FOR A TOURNAMENT - FOR DEV PURPOSES", "#         current_tournament.tournament_winner= None", "#         current_tournament.current_participants.clear()", "#         current_tournament.removed_participants.clear()", "#", "#         all_participants_list = current_tournament.participants_list.all()", "#         participants_list_count = len(all_participants_list)", "#         previous_power_of_two = current_tournament.power_Of_Two(participants_list_count)", "#         current_tournament.make_Participants_Power_Of_2(previous_power_of_two)", "#         #Change current participants list to include the highest power of 2 number of particpants", "#         # - if number of particpants is not a power of 2", "#         participants_list = current_tournament.current_participants.all()", "#         matches_list = current_tournament.matches_list.all()", "#         winners_list = current_tournament.winners_list.all()", "#         now = timezone.now()", "#         if all_participants_list.count() <= 1 and current_tournament.start_time >now:", "#             messages.add_message(request, messages.ERROR, \"Not enough participants!\")", "#         else:", "#             if matches_list.count() == 0:    #I.E. NO MATCHES HAVE BEEN MADE FOR THIS ROUND YET!", "#                 round_input = 1  #first round", "#                 current_tournament.create_matches(round_input, participants_list)", "#                 matches_list = current_tournament.matches_list.all()", "#                 winners_list = current_tournament.winners_list.all()", "#", "#                 return render(request, 'generate_matches.html',", "#                                 {'current_user': current_user,", "#                                  'clubs': clubs,", "#                                  'current_club': current_club,", "#                                  'current_tournament': current_tournament,", "#                                  'matches_list': matches_list,", "#                                  'all_participants_list': all_participants_list,", "#                                  'winners_list': winners_list,", "#                                  'now':now", "#                                 }", "#                              )", "#             else:", "#                 return render(request, 'generate_matches.html',   #redisplay html template with selected winners + unselected winners", "#                                 {'current_user': current_user,", "#                                  'clubs': clubs,", "#                                  'current_club': current_club,", "#                                  'current_tournament': current_tournament,", "#                                  'matches_list': matches_list,", "#                                  'all_participants_list': all_participants_list,", "#                                  'winners_list': winners_list,", "#                                  'now':now", "#                                 }", "#                              )", "#     except ObjectDoesNotExist:", "#         return redirect('tournament_list', club_id)", "#     else:", "#         return redirect('tournament_list', club_id)", "#", "#", "#", "#", "# @login_required", "# @organiser_only", "# def log_winners(request, tournament_id, club_id, user_id, match_id):", "#     try:", "#         current_user = request.user", "#         winner_user =  User.objects.get(id=user_id)", "#         current_club = Club.objects.get(id=club_id)", "#         current_match = Match.objects.get(matchId = match_id)", "#", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#", "#         if winner_user not in current_tournament.organisers.all():", "#             if winner_user == current_match.player1 or winner_user == current_match.player2:", "#                 current_tournament.winners_list.add(winner_user)", "#                 current_tournament.all_winners_list.add(winner_user)", "#", "#             # current_match = Match.objects.get(matchId = match_id)", "#                 current_match.winner = winner_user", "#", "#         if current_tournament.winners_list.count() == 1 and current_tournament.matches_list.count() ==1:", "#             current_tournament.tournament_winner = winner_user", "#             current_tournament.save()", "#", "#     except ObjectDoesNotExist:", "#         return redirect('generate_matches', club_id, tournament_id)", "#     else:", "#         if current_match.round == 1:", "#             return redirect('generate_matches', club_id, tournament_id)", "#         else:", "#             return redirect('generate_next_matches', club_id, tournament_id)", "#", "#", "#", "#", "#", "# @login_required", "# @organiser_only", "# def next_match(request, tournament_id, club_id):", "#     try:", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#         current_winners = current_tournament.winners_list.all()", "#", "#         if current_winners.count() != 1 :", "#             current_tournament.current_participants.clear()", "#", "#             for winner in current_winners:", "#                 current_tournament.current_participants.add(winner)   #Move all winners from last round into current_participants_list", "#", "#             current_tournament.winners_list.clear()    #clear winners for this round.", "#", "#     except ObjectDoesNotExist:", "#         return redirect('generate_next_matches',  club_id, tournament_id)", "#     else:", "#         return redirect('generate_next_matches',  club_id, tournament_id)", "#", "#", "#", "#", "#", "# @login_required", "# @organiser_only", "# def generate_next_matches(request, tournament_id, club_id):", "#     try:", "#         clubs = Club.objects.all()", "#         current_user = request.user", "#         current_club = Club.objects.get(id=club_id)", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#", "#         all_participants_list = current_tournament.participants_list.all()", "#         participants_list = current_tournament.current_participants.all()", "#", "#", "#         round_input = 2  #All other rounds have 'round =2' except first round has round 2", "#         current_tournament.create_matches(round_input, participants_list)", "#         matches_list = current_tournament.matches_list.all()", "#         now = timezone.now()", "#", "#         winners_list = current_tournament.winners_list.all()", "#", "#         return render(request, 'generate_matches.html',", "#                         {'current_user': current_user,", "#                          'clubs': clubs,", "#                          'current_club': current_club,", "#                          'current_tournament': current_tournament,", "#                          'matches_list': matches_list,", "#                          'winners_list': winners_list,", "#                          'all_participants_list': all_participants_list,", "#                          'now':now", "#                         }", "#                      )", "#", "#     except ObjectDoesNotExist:", "#         return redirect('tournament_list', club_id)", "#     else:", "#         return redirect('tournament_list', club_id)"], "clubs/views/account_views.py": ["\"\"\"Account related views.\"\"\"", "from django.conf import settings", "from django.contrib import messages", "from django.contrib.auth import login", "from django.contrib.auth.mixins import LoginRequiredMixin", "from django.views.generic.edit import FormView, UpdateView", "from django.urls import reverse", "from clubs.forms import PasswordForm, UserForm, SignUpForm", "from .mixins import LoginProhibitedMixin", "from ..models import Club", "from django.shortcuts import render, redirect", "", "class PasswordView(LoginRequiredMixin, FormView):", "    \"\"\"View that handles password change requests.\"\"\"", "", "    template_name = 'password.html'", "    form_class = PasswordForm", "", "    def get_object(self):", "            \"\"\"Return the object (user) to be updated.\"\"\"", "            current_user = self.request.user", "            return user", "", "    def get_form_kwargs(self, **kwargs):", "        \"\"\"Pass the current user to the password change form.\"\"\"", "", "        kwargs = super().get_form_kwargs(**kwargs)", "        kwargs.update({'user': self.request.user})", "        return kwargs", "", "    def form_valid(self, form):", "        \"\"\"Handle valid form by saving the new password.\"\"\"", "", "        form.save()", "        login(self.request, self.request.user)", "        return super().form_valid(form)", "", "    def get_success_url(self):", "        \"\"\"Redirect the user after successful password change.\"\"\"", "", "        messages.add_message(self.request, messages.SUCCESS, \"Password updated!\")", "        return reverse(settings.REDIRECT_URL_WHEN_LOGGED_IN)", "", "    def post(self, request, *args, **kwargs):", "        current_user = request.user", "        clubs = Club.objects.all()", "        form = self.form_class(user=current_user, data=request.POST)", "        if form.is_valid():", "            return self.form_valid(form)", "        return render(request, 'password.html',", "                        {'form': form,", "                         'current_user': current_user,", "                         'clubs': clubs}", "                     )", "", "    def get(self, request, *args, **kwargs):", "        current_user = request.user", "        clubs = Club.objects.all()", "        form = self.form_class()", "        return render(request, 'password.html',", "                        {'form': form,", "                         'current_user': current_user,", "                         'clubs': clubs}", "                     )", "", "class ProfileUpdateView(LoginRequiredMixin, UpdateView):", "    \"\"\"View to update logged-in user's profile.\"\"\"", "", "    model = UserForm", "    template_name = \"profile.html\"", "    form_class = UserForm", "", "    def get_object(self):", "        \"\"\"Return the object (user) to be updated.\"\"\"", "        user = self.request.user", "        return user", "", "    def get_success_url(self):", "        \"\"\"Return redirect URL after successful update.\"\"\"", "        messages.add_message(self.request, messages.SUCCESS, \"Profile updated!\")", "        return reverse(settings.REDIRECT_URL_WHEN_LOGGED_IN)", "", "    def form_valid(self, form):", "        \"\"\"Handle valid form by saving the new password.\"\"\"", "", "        form.save()", "        login(self.request, self.request.user)", "        return super().form_valid(form)", "", "    def post(self, request, *args, **kwargs):", "        current_user = request.user", "        clubs = Club.objects.all()", "        form = self.form_class(instance=current_user, data=request.POST)", "        if form.is_valid():", "            return self.form_valid(form)", "        return render(request, 'profile.html',", "                        {'form': form,", "                         'current_user': current_user,", "                         'clubs': clubs}", "                     )", "", "    def get(self, request, *args, **kwargs):", "        current_user = request.user", "        clubs = Club.objects.all()", "        form = self.form_class(instance=current_user)", "        return render(request, 'profile.html',", "                        {'form': form,", "                         'current_user': current_user,", "                         'clubs': clubs}", "                     )", "", "class SignUpView(LoginProhibitedMixin, FormView):", "    \"\"\"View that signs up user.\"\"\"", "", "    form_class = SignUpForm", "    template_name = \"sign_up.html\"", "    redirect_when_logged_in_url = settings.REDIRECT_URL_WHEN_LOGGED_IN", "", "    def form_valid(self, form):", "        self.object = form.save()", "        login(self.request, self.object)", "        return super().form_valid(form)", "", "    def get_success_url(self):", "        return reverse(settings.REDIRECT_URL_WHEN_LOGGED_IN)"], "clubs/views/authentication_views.py": ["\"\"\"Authenticated related views.\"\"\"", "from django.conf import settings", "from django.contrib import messages", "from django.contrib.auth import login, logout", "from django.shortcuts import redirect, render", "from django.views import View", "from django.urls import reverse", "from clubs.forms import LogInForm", "from .mixins import LoginProhibitedMixin", "", "class LogInView(LoginProhibitedMixin, View):", "    \"\"\"View that handles log in.\"\"\"", "", "    http_method_names = ['get', 'post']", "    redirect_when_logged_in_url = 'user_profile'", "", "    def get(self, request):", "        \"\"\"Display log in template.\"\"\"", "", "        self.next = request.GET.get('next') or ''", "        return self.render()", "", "    def post(self, request):", "        \"\"\"Handle log in attempt.\"\"\"", "", "        form = LogInForm(request.POST)", "        self.next = request.POST.get('next') or settings.REDIRECT_URL_WHEN_LOGGED_IN", "        user = form.get_user()", "        if user is not None:", "            login(request, user)", "            return redirect(self.next)", "        messages.add_message(request, messages.ERROR, \"The credentials provided were invalid!\")", "        return self.render()", "", "    def render(self):", "        \"\"\"Render log in template with blank log in form.\"\"\"", "", "        form = LogInForm()", "        return render(self.request, 'log_in.html', {'form': form, 'next': self.next})", "", "", "def log_out(request):", "    logout(request)", "    return redirect('home')"], "clubs/views/club_view.py": ["from django.contrib.auth.mixins import LoginRequiredMixin", "from django.views.generic.edit import FormView", "from clubs.forms import ClubForm", "from ..models import Club", "from django.shortcuts import render, redirect", "from django.contrib import messages", "from django.utils import timezone", "from django.contrib.auth.decorators import login_required", "from ..helpers import *", "from django.views.generic import ListView", "from django.views.generic.detail import DetailView", "from django.views.generic.list import MultipleObjectMixin", "from django.http import Http404", "from .mixins import *", "", "class ClubView(LoginRequiredMixin, FormView):", "    model = ClubForm", "    template_name = \"show_club.html\"", "    form_class = ClubForm", "", "    def get_object(self):", "        user = self.request.user", "        return user", "", "    def redirect_success_url(self, club_id):", "        \"\"\"Return redirect URL after successful update.\"\"\"", "        messages.add_message(self.request, messages.SUCCESS, \"Club created Successfully!\")", "        return redirect('show_club', club_id)", "", "    def post(self, request, *args, **kwargs):", "        current_user = request.user", "        clubs = Club.objects.all()", "        form = self.form_class(data=request.POST)", "        if form.is_valid():", "            club = Club.objects.create(", "                club_name = form.cleaned_data.get('club_name'),", "                location = form.cleaned_data.get('location'),", "                description = form.cleaned_data.get('description'),", "                club_owner = current_user", "            )", "            club.club_owner.clubs.add(club)", "            return self.redirect_success_url(club.id)", "        return render(request, 'create_club.html',", "                        {'form': form,", "                         'current_user': current_user,", "                        }", "                    )", "", "    def get(self, request, *args, **kwargs):", "        current_user = request.user", "        clubs = Club.objects.all()", "        form = self.form_class()", "        return render(request, 'create_club.html',", "                                {'form': form,", "                                 'current_user': current_user,", "                                }", "                            )", "", "class ShowClubView(LoginRequiredMixin, DetailView, MultipleObjectMixin):", "    \"\"\"View that shows individual user details.\"\"\"", "", "    model = Club", "    template_name = 'show_club.html'", "    # paginate_by = settings.POSTS_PER_PAGE", "    pk_url_kwarg = 'club_id'", "", "", "    def get(self, request, *args, **kwargs):", "        \"\"\"Handle get request, and redirect to user_profile if club_id invalid.\"\"\"", "        self.current_user = request.user", "        try:", "            return super().get(request, *args, **kwargs)", "        except Http404:", "            return redirect('user_profile')", "", "    def get_context_data(self, **kwargs):", "        \"\"\"Generate context data to be shown in the template.\"\"\"", "        now = timezone.now", "        current_club = self.get_object()", "        tournaments = current_club.tournaments.all()", "        clubs = Club.objects.all()", "        context = super().get_context_data(object_list=tournaments, **kwargs)", "        context['current_club'] = current_club", "        context['clubs'] = clubs", "        context['tournaments'] = context['object_list']", "        context['current_user'] = self.current_user", "        context['now'] = now", "        return context"], "clubs/views/match_views.py": ["from django.contrib import messages", "from django.conf import settings", "from django.core.paginator import Paginator", "from django.shortcuts import render, redirect", "from django.utils.decorators import method_decorator", "from django.views import View", "from django.core.exceptions import ObjectDoesNotExist", "from django.contrib.auth import login, logout", "from django.contrib.auth.decorators import login_required", "from ..models import User, Club, Tournament, Match", "from ..helpers import *", "from django.utils import timezone", "# from django.contrib.auth.mixins import LoginRequiredMixin", "# from django.views.generic import ListView", "# from django.views.generic.detail import DetailView", "# from django.views.generic.list import MultipleObjectMixin", "# from django.http import Http404", "# from .mixins import *", "", "", "@login_required", "@organiser_only", "def generate_matches(request, tournament_id, club_id):", "    try:", "        clubs = Club.objects.all()", "        current_user = request.user", "        current_club = Club.objects.get(id=club_id)", "        current_tournament = Tournament.objects.get(id=tournament_id)", "", "# THIS IS MORE MATCHES - FARIHA WAS TESTING WITH IT --- KEEP FOR NOW PLEASE!!!", "#         Match.objects.all().delete()", "        # current_tournament.matches_list.clear()", "        # current_tournament.winners_list.clear()", "        # tournament = Tournament.objects.all()", "#         --^^^ USE THIS AFTER CLICKING 'GENERATE_MATCHES', THEN COMMENT OUT AGAIN", "#         USE IT TO CLEAR THE WINNERS FOR A TOURNAMENT - FOR DEV PURPOSES", "        current_tournament.tournament_winner= None", "        current_tournament.current_participants.clear()", "        current_tournament.removed_participants.clear()", "", "        all_participants_list = current_tournament.participants_list.all()", "        participants_list_count = len(all_participants_list)", "        previous_power_of_two = current_tournament.power_Of_Two(participants_list_count)", "        current_tournament.make_Participants_Power_Of_2(previous_power_of_two)", "        #Change current participants list to include the highest power of 2 number of particpants", "        # - if number of particpants is not a power of 2", "        participants_list = current_tournament.current_participants.all()", "        matches_list = current_tournament.matches_list.all()", "        winners_list = current_tournament.winners_list.all()", "        now = timezone.now()", "        if all_participants_list.count() <= 1 and current_tournament.start_time >now:", "            messages.add_message(request, messages.ERROR, \"Not enough participants!\")", "        else:", "            if matches_list.count() == 0:    #I.E. NO MATCHES HAVE BEEN MADE FOR THIS ROUND YET!", "                round_input = 1  #first round", "                current_tournament.create_matches(round_input, participants_list)", "                matches_list = current_tournament.matches_list.all()", "                winners_list = current_tournament.winners_list.all()", "", "                return render(request, 'generate_matches.html',", "                                {'current_user': current_user,", "                                 'clubs': clubs,", "                                 'current_club': current_club,", "                                 'current_tournament': current_tournament,", "                                 'matches_list': matches_list,", "                                 'all_participants_list': all_participants_list,", "                                 'winners_list': winners_list,", "                                 'now':now", "                                }", "                             )", "            else:", "                return render(request, 'generate_matches.html',   #redisplay html template with selected winners + unselected winners", "                                {'current_user': current_user,", "                                 'clubs': clubs,", "                                 'current_club': current_club,", "                                 'current_tournament': current_tournament,", "                                 'matches_list': matches_list,", "                                 'all_participants_list': all_participants_list,", "                                 'winners_list': winners_list,", "                                 'now':now", "                                }", "                             )", "    except ObjectDoesNotExist:", "        return redirect('tournament_list', club_id)", "    else:", "        return redirect('tournament_list', club_id)", "", "", "# def power_Of_Two(x):    #x= len(participants_list)", "#     \"\"\"Calculate if the number of participants in a tournament is a power of 2,", "#     if not, if it is not, calculate the previous power of two. \"\"\"", "#", "#     if(x & (x-1) != 0):  #Not a power of 2", "#         while (x & x-1):", "#             x = x & x-1    #Finds previous power of 2", "#         print(\"not power of 2, next power of 2 is:\")", "#         print(x)", "#         return x", "", "# def make_Participants_Power_Of_2(current_tournament, previous_power_of_two):", "#     participants_list = current_tournament.participants_list.all()", "#     if previous_power_of_two:", "#         print(participants_list)", "#", "#         print(previous_power_of_two)", "#", "#", "#         new_participants = participants_list[:previous_power_of_two]", "#         for new_p in new_participants:", "#             current_tournament.current_participants.add(new_p)", "#", "#         print(\"new current p:\")", "#         print(current_tournament.current_participants.all())", "#", "#         remaining = (participants_list.count() - previous_power_of_two) +1   #THE OTHER HALF OF THE LIST: WHO WONT PLAY!", "#", "#         removed_participants = participants_list[(remaining):]", "#         for new_p in removed_participants:", "#             current_tournament.removed_participants.add(new_p)", "#", "#         # print(remaining)", "#         # print(participants_list[(remaining):])", "#         print(\"removed p:\")", "#         # current_tournament.removed_participants.add(participants_list[(remaining):].all())", "#         print(current_tournament.removed_participants.all())", "#", "#     else:", "#         print(\"its fine\")", "#         for participants in participants_list:", "#             current_tournament.current_participants.add(participants)", "", "@login_required", "@organiser_only", "def log_winners(request, tournament_id, club_id, user_id, match_id):", "    try:", "        current_user = request.user", "        winner_user =  User.objects.get(id=user_id)", "        current_club = Club.objects.get(id=club_id)", "        current_match = Match.objects.get(matchId = match_id)", "", "        current_tournament = Tournament.objects.get(id=tournament_id)", "", "        if winner_user not in current_tournament.organisers.all():", "            if winner_user == current_match.player1 or winner_user == current_match.player2:", "                current_tournament.winners_list.add(winner_user)", "                current_tournament.all_winners_list.add(winner_user)", "", "            # current_match = Match.objects.get(matchId = match_id)", "                current_match.winner = winner_user", "", "        if current_tournament.winners_list.count() == 1 and current_tournament.matches_list.count() ==1:", "            current_tournament.tournament_winner = winner_user", "            current_tournament.save()", "", "    except ObjectDoesNotExist:", "        return redirect('generate_matches', club_id, tournament_id)", "    else:", "        if current_match.round == 1:", "            return redirect('generate_matches', club_id, tournament_id)", "        else:", "            return redirect('generate_next_matches', club_id, tournament_id)", "", "", "", "", "@login_required", "@organiser_only", "def next_match(request, tournament_id, club_id):", "    try:", "        current_tournament = Tournament.objects.get(id=tournament_id)", "        current_winners = current_tournament.winners_list.all()", "", "        if current_winners.count() != 1 :", "            current_tournament.current_participants.clear()", "", "            for winner in current_winners:", "                current_tournament.current_participants.add(winner)   #Move all winners from last round into current_participants_list", "", "            current_tournament.winners_list.clear()    #clear winners for this round.", "", "    except ObjectDoesNotExist:", "        return redirect('generate_next_matches',  club_id, tournament_id)", "    else:", "        return redirect('generate_next_matches',  club_id, tournament_id)", "", "", "", "@login_required", "@organiser_only", "def generate_next_matches(request, tournament_id, club_id):", "    try:", "        clubs = Club.objects.all()", "        current_user = request.user", "        current_club = Club.objects.get(id=club_id)", "        current_tournament = Tournament.objects.get(id=tournament_id)", "", "        all_participants_list = current_tournament.participants_list.all()", "        participants_list = current_tournament.current_participants.all()", "", "        round_input = 2  #All other rounds have 'round =2' except first round has round 2", "        current_tournament.create_matches(round_input, participants_list)", "        matches_list = current_tournament.matches_list.all()", "        now = timezone.now()", "", "        winners_list = current_tournament.winners_list.all()", "", "        return render(request, 'generate_matches.html',", "                        {'current_user': current_user,", "                         'clubs': clubs,", "                         'current_club': current_club,", "                         'current_tournament': current_tournament,", "                         'matches_list': matches_list,", "                         'winners_list': winners_list,", "                         'all_participants_list': all_participants_list,", "                         'now':now", "                        }", "                     )", "", "    except ObjectDoesNotExist:", "        return redirect('tournament_list', club_id)", "    else:", "        return redirect('tournament_list', club_id)"], "clubs/views/mixins.py": ["\"\"\"View mixins.\"\"\"", "from django.shortcuts import redirect", "from clubs.models import Club", "", "class LoginProhibitedMixin:", "    \"\"\"Mixin that redirects when a user is logged in.\"\"\"", "", "    redirect_when_logged_in_url = None", "", "    def dispatch(self, *args, **kwargs):", "        \"\"\"Redirect when logged in, or dispatch as normal otherwise.\"\"\"", "        if self.request.user.is_authenticated:", "            return self.handle_already_logged_in(*args, **kwargs)", "        return super().dispatch(*args, **kwargs)", "", "    def handle_already_logged_in(self, *args, **kwargs):", "        url = self.get_redirect_when_logged_in_url()", "        return redirect(url)", "", "    def get_redirect_when_logged_in_url(self):", "        \"\"\"Returns the url to redirect to when not logged in.\"\"\"", "        if self.redirect_when_logged_in_url is None:", "            raise ImproperlyConfigured(", "                \"LoginProhibitedMixin requires either a value for \"", "                \"'redirect_when_logged_in_url', or an implementation for \"", "                \"'get_redirect_when_logged_in_url()'.\"", "            )", "        else:", "            return self.redirect_when_logged_in_url", "", "class OwnerOnlyMixin:", "    \"\"\"Mixin that redirects when a user is not an owner.\"\"\"", "", "    def dispatch(self, request, club_id, *args, **kwargs):", "        \"\"\"Redirect when not an owner, or dispatch as normal otherwise.\"\"\"", "        current_club = Club.objects.get(id=club_id)", "        if current_club.club_owner.email!=request.user.email:", "            return redirect('show_club', club_id)", "        return super().dispatch(request, club_id, *args, **kwargs)", "", "class OfficerOnlyMixin:", "    \"\"\"Mixin that redirects when a user is not an officer.\"\"\"", "", "    def dispatch(self, request, club_id, *args, **kwargs):", "        \"\"\"Redirect when not an officer, or dispatch as normal otherwise.\"\"\"", "        current_club = Club.objects.get(id=club_id)", "        if not current_club.officers.filter(email=request.user.email).exists():", "            return redirect('show_club', club_id)", "        return super().dispatch(request, club_id, *args, **kwargs)", "", "class OfficerOrOwnerOnlyMixin:", "    \"\"\"Mixin that redirects when a user is not an officer.\"\"\"", "", "    def dispatch(self, request, club_id, *args, **kwargs):", "        \"\"\"Redirect when not an officer, or dispatch as normal otherwise.\"\"\"", "        current_club = Club.objects.get(id=club_id)", "        if not current_club.officers.filter(email=request.user.email).exists() and current_club.club_owner.email!=request.user.email:", "            return redirect('show_club', club_id)", "        return super().dispatch(request, club_id, *args, **kwargs)", "", "class MemberOnlyMixin:", "    \"\"\"Mixin that redirects when a user is not a member.\"\"\"", "", "    def dispatch(self, request, club_id, *args, **kwargs):", "        \"\"\"Redirect when not a member, or dispatch as normal otherwise.\"\"\"", "        current_club = Club.objects.get(id=club_id)", "        if not current_club.members.filter(email=request.user.email).exists():", "            return redirect('show_club', club_id)", "        return super().dispatch(request, club_id, *args, **kwargs)", "", "", "class OrganiserOnlyMixin:", "    \"\"\"Mixin that redirects when a user is not an organiser.\"\"\"", "", "    def dispatch(self, request, club_id, *args, **kwargs):", "        \"\"\"Redirect when not an organiser, or dispatch as normal otherwise.\"\"\"", "        current_club = Club.objects.get(id=club_id)", "        if not current_tournament.organisers.filter(email=request.user.email).exists():", "            return redirect('show_club', club_id)", "        return super().dispatch(request, club_id, *args, **kwargs)"], "clubs/views/static_views.py": ["\"\"\"Static views of the microblogs app.\"\"\"", "from django.shortcuts import render", "from clubs.helpers import login_prohibited", "", "@login_prohibited", "def home(request):", "    return render(request, 'home.html')"], "clubs/views/toggle_view.py": ["from django.contrib import messages", "from django.conf import settings", "from django.shortcuts import render, redirect", "from django.utils.decorators import method_decorator", "from django.views import View", "from ..forms import SignUpForm, LogInForm, UserForm, PasswordForm, ClubForm", "from django.core.exceptions import ObjectDoesNotExist", "from django.contrib.auth import authenticate, login, logout", "from django.contrib.auth.decorators import login_required", "from ..models import User, Club, Tournament", "from ..helpers import *", "", "@login_required", "@owner_only", "def approve_member_to_officer_toggle(request, user_id, club_id):", "    current_user = request.user", "    try:", "        user = User.objects.get(id=user_id)", "        club = Club.objects.get(id=club_id)", "        current_user.toggle_approve_member_to_officer(user, club)", "    except ObjectDoesNotExist:", "        return redirect('officer_applicant_list', club_id)", "    else:", "        return redirect('officer_applicant_list', club_id)", "", "@login_required", "@officer_only", "def co_organise_toggle(request, club_id, tournament_id, user_id):", "    try:", "        current_user = request.user", "        user =  User.objects.get(id=user_id)", "        current_club = Club.objects.get(id=club_id)", "        current_tournament = Tournament.objects.get(id=tournament_id)", "        current_tournament.organisers.add(user)", "    except ObjectDoesNotExist:", "        return redirect('co_organiser_list', club_id, tournament_id)", "    else:", "        return redirect('co_organiser_list', club_id, tournament_id)", "", "@login_required", "@member_only", "def sign_up_toggle(request, tournament_id, club_id):", "    current_user = request.user", "    try:", "        tournament = Tournament.objects.get(id=tournament_id)", "        club = Club.objects.get(id=club_id)", "        current_user.toggle_sign_up(tournament, club)", "    except ObjectDoesNotExist:", "        return redirect('tournament_list', club_id)", "    else:", "        return redirect('tournament_list', club_id)", "", "@login_required", "@member_only", "def withdraw_toggle(request, tournament_id, club_id):", "    current_user = request.user", "    try:", "        tournament = Tournament.objects.get(id=tournament_id)", "        club = Club.objects.get(id=club_id)", "        current_user.toggle_withdraw(tournament, club)", "    except ObjectDoesNotExist:", "        return redirect('tournament_joined', club_id)", "    else:", "        return redirect('tournament_joined', club_id)", "", "@login_required", "@officer_only", "def approve_toggle(request, user_id, club_id):", "    current_user = request.user", "    try:", "        user = User.objects.get(id=user_id)", "        club = Club.objects.get(id=club_id)", "        current_user.toggle_approve(user, club)", "    except ObjectDoesNotExist:", "        return redirect('applicant_list', club_id)", "    else:", "        return redirect('applicant_list', club_id)", "", "@login_required", "@officer_only", "def cancel_toggle(request, user_id, club_id):", "    current_user = request.user", "    try:", "        user = User.objects.get(id=user_id)", "        club = Club.objects.get(id=club_id)", "        current_user.toggle_cancel(user, club)", "    except ObjectDoesNotExist:", "        return redirect('member_list_for_staff', club_id)", "    else:", "        return redirect('member_list_for_staff', club_id)", "", "@login_required", "@owner_only", "def promote_toggle(request, user_id, club_id):", "    current_user = request.user", "    try:", "        user = User.objects.get(id=user_id)", "        club = Club.objects.get(id=club_id)", "        current_user.toggle_promote(user, club)", "    except ObjectDoesNotExist:", "        return redirect('member_list_for_staff', club_id)", "    else:", "        return redirect('member_list_for_staff', club_id)", "", "@login_required", "@owner_only", "def demote_toggle(request, user_id, club_id):", "    current_user = request.user", "    try:", "        user = User.objects.get(id=user_id)", "        club = Club.objects.get(id=club_id)", "        current_user.toggle_demote(user, club)", "    except ObjectDoesNotExist:", "        return redirect('officer_list', club_id)", "    else:", "        return redirect('officer_list', club_id)", "", "@login_required", "@owner_only", "def transfer_toggle(request, user_id, club_id):", "    current_user = request.user", "    try:", "        user = User.objects.get(id=user_id)", "        club = Club.objects.get(id=club_id)", "        current_user.toggle_transfer(user, club)", "    except ObjectDoesNotExist:", "        return redirect('officer_list', club_id)", "    else:", "        return redirect('officer_list', club_id)", "", "@login_required", "def apply_membership_toggle(request, club_id):", "    current_user = request.user", "    clubs = Club.objects.all()", "    try:", "        club = Club.objects.get(id=club_id)", "        current_user.toggle_apply_membership(club)", "    except ObjectDoesNotExist:", "        return redirect('user_profile')", "    else:", "        return redirect('show_club', club_id)", "", "@login_required", "def apply_officer_toggle(request, club_id):", "    current_user = request.user", "    clubs = Club.objects.all()", "    try:", "        club = Club.objects.get(id=club_id)", "        current_user.toggle_apply_officer(club)", "    except ObjectDoesNotExist:", "        return redirect('user_profile')", "    else:", "        return redirect('show_club', club_id)"], "clubs/views/tournament_view.py": ["from django.conf import settings", "from django.contrib import messages", "from django.contrib.auth import login", "from django.contrib.auth.mixins import LoginRequiredMixin", "from django.views.generic.edit import FormView, UpdateView", "from django.urls import reverse", "from clubs.forms import TournamentForm", "from .mixins import LoginProhibitedMixin", "from ..models import Club, Tournament", "from django.shortcuts import render, redirect", "from django.contrib.auth.decorators import login_required", "from ..helpers import *", "from django.utils import timezone", "from django.core.paginator import Paginator", "from django.views.generic import ListView", "", "class TournamentUpdateView(LoginRequiredMixin, UpdateView):", "    \"\"\"View to update tournament info.\"\"\"", "", "    model = TournamentForm", "    template_name = \"tournament_list.html\"", "    form_class = TournamentForm", "", "    def get_object(self):", "        user = self.request.user", "        return user", "", "    def redirect_success_url(self, club_id):", "        \"\"\"Return redirect URL after successful update.\"\"\"", "        messages.add_message(self.request, messages.SUCCESS, \"Tournament updated Successfully!\")", "        return redirect('tournament_list', club_id)", "", "", "    def post(self, request, club_id, tournament_id, *args, **kwargs):", "        current_user = request.user", "        current_club = Club.objects.get(id=club_id)", "        current_tournament = Tournament.objects.get(id=tournament_id)", "        clubs = Club.objects.all()", "        form = self.form_class(instance=current_tournament, data=request.POST)", "        if form.is_valid():", "            form.save()", "            return self.redirect_success_url(current_club.id)", "        return render(request, 'edit_tournament_info.html',", "                        {'form': form,", "                         'current_user': current_user,", "                         'clubs': clubs,", "                         'current_club': current_club,", "                         'current_tournament': current_tournament", "                        }", "                     )", "", "    def get(self, request, club_id, tournament_id, *args, **kwargs):", "        current_user = request.user", "        current_club = Club.objects.get(id=club_id)", "        current_tournament = Tournament.objects.get(id=tournament_id)", "        clubs = Club.objects.all()", "        form = self.form_class(instance=current_tournament)", "        return render(request, 'edit_tournament_info.html',", "                        {'form': form,", "                         'current_user': current_user,", "                         'clubs': clubs,", "                         'current_club': current_club,", "                         'current_tournament': current_tournament", "                        }", "                     )", "", "", "class TournamentView(LoginRequiredMixin, FormView):", "", "    model = TournamentForm", "    template_name = \"tournament_list.html\"", "    form_class = TournamentForm", "", "    def get_object(self):", "        user = self.request.user", "        return user", "", "    def redirect_success_url(self, club_id):", "        \"\"\"Return redirect URL after successful update.\"\"\"", "        messages.add_message(self.request, messages.SUCCESS, \"Tournament created Successfully!\")", "        return redirect('tournament_list', club_id)", "", "    def post(self, request, club_id, *args, **kwargs):", "        current_user = request.user", "        current_club = Club.objects.get(id=club_id)", "        clubs = Club.objects.all()", "        form = self.form_class(data=request.POST)", "        if form.is_valid():", "            # tournament = form.save()", "            tournament = Tournament.objects.create(", "                tournament_name = form.cleaned_data.get('tournament_name'),", "                short_description = form.cleaned_data.get('short_description'),", "                number_of_participants = form.cleaned_data.get('number_of_participants'),", "                deadline = form.cleaned_data.get('deadline'),", "                start_time = form.cleaned_data.get('start_time'),", "                club = current_club", "            )", "            tournament.organisers.add(current_user)", "            current_club.tournaments.add(tournament)", "            return self.redirect_success_url(current_club.id)", "        return render(request, 'create_tournament.html',", "                        {'form': form,", "                         'current_user': current_user,", "                         'current_club': current_club,", "                         'clubs': clubs", "                        }", "                    )", "", "    def get(self, request, club_id, *args, **kwargs):", "        current_user = request.user", "        current_club = Club.objects.get(id=club_id)", "        clubs = Club.objects.all()", "        form = self.form_class()", "        return render(request, 'create_tournament.html',", "                                {'form': form,", "                                 'current_user': current_user,", "                                 'current_club': current_club,", "                                 'clubs': clubs", "                                }", "                            )", "", "class TournamentListView(LoginRequiredMixin, ListView):", "    \"\"\"View that shows a list of all users.\"\"\"", "", "    model = Tournament", "    template_name = \"tournament_list.html\"", "    context_object_name = \"tournaments\"", "    paginate_by = settings.TOURNAMENTS_PER_PAGE", "", "    def get(self, request, club_id, *args, **kwargs):", "        self.current_user = request.user", "        self.clubs = Club.objects.all()", "        self.current_club = Club.objects.get(id=club_id)", "        self.tournaments = self.current_club.tournaments.all()", "        try:", "            return super().get(request, *args, **kwargs)", "        except Http404:", "            return redirect('tournament_list', club_id)", "", "    def get_context_data(self, **kwargs):", "        now = timezone.now", "        context = super().get_context_data(object_list=self.tournaments, **kwargs)", "        context['current_user'] = self.current_user", "        context['tournaments'] = context['object_list']", "        context['clubs'] = self.clubs", "        context['current_club'] = self.current_club", "        context['now'] = now", "        return context", "", "class TournamentJoinedView(LoginRequiredMixin, ListView):", "    \"\"\"View that shows a list of all users.\"\"\"", "", "    model = Tournament", "    template_name = \"tournament_joined.html\"", "    context_object_name = \"tournament_joined\"", "    paginate_by = settings.TOURNAMENTS_PER_PAGE", "", "    def get(self, request, club_id, *args, **kwargs):", "        self.current_user = request.user", "        self.clubs = Club.objects.all()", "        self.current_club = Club.objects.get(id=club_id)", "        self.tournament_joined = self.current_user.tournaments.all()", "        try:", "            return super().get(request, *args, **kwargs)", "        except Http404:", "            return redirect('tournament_list', club_id)", "", "    def get_context_data(self, **kwargs):", "        now = timezone.now", "        context = super().get_context_data(object_list=self.tournament_joined, **kwargs)", "        context['current_user'] = self.current_user", "        context['tournament_joined'] = context['object_list']", "        context['clubs'] = self.clubs", "        context['current_club'] = self.current_club", "        context['now'] = now", "        return context"], "clubs/views/user_view.py": ["from django.contrib import messages", "from django.conf import settings", "from django.shortcuts import render, redirect", "from django.utils.decorators import method_decorator", "from django.views import View", "from django.contrib.auth import authenticate, login", "from django.contrib.auth.decorators import login_required", "from ..models import User, Club, Tournament", "from ..helpers import *", "from django.utils import timezone", "from django.contrib.auth.mixins import LoginRequiredMixin", "from django.views.generic import ListView", "from django.views.generic.detail import DetailView", "from django.views.generic.list import MultipleObjectMixin", "from django.http import Http404", "from .mixins import *", "from django.core.paginator import Paginator", "", "class ShowUserView(LoginRequiredMixin, DetailView, MultipleObjectMixin):", "    \"\"\"View that shows individual user details.\"\"\"", "", "    model = User", "    template_name = 'show_user.html'", "    # paginate_by = settings.POSTS_PER_PAGE", "    pk_url_kwarg = 'user_id'", "", "", "    def get(self, request, *args, **kwargs):", "        \"\"\"Handle get request, and redirect to user_profile if user_id invalid.\"\"\"", "        self.current_user = request.user", "        try:", "            return super().get(request, *args, **kwargs)", "        except Http404:", "            return redirect('user_profile')", "", "    def get_context_data(self, **kwargs):", "        \"\"\"Generate context data to be shown in the template.\"\"\"", "        user = self.get_object()", "        users = User.objects.all()", "        context = super().get_context_data(object_list=users, **kwargs)", "        context['user'] = user", "        context['users'] = context['object_list']", "        context['current_user'] = self.current_user", "        return context", "", "class ApplicantListView(LoginRequiredMixin, OfficerOrOwnerOnlyMixin, ListView):", "    \"\"\"View that shows a list of all users.\"\"\"", "", "    model = User", "    template_name = \"applicant_list.html\"", "    context_object_name = \"applicants\"", "    paginate_by = settings.USERS_PER_PAGE", "", "    def get(self, request, club_id, *args, **kwargs):", "        self.current_user = request.user", "        self.clubs = Club.objects.all()", "        self.current_club = Club.objects.get(id=club_id)", "        self.applicants = self.current_club.applicants.all()", "        try:", "            return super().get(request, *args, **kwargs)", "        except Http404:", "            return redirect('applicant_list', club_id)", "", "    def get_context_data(self, **kwargs):", "        context = super().get_context_data(object_list=self.applicants, **kwargs)", "        context['current_user'] = self.current_user", "        context['applicants'] = context['object_list']", "        context['clubs'] = self.clubs", "        context['current_club'] = self.current_club", "        return context", "", "class OfficerApplicantListView(LoginRequiredMixin, OwnerOnlyMixin, ListView):", "    \"\"\"View that shows a list of all users.\"\"\"", "", "    model = User", "    template_name = \"officer_applicant_list.html\"", "    context_object_name = \"Officer Applicants\"", "    paginate_by = settings.USERS_PER_PAGE", "", "    def get(self, request, club_id, *args, **kwargs):", "        self.current_user = request.user", "        self.clubs = Club.objects.all()", "        self.current_club = Club.objects.get(id=club_id)", "        self.officer_applicants = self.current_club.officer_applicants.all()", "        try:", "            return super().get(request, *args, **kwargs)", "        except Http404:", "            return redirect('officer_applicant_list', club_id)", "", "    def get_context_data(self, **kwargs):", "        context = super().get_context_data(object_list=self.officer_applicants, **kwargs)", "        context['current_user'] = self.current_user", "        context['officer_applicants'] = context['object_list']", "        context['clubs'] = self.clubs", "        context['current_club'] = self.current_club", "        return context", "", "class MemberListForMembersView(LoginRequiredMixin, MemberOnlyMixin, ListView):", "    \"\"\"View that shows a list of all users.\"\"\"", "", "    model = User", "    template_name = \"member_list_for_members.html\"", "    context_object_name = \"members\"", "    paginate_by = settings.USERS_PER_PAGE", "", "    def get(self, request, club_id, *args, **kwargs):", "        self.current_user = request.user", "        self.clubs = Club.objects.all()", "        self.current_club = Club.objects.get(id=club_id)", "        self.members = self.current_club.members.all()", "        try:", "            return super().get(request, *args, **kwargs)", "        except Http404:", "            return redirect('member_list_for_members', club_id)", "", "    def get_context_data(self, **kwargs):", "        context = super().get_context_data(object_list=self.members, **kwargs)", "        context['current_user'] = self.current_user", "        context['members'] = context['object_list']", "        context['clubs'] = self.clubs", "        context['current_club'] = self.current_club", "        return context", "", "class MemberListForStaffView(LoginRequiredMixin, OfficerOrOwnerOnlyMixin, ListView):", "    \"\"\"View that shows a list of all members.\"\"\"", "", "    model = User", "    template_name = \"member_list_for_staff.html\"", "    context_object_name = \"members\"", "    paginate_by = settings.USERS_PER_PAGE", "", "    def get(self, request, club_id, *args, **kwargs):", "        self.current_user = request.user", "        self.clubs = Club.objects.all()", "        self.current_club = Club.objects.get(id=club_id)", "        self.members = self.current_club.members.all()", "        try:", "            return super().get(request, *args, **kwargs)", "        except Http404:", "            return redirect('member_list_for_staff', club_id)", "", "    def get_context_data(self, **kwargs):", "        context = super().get_context_data(object_list=self.members, **kwargs)", "        context['current_user'] = self.current_user", "        context['members'] = context['object_list']", "        context['clubs'] = self.clubs", "        context['current_club'] = self.current_club", "        return context", "", "class OfficerListView(LoginRequiredMixin, OfficerOrOwnerOnlyMixin, ListView):", "    \"\"\"View that shows a list of all officers.\"\"\"", "", "    model = User", "    template_name = \"officer_list.html\"", "    context_object_name = \"officers\"", "    paginate_by = settings.USERS_PER_PAGE", "", "    def get(self, request, club_id, *args, **kwargs):", "        self.current_user = request.user", "        self.clubs = Club.objects.all()", "        self.current_club = Club.objects.get(id=club_id)", "        self.officers = self.current_club.officers.all()", "        try:", "            return super().get(request, *args, **kwargs)", "        except Http404:", "            return redirect('officer_list', club_id)", "", "    def get_context_data(self, **kwargs):", "        context = super().get_context_data(object_list=self.officers, **kwargs)", "        context['current_user'] = self.current_user", "        context['officers'] = context['object_list']", "        context['clubs'] = self.clubs", "        context['current_club'] = self.current_club", "        return context", "#", "# @login_required", "# @officer_only", "# def co_organiser_list(request, club_id, tournament_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     current_club = Club.objects.get(id=club_id)", "#     officers = current_club.officers.all()", "#     current_tournament = Tournament.objects.get(id=tournament_id)", "#     organisers = current_tournament.organisers.all()", "#     paginator = Paginator(officers, settings.USERS_PER_PAGE)", "#     # paginate_by = settings.USERS_PER_PAGE", "#     return render(request, 'co_organiser_list.html',", "#                     {'officers': officers,", "#                      'organisers': organisers,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club,", "#                      'tournament': current_tournament", "#                     }", "#                  )", "class CoOrganiserListView(LoginRequiredMixin, OfficerOnlyMixin, ListView):", "    \"\"\"View that shows a list of all users.\"\"\"", "", "    model = User", "    template_name = \"co_organiser_list.html\"", "    context_object_name = \"co-organisers\"", "    paginate_by = settings.USERS_PER_PAGE", "", "    def get(self, request, club_id, tournament_id, *args, **kwargs):", "        self.current_user = request.user", "        self.clubs = Club.objects.all()", "        self.current_club = Club.objects.get(id=club_id)", "        self.officers = self.current_club.officers.all()", "        self.current_tournament = Tournament.objects.get(id=tournament_id)", "        organisers = current_tournament.organisers.all()", "", "        try:", "            return super().get(request, *args, **kwargs)", "        except Http404:", "            return redirect('co_organiser_list', club_id)", "", "    def get_context_data(self, **kwargs):", "        context = super().get_context_data(object_list=self.officers, **kwargs)", "        context['current_user'] = self.current_user", "        context['officers'] = context['object_list']", "        context['organisers'] = self.organisers", "        context['clubs'] = self.clubs", "        context['current_club'] = self.current_club", "        context['tournament'] = self.current_tournament", "        return context", "", "@login_required", "def user_profile(request):", "    current_user = request.user", "    clubs = Club.objects.all()", "    return render(request, 'user_profile.html',", "                    {'current_user': current_user,", "                     'clubs': clubs,", "                    }", "                 )"], "system/settings.py": ["    'widget_tweaks',", "    'bootstrap_pagination'", "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')", "", "", "# Page lengths", "USERS_PER_PAGE = 5", "TOURNAMENTS_PER_PAGE = 5", "", "# Activate django-heroku", "if '/app' in os.environ['HOME']:", "    import django_heroku", "    django_heroku.settings(locals())"], "system/urls.py": ["    path('sign_up/', views.SignUpView.as_view(), name='sign_up'),", "    path('log_in/', views.LogInView.as_view(), name='log_in'),", "", "    path('club/<int:club_id>/apply_membership_toggle/', views.apply_membership_toggle, name='apply_membership_toggle'),", "    path('club/<int:club_id>/apply_officer_toggle/', views.apply_officer_toggle, name='apply_officer_toggle'),", "    path('club/<int:club_id>/approve_member_to_officer_toggle/<int:user_id>', views.approve_member_to_officer_toggle, name='approve_member_to_officer_toggle'),", "    path('club/<int:club_id>/co_organise_toggle/<int:tournament_id>/<int:user_id>', views.co_organise_toggle, name='co_organise_toggle'),", "", "    path('club/<int:club_id>/applicants/', views.ApplicantListView.as_view(), name='applicant_list'),", "    path('club/<int:club_id>/officers/', views.OfficerListView.as_view(), name='officer_list'),", "    path('club/<int:club_id>/members/', views.MemberListForStaffView.as_view(), name='member_list_for_staff'),", "    path('club/<int:club_id>/member_list/', views.MemberListForMembersView.as_view(), name='member_list_for_members'),", "    path('club/<int:club_id>/co_organise/<int:tournament_id>', views.CoOrganiserListView.as_view(), name='co_organiser_list'),", "    path('club/<int:club_id>/officer_applicants/', views.OfficerApplicantListView.as_view(), name='officer_applicant_list'),", "", "    path('club/<int:club_id>/tournaments/', views.TournamentListView.as_view(), name='tournament_list'),", "    path('club/<int:club_id>/tournament_joined/', views.TournamentJoinedView.as_view(), name='tournament_joined'),", "", "    path('create_club/<int:user_id>', views.ClubView.as_view(), name='create_club'),", "    path('club/<int:club_id>/create_tournament/', views.TournamentView.as_view(), name='create_tournament'),", "    path('club/<int:club_id>/edit_tournament_info/<int:tournament_id>', views.TournamentUpdateView.as_view(), name='edit_tournament_info'),", "", "    path('user/<int:user_id>', views.ShowUserView.as_view(), name='show_user'),", "    path('club/<int:club_id>', views.ShowClubView.as_view(), name='show_club'),", "", "    path('profile/', views.ProfileUpdateView.as_view(), name='profile'),", "    path('password/', views.PasswordView.as_view(), name='password'),", "", ""]}], "deletionsPerFile": [{"clubs/forms.py": ["class SignUpForm(forms.ModelForm):", "    class Meta:", "        model = User", "        fields = ['first_name', 'last_name', 'email', 'public_bio',", "                  'chess_experience_level', 'short_personal_statement']", "        widgets = { 'public_bio': forms.Textarea(), 'short_personal_statement': forms.Textarea() }", "        label='Password',", "                regex=r'^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9]).*$',", "                message='Password must contain an uppercase character, '", "                    'a lowecase character and a number.'", "                )]", "            self.add_error('password_confirmation', 'confirmation does not match password.')", "class PasswordForm(forms.Form):", "    \"\"\"Form enabling users to change their password.\"\"\"", "", "    password = forms.CharField(label='Current password', widget=forms.PasswordInput())", "    new_password = forms.CharField(", "        label='Password',", "        widget=forms.PasswordInput(),", "        validators=[RegexValidator(", "            regex=r'^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9]).*$',", "            message='Password must contain an uppercase character, a lowercase '", "                    'character and a number'", "            )]", "    )", "    password_confirmation = forms.CharField(label='Password confirmation', widget=forms.PasswordInput())", "", "    def clean(self):", "        \"\"\"Clean the data and generate messages for any errors.\"\"\"", "", "        super().clean()", "        new_password = self.cleaned_data.get('new_password')", "        password_confirmation = self.cleaned_data.get('password_confirmation')", "        if new_password != password_confirmation:", "            self.add_error('password_confirmation', 'Confirmation does not match password.')", ""], "clubs/helpers.py": ["            return redirect('user_profile')", "def staff_only(view_function):", "        if current_club.officers.filter(email=request.user.email).exists() or current_club.club_owner.email==request.user.email:", "            return redirect('member_list_for_members', club_id=club_id)", "            return redirect('member_list_for_staff', club_id=club_id)", "        # if current_tournament.organisers.email==request.user.email and current_tournament.club == club_id :", "            return redirect('tournament_list', club_id=club_id, **options)"], "clubs/migrations/0001_initial.py": ["# Generated by Django 3.2.8 on 2021-11-18 05:33", "                ('chess_experience_level', models.CharField(max_length=3)),", "                ('short_personal_statement', models.CharField(max_length=520)),", "                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),", "                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),", "                'verbose_name': 'user',", "                'verbose_name_plural': 'users',", "                'abstract': False,"], "clubs/migrations/0002_auto_20211118_0933.py": ["# Generated by Django 3.2.8 on 2021-11-18 09:33", "", "import django.core.validators", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0001_initial'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='user',", "            name='chess_experience_level',", "            field=models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)]),", "        ),", "        migrations.AlterField(", "            model_name='user',", "            name='username',", "            field=models.CharField(max_length=30, unique=True, validators=[django.core.validators.RegexValidator(message='Username must consist of @ followed by at least 3 alphanumeriacals', regex='^@\\\\w{3,}$')]),", "        ),", "    ]"], "clubs/migrations/0003_alter_user_chess_experience_level.py": ["# Generated by Django 3.2.8 on 2021-11-19 11:12", "", "import django.core.validators", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0002_auto_20211118_0933'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='user',", "            name='chess_experience_level',", "            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)]),", "        ),", "    ]"], "clubs/migrations/0004_auto_20211129_1857.py": ["# Generated by Django 3.2.8 on 2021-11-29 18:57", "", "from django.conf import settings", "import django.contrib.auth.validators", "import django.core.validators", "from django.db import migrations, models", "import django.db.models.deletion", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0003_alter_user_chess_experience_level'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='user',", "            name='chess_experience_level',", "            field=models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),", "        ),", "        migrations.AlterField(", "            model_name='user',", "            name='short_personal_statement',", "            field=models.CharField(blank=True, max_length=520),", "        ),", "        migrations.AlterField(", "            model_name='user',", "            name='username',", "            field=models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username'),", "        ),", "        migrations.CreateModel(", "            name='Club',", "            fields=[", "                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),", "                ('club_name', models.CharField(max_length=50, unique=True)),", "                ('location', models.CharField(max_length=50, unique=True)),", "                ('description', models.CharField(blank=True, max_length=140)),", "                ('created_at', models.DateTimeField(auto_now_add=True)),", "                ('club_owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),", "            ],", "            options={", "                'ordering': ['created_at'],", "            },", "        ),", "    ]"], "clubs/migrations/0005_alter_club_location.py": ["# Generated by Django 3.2.8 on 2021-12-01 11:16", "", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0004_auto_20211129_1857'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='club',", "            name='location',", "            field=models.CharField(max_length=50),", "        ),", "    ]"], "clubs/migrations/0005_post.py": ["# Generated by Django 3.2.8 on 2021-12-01 05:17", "", "from django.conf import settings", "from django.db import migrations, models", "import django.db.models.deletion", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0004_auto_20211129_1857'),", "    ]", "", "    operations = [", "        migrations.CreateModel(", "            name='Post',", "            fields=[", "                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),", "                ('text', models.CharField(max_length=280)),", "                ('created_at', models.DateTimeField(auto_now_add=True)),", "                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),", "            ],", "            options={", "                'ordering': ['-created_at'],", "            },", "        ),", "    ]"], "clubs/migrations/0006_delete_post.py": ["# Generated by Django 3.2.8 on 2021-12-01 05:18", "", "from django.db import migrations", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0005_post'),", "    ]", "", "    operations = [", "        migrations.DeleteModel(", "            name='Post',", "        ),", "    ]"], "clubs/migrations/0007_user_clubs.py": ["# Generated by Django 3.2.8 on 2021-12-01 06:33", "", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0006_delete_post'),", "    ]", "", "    operations = [", "        migrations.AddField(", "            model_name='user',", "            name='clubs',", "            field=models.ManyToManyField(related_name='user', to='clubs.Club'),", "        ),", "    ]"], "clubs/migrations/0008_merge_0005_alter_club_location_0007_user_clubs.py": ["# Generated by Django 3.2.8 on 2021-12-03 14:31", "", "from django.db import migrations", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0005_alter_club_location'),", "        ('clubs', '0007_user_clubs'),", "    ]", "", "    operations = [", "    ]"], "clubs/migrations/0009_alter_user_clubs.py": ["# Generated by Django 3.2.8 on 2021-12-03 14:31", "", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0008_merge_0005_alter_club_location_0007_user_clubs'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='user',", "            name='clubs',", "            field=models.ManyToManyField(related_name='clubs', to='clubs.Club'),", "        ),", "    ]"], "clubs/migrations/0010_club_members.py": ["# Generated by Django 3.2.8 on 2021-12-03 14:32", "", "from django.conf import settings", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0009_alter_user_clubs'),", "    ]", "", "    operations = [", "        migrations.AddField(", "            model_name='club',", "            name='members',", "            field=models.ManyToManyField(related_name='members', to=settings.AUTH_USER_MODEL),", "        ),", "    ]"], "clubs/migrations/0011_club_applicants.py": ["# Generated by Django 3.2.8 on 2021-12-03 14:33", "", "from django.conf import settings", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0010_club_members'),", "    ]", "", "    operations = [", "        migrations.AddField(", "            model_name='club',", "            name='applicants',", "            field=models.ManyToManyField(related_name='applicants', to=settings.AUTH_USER_MODEL),", "        ),", "    ]"], "clubs/migrations/0012_club_officers.py": ["# Generated by Django 3.2.8 on 2021-12-03 14:41", "", "from django.conf import settings", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0011_club_applicants'),", "    ]", "", "    operations = [", "        migrations.AddField(", "            model_name='club',", "            name='officers',", "            field=models.ManyToManyField(related_name='officers', to=settings.AUTH_USER_MODEL),", "        ),", "    ]"], "clubs/migrations/0013_auto_20211208_1820.py": ["# Generated by Django 3.2.8 on 2021-12-08 18:20", "", "import datetime", "from django.conf import settings", "import django.core.validators", "from django.db import migrations, models", "import django.db.models.deletion", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0012_club_officers'),", "    ]", "", "    operations = [", "        migrations.AlterModelOptions(", "            name='club',", "            options={},", "        ),", "        migrations.AlterModelOptions(", "            name='user',", "            options={'ordering': ['last_name', 'first_name']},", "        ),", "        migrations.CreateModel(", "            name='Tournament',", "            fields=[", "                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),", "                ('tournament_name', models.CharField(max_length=15, unique=True)),", "                ('short_description', models.CharField(blank=True, max_length=15)),", "                ('number_of_participants', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(96)])),", "                ('created_at', models.DateTimeField(auto_now_add=True)),", "                ('deadline', models.DateField(default=datetime.date.today)),", "                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clubs.club')),", "                ('organisers', models.ManyToManyField(related_name='organisers', to=settings.AUTH_USER_MODEL)),", "            ],", "            options={", "                'ordering': ['created_at'],", "            },", "        ),", "        migrations.AddField(", "            model_name='club',", "            name='tournaments',", "            field=models.ManyToManyField(related_name='tournaments', to='clubs.Tournament'),", "        ),", "    ]"], "clubs/migrations/0014_auto_20211209_0250.py": ["# Generated by Django 3.2.8 on 2021-12-09 02:50", "", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0013_auto_20211208_1820'),", "    ]", "", "    operations = [", "        migrations.RemoveField(", "            model_name='club',", "            name='created_at',", "        ),", "        migrations.AlterField(", "            model_name='club',", "            name='tournaments',", "            field=models.ManyToManyField(null=True, related_name='tournaments', to='clubs.Tournament'),", "        ),", "    ]"], "clubs/migrations/0015_alter_club_tournaments.py": ["# Generated by Django 3.2.8 on 2021-12-09 02:50", "", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0014_auto_20211209_0250'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='club',", "            name='tournaments',", "            field=models.ManyToManyField(related_name='tournaments', to='clubs.Tournament'),", "        ),", "    ]"], "clubs/migrations/0016_alter_club_tournaments.py": ["# Generated by Django 3.2.8 on 2021-12-09 02:52", "", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0015_alter_club_tournaments'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='club',", "            name='tournaments',", "            field=models.ManyToManyField(blank=True, related_name='tournaments', to='clubs.Tournament'),", "        ),", "    ]"], "clubs/migrations/0017_alter_tournament_deadline.py": ["# Generated by Django 3.2.8 on 2021-12-09 03:34", "", "from django.db import migrations, models", "import django.utils.timezone", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0016_alter_club_tournaments'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='tournament',", "            name='deadline',", "            field=models.DateTimeField(default=django.utils.timezone.now),", "        ),", "    ]"], "clubs/migrations/0018_tournament_start_time.py": ["# Generated by Django 3.2.8 on 2021-12-09 03:42", "", "from django.db import migrations, models", "import django.utils.timezone", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0017_alter_tournament_deadline'),", "    ]", "", "    operations = [", "        migrations.AddField(", "            model_name='tournament',", "            name='start_time',", "            field=models.DateTimeField(default=django.utils.timezone.now),", "        ),", "    ]"], "clubs/migrations/0019_auto_20211209_0925.py": ["# Generated by Django 3.2.8 on 2021-12-09 09:25", "", "from django.conf import settings", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0018_tournament_start_time'),", "    ]", "", "    operations = [", "        migrations.AddField(", "            model_name='tournament',", "            name='tournament_members',", "            field=models.ManyToManyField(related_name='tournament_members', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.AddField(", "            model_name='user',", "            name='tournament',", "            field=models.ManyToManyField(related_name='tournament', to='clubs.Tournament'),", "        ),", "    ]"], "clubs/migrations/0019_club_created_at.py": ["# Generated by Django 3.2.8 on 2021-12-09 14:11", "", "from django.db import migrations, models", "import django.utils.timezone", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0018_tournament_start_time'),", "    ]", "", "    operations = [", "        migrations.AddField(", "            model_name='club',", "            name='created_at',", "            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),", "            preserve_default=False,", "        ),", "    ]"], "clubs/migrations/0020_club_tournament_member.py": ["# Generated by Django 3.2.8 on 2021-12-09 13:26", "", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0019_auto_20211209_0925'),", "    ]", "", "    operations = [", "        migrations.AddField(", "            model_name='club',", "            name='tournament_member',", "            field=models.ManyToManyField(blank=True, related_name='tournament_member', to='clubs.Tournament'),", "        ),", "    ]"], "clubs/migrations/0021_auto_20211209_1351.py": ["# Generated by Django 3.2.8 on 2021-12-09 13:51", "", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0020_club_tournament_member'),", "    ]", "", "    operations = [", "        migrations.RemoveField(", "            model_name='tournament',", "            name='tournament_members',", "        ),", "        migrations.AddField(", "            model_name='club',", "            name='tournament_list',", "            field=models.ManyToManyField(blank=True, related_name='tournament_list', to='clubs.Tournament'),", "        ),", "    ]"], "clubs/migrations/0022_merge_0019_club_created_at_0021_auto_20211209_1351.py": ["# Generated by Django 3.2.8 on 2021-12-10 10:54", "", "from django.db import migrations", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0019_club_created_at'),", "        ('clubs', '0021_auto_20211209_1351'),", "    ]", "", "    operations = [", "    ]"], "clubs/migrations/0023_auto_20211210_2110.py": ["# Generated by Django 3.2.8 on 2021-12-10 21:10", "", "from django.conf import settings", "from django.db import migrations, models", "import django.db.models.deletion", "import django.utils.timezone", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0022_merge_0019_club_created_at_0021_auto_20211209_1351'),", "    ]", "", "    operations = [", "        migrations.RemoveField(", "            model_name='user',", "            name='tournament',", "        ),", "        migrations.AddField(", "            model_name='tournament',", "            name='participants',", "            field=models.ManyToManyField(related_name='participants', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.AddField(", "            model_name='user',", "            name='tournaments',", "            field=models.ManyToManyField(blank=True, related_name='tournament', to='clubs.Tournament'),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='created_at',", "            field=models.DateTimeField(default=django.utils.timezone.now),", "        ),", "        migrations.CreateModel(", "            name='Match',", "            fields=[", "                ('matchId', models.AutoField(primary_key=True, serialize=False)),", "                ('date', models.DateTimeField()),", "                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clubs.club')),", "                ('player1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player1', to=settings.AUTH_USER_MODEL)),", "                ('player2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player2', to=settings.AUTH_USER_MODEL)),", "                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clubs.tournament')),", "            ],", "        ),", "    ]"], "clubs/migrations/0024_alter_tournament_number_of_participants.py": ["# Generated by Django 3.2.8 on 2021-12-10 22:48", "", "import django.core.validators", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0023_auto_20211210_2110'),", "    ]", "", "    operations = [", "        migrations.AlterField(", "            model_name='tournament',", "            name='number_of_participants',", "            field=models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(16)]),", "        ),", "    ]"], "clubs/migrations/0025_rename_participants_tournament_participants_list.py": ["# Generated by Django 3.2.8 on 2021-12-11 11:57", "", "from django.db import migrations", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0024_alter_tournament_number_of_participants'),", "    ]", "", "    operations = [", "        migrations.RenameField(", "            model_name='tournament',", "            old_name='participants',", "            new_name='participants_list',", "        ),", "    ]"], "clubs/migrations/0026_tournament_matches_list.py": ["# Generated by Django 3.2.8 on 2021-12-11 12:30", "", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0025_rename_participants_tournament_participants_list'),", "    ]", "", "    operations = [", "        migrations.AddField(", "            model_name='tournament',", "            name='matches_list',", "            field=models.ManyToManyField(related_name='matches_list', to='clubs.Match'),", "        ),", "    ]"], "clubs/migrations/0027_alter_match_options.py": ["# Generated by Django 3.2.8 on 2021-12-11 16:33", "", "from django.db import migrations", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0026_tournament_matches_list'),", "    ]", "", "    operations = [", "        migrations.AlterModelOptions(", "            name='match',", "            options={'ordering': ['date']},", "        ),", "    ]"], "clubs/migrations/0028_match_round.py": ["# Generated by Django 3.2.8 on 2021-12-11 19:19", "", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0027_alter_match_options'),", "    ]", "", "    operations = [", "        migrations.AddField(", "            model_name='match',", "            name='round',", "            field=models.IntegerField(default=0),", "        ),", "    ]"], "clubs/migrations/0029_auto_20211212_1249.py": ["# Generated by Django 3.2.8 on 2021-12-12 12:49", "", "from django.conf import settings", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0028_match_round'),", "    ]", "", "    operations = [", "        migrations.AddField(", "            model_name='tournament',", "            name='winners_list',", "            field=models.ManyToManyField(related_name='winners_list', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='number_of_participants',", "            field=models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16)]),", "        ),", "        migrations.AlterField(", "            model_name='tournament',", "            name='short_description',", "            field=models.CharField(blank=True, max_length=100),", "        ),", "        migrations.AlterField(", "            model_name='user',", "            name='chess_experience_level',", "            field=models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)]),", "        ),", "    ]"], "clubs/migrations/0030_tournament_all_winners_list.py": ["# Generated by Django 3.2.8 on 2021-12-12 15:05", "", "from django.conf import settings", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0029_auto_20211212_1249'),", "    ]", "", "    operations = [", "        migrations.AddField(", "            model_name='tournament',", "            name='all_winners_list',", "            field=models.ManyToManyField(related_name='all_winners_list', to=settings.AUTH_USER_MODEL),", "        ),", "    ]"], "clubs/migrations/0031_match_match_winner_list.py": ["# Generated by Django 3.2.8 on 2021-12-12 15:51", "", "from django.conf import settings", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0030_tournament_all_winners_list'),", "    ]", "", "    operations = [", "        migrations.AddField(", "            model_name='match',", "            name='match_winner_list',", "            field=models.ManyToManyField(related_name='match_winner_list', to=settings.AUTH_USER_MODEL),", "        ),", "    ]"], "clubs/migrations/0032_tournament_all_matches_list.py": ["# Generated by Django 3.2.8 on 2021-12-12 17:50", "", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0031_match_match_winner_list'),", "    ]", "", "    operations = [", "        migrations.AddField(", "            model_name='tournament',", "            name='all_matches_list',", "            field=models.ManyToManyField(related_name='all_matches_list', to='clubs.Match'),", "        ),", "    ]"], "clubs/migrations/0033_tournament_current_particpants.py": ["# Generated by Django 3.2.8 on 2021-12-12 18:04", "", "from django.conf import settings", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0032_tournament_all_matches_list'),", "    ]", "", "    operations = [", "        migrations.AddField(", "            model_name='tournament',", "            name='current_particpants',", "            field=models.ManyToManyField(related_name='current_particpants_list', to=settings.AUTH_USER_MODEL),", "        ),", "    ]"], "clubs/migrations/0034_auto_20211212_2133.py": ["# Generated by Django 3.2.8 on 2021-12-12 21:33", "", "from django.conf import settings", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0033_tournament_current_particpants'),", "    ]", "", "    operations = [", "        migrations.RemoveField(", "            model_name='match',", "            name='match_winner_list',", "        ),", "        migrations.AddField(", "            model_name='match',", "            name='winner',", "            field=models.ManyToManyField(related_name='winner', to=settings.AUTH_USER_MODEL),", "        ),", "    ]"], "clubs/migrations/0035_auto_20211212_2146.py": ["# Generated by Django 3.2.8 on 2021-12-12 21:46", "", "from django.conf import settings", "from django.db import migrations, models", "import django.db.models.deletion", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0034_auto_20211212_2133'),", "    ]", "", "    operations = [", "        migrations.AddField(", "            model_name='tournament',", "            name='tournament_winner',", "            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),", "        ),", "        migrations.RemoveField(", "            model_name='match',", "            name='winner',", "        ),", "        migrations.AddField(", "            model_name='match',", "            name='winner',", "            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),", "        ),", "    ]"], "clubs/migrations/0036_auto_20211213_1224.py": ["# Generated by Django 3.2.8 on 2021-12-13 12:24", "", "from django.conf import settings", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0035_auto_20211212_2146'),", "    ]", "", "    operations = [", "        migrations.RemoveField(", "            model_name='tournament',", "            name='current_particpants',", "        ),", "        migrations.AddField(", "            model_name='tournament',", "            name='current_participants',", "            field=models.ManyToManyField(related_name='current_particispants_list', to=settings.AUTH_USER_MODEL),", "        ),", "    ]"], "clubs/migrations/0037_tournament_removed_participants.py": ["# Generated by Django 3.2.8 on 2021-12-13 15:45", "", "from django.conf import settings", "from django.db import migrations, models", "", "", "class Migration(migrations.Migration):", "", "    dependencies = [", "        ('clubs', '0036_auto_20211213_1224'),", "    ]", "", "    operations = [", "        migrations.AddField(", "            model_name='tournament',", "            name='removed_participants',", "            field=models.ManyToManyField(related_name='removed_particispants_list', to=settings.AUTH_USER_MODEL),", "        ),", "    ]"], "clubs/models.py": ["from datetime import date", "    chess_experience_level = models.IntegerField(choices=chess_experience_level_choices, blank=True, null=True)", "    officers = models.ManyToManyField(User, related_name='officers')", "    members = models.ManyToManyField(User, related_name='members')", "    applicants = models.ManyToManyField(User, related_name='applicants')", "    tournament_name = models.CharField(max_length=20, blank=False, unique=True)", "    short_description =  models.CharField(max_length=100, blank=True)", "    tournament_choices = zip( range(2,17), range(2,17) )", "    number_of_participants = models.IntegerField(choices=tournament_choices, blank=False)", "    deadline = models.DateTimeField(default=timezone.now)", "    start_time = models.DateTimeField(default=timezone.now)", "    tournament_winner = models.ForeignKey(User, on_delete=models.CASCADE, blank=True, null=True, related_name='+')", "", "            # print(self.start_time)", "                        # date = timezone.now() + timezone.timedelta(days=1),", "                        # date = timezone.now(),", "            # club.members.add(officer)"], "clubs/templates/generate_matches.html": ["", "", "", "<!--       {% if second_matches_list%}", "        <h5>Round Two:</h5>", "          {% include 'partials/make_matches.html' with current_tournament=current_tournament current_club=current_club matches_list=second_matches_list match_time=second_match_time%}", "       {% endif %}", "       {% if third_matches_list%}", "        <h5>Round Tree:</h5>", "          {% include 'partials/make_matches.html' with current_tournament=current_tournament current_club=current_club matches_list=third_matches_list match_time=third_match_time%}", "       {% endif %}", "       {% if fourth_matches_list%}", "        <h5>Round Four:</h5>", "          {% include 'partials/make_matches.html' with current_tournament=current_tournament current_club=current_club matches_list=fourth_matches_list match_time=fourth_match_time%}", "       {% endif %} -->"], "clubs/templates/member_list_for_members.html": ["      <h1>All Members</h1>"], "clubs/templates/partials/club_profile.html": ["        <form action=\"{% url 'apply_membership' current_club.id %}\" method=\"get\">", "          <button class=\"btn btn-primary\">Apply for membership</button>", "        </form>", "        {%else%}", "        {% if current_user in current_club.members.all %}", "          <p><b>My status: </b><big> Member</big><p><br>", "        {% endif %}", "        {% if current_user in current_club.officers.all %}", "          <p><b>My status: </b><big> Officer</big><p><br>", "        {% endif %}", "        {% if current_user in current_club.applicants.all %}", "        {% endif %}", "        {% if current_user == current_club.club_owner %}", "        {% endif %}", "", "          {% endif %}"], "clubs/templates/tournament_joined.html": ["       <h1>My Tournaments</h1>"], "clubs/templates/tournament_list.html": ["                {% if tournament.start_time > now%}", "                  <form action=\"{% url 'co_organise' club_id=current_club.id tournament_id=tournament.id%}\" method=\"get\">"], "clubs/templates/winners_list.html": ["        <!-- {% for member in members %} -->", "        <!-- {% endfor %} -->"], "clubs/tests/forms/test_log_in_form.py": ["from clubs.forms import LogInForm", "# from . import fixtures"], "clubs/tests/forms/test_password_form.py": ["        form = PasswordForm()", "        form = PasswordForm(data=self.form_input)", "        form = PasswordForm(data=self.form_input)", "        form = PasswordForm(data=self.form_input)", "        form = PasswordForm(data=self.form_input)"], "clubs/tests/forms/test_sign_up_form.py": ["        # chess_experience_level_field = form.fields['chess_experience_level']", "        # self.assertFalse(isinstance(chess_experience_level_field, forms.IntegerField))", "        # self.assertIn()"], "clubs/tests/models/test_tournament_model.py": ["        self._assert_tournament_is_valid()"], "clubs/tests/models/test_user_model.py": ["    def test_chess_experience_level_default_0(self):", "        # self.user.chess_experience_level =", "        self._assert_user_is_valid()", "    def test_chess_experience_level_max_value_100(self):", "        self.user.chess_experience_level = 101"], "clubs/tests/views/test_applicant_list_view.py": ["        self._create_test_applicants(14)", "        self.assertEqual(len(response.context['applicants']), 15)", "        for user_id in range(15-1):", "            # self.assertContains(response, f'Last{user_id}')", "            # EXTENDED THIS TEST FOR SHOW USER FUNCTIONALITY:", "            # user = User.objects.get(email=f'{user_id}@example.org')", "            # user_url = reverse('show_user', kwargs={'user_id': user.id})", "            # self.assertContains(response, user_url)"], "clubs/tests/views/test_approve_toggle_view.py": ["        redirect_url = reverse('user_profile')"], "clubs/tests/views/test_co_organiser_list_view.py": ["        self.url = reverse('co_organise', kwargs={'club_id': self.club.id, 'tournament_id':self.tournament.id})", "            # path('club/<int:club_id>/co_organise/<int:tournament_id>', views.co_organise, name='co_organise'),", "", "            # self.assertContains(response, f'Last{user_id}')", "            # EXTENDED THIS TEST FOR SHOW USER FUNCTIONALITY:", "            # user = User.objects.get(email=f'{user_id}@example.org')", "            # user_url = reverse('show_user', kwargs={'user_id': user.id})", "            # self.assertContains(response, user_url)", ""], "clubs/tests/views/test_create_club_view.py": ["        response_url = reverse('user_profile')", "        self.assertTemplateUsed(response, 'user_profile.html')"], "clubs/tests/views/test_demote_toggle_view.py": ["        redirect_url = reverse('user_profile')"], "clubs/tests/views/test_generate_match_view.py": ["        # self.club.members.add(self.other_user1.get())", "            status_code=302, target_status_code=200, fetch_redirect_response=True", "        )", "        # response = self.client.get(self.url, self.data, follow=True)", "        # self._create_tournament_participants_(16-3)", "        #3 particpants => 2 play", "        # self.assertEqual(response.status_code, 200)", "        # self.assertTemplateUsed(response, 'generate_matches.html')", "        redirect_url = reverse('tournament_list', kwargs={'club_id': self.club.id})", "        redirect_url = reverse('tournament_list', kwargs={'club_id': self.club.id})"], "clubs/tests/views/test_generate_next_matches_view.py": ["        redirect_url = reverse('tournament_list', kwargs={'club_id': self.club.id})"], "clubs/tests/views/test_member_list_for_members_view.py": ["", "", "", "", "", "        self._create_test_members(14)", "        self.assertEqual(len(response.context['members']), 15)", "        for user_id in range(15-1):", "", "    def test_get_user_list_redirects_when_not_logged_in(self):", "          redirect_url = reverse_with_next('log_in', self.url)", "          response = self.client.get(self.url)", "          self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", ""], "clubs/tests/views/test_member_list_for_staff_view.py": ["        self.club.members.add(self.user)", "", "", "", "", "    def test_get_member_list(self):", "        self._create_test_members(14)", "        self.assertEqual(len(response.context['members']), 15)", "        for user_id in range(15-1):", "            # self.assertContains(response, f'Last{user_id}')", "            # EXTENDED THIS TEST FOR SHOW USER FUNCTIONALITY:", "            # user = User.objects.get(email=f'{user_id}@example.org')", "            # user_url = reverse('show_user', kwargs={'user_id': user.id})", "            # self.assertContains(response, user_url)", "", "    def test_get_user_list_redirects_when_not_logged_in(self):", "          redirect_url = reverse_with_next('log_in', self.url)", "          response = self.client.get(self.url)", "          self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "                username = f'user{user_id}@test.org',"], "clubs/tests/views/test_officer_list_view.py": ["                'clubs/tests/fixtures/default_user.json']", "        self.club.officers.add(self.user)", "", "    def test_user_list_url(self):", "        self.assertEqual(f'/club/{self.club.id}/officers/',self.url)", "", "", "        self._create_test_officers(14)", "        self.assertEqual(len(response.context['officers']), 15)", "        for user_id in range(15-1):", "            # self.assertContains(response, f'Last{user_id}')", "            # EXTENDED THIS TEST FOR SHOW USER FUNCTIONALITY:", "            # user = User.objects.get(email=f'{user_id}@example.org')", "            # user_url = reverse('show_user', kwargs={'user_id': user.id})", "            # self.assertContains(response, user_url)", ""], "clubs/tests/views/test_password_view.py": ["            'password': 'Password123',", "    def test_password_change_unsuccesful_without_password_confirmation(self):", "        self.form_input['password_confirmation'] = 'WrongPassword123'", "    def test_post_profile_redirects_when_not_logged_in(self):", "        redirect_url = reverse_with_next('log_in', self.url)", "        response = self.client.post(self.url, self.form_input)", "        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)"], "clubs/tests/views/test_profile_view.py": ["    def test_unsuccessful_profile_update_due_to_duplicate_username(self):"], "clubs/tests/views/test_promote_toggle_view.py": ["        redirect_url = reverse('user_profile')"], "clubs/tests/views/test_show_clubs_view.py": ["        self.assertEqual(f'/club/{self.user.id}',self.url)", "", "# NEED TO INCLUDE FOR CLUB PROFILE when club selected-----", "", "", "", "        #self._create_test_clubs(14)", "", "        #self.assertEqual(len(response.context['officers']), 14)", "        ##for user_id in range(15-1):", "            # self.assertContains(response, f'Last{user_id}')", "            # EXTENDED THIS TEST FOR SHOW USER FUNCTIONALITY:", "            # user = User.objects.get(email=f'{user_id}@example.org')", "            # user_url = reverse('show_club', kwargs={'club_id': self.club.id})", "            # self.assertContains(response, user_url)"], "clubs/tests/views/test_sign_up_toggle_view.py": ["", "", "        redirect_url = reverse('user_profile')"], "clubs/tests/views/test_transfer_toggle_view.py": ["                'clubs/tests/fixtures/other_users.json'", "                ]", "        redirect_url = reverse('user_profile')", "        response_url = reverse('member_list_for_staff', kwargs={'club_id': self.club.id})", "        self.assertTemplateUsed(response, 'member_list_for_staff.html')"], "clubs/tests/views/test_withdraw_toggle_view.py": ["        redirect_url = reverse('user_profile')"], "clubs/views.py": ["from django.contrib import messages", "from django.shortcuts import render, redirect", "from .forms import SignUpForm, LogInForm, UserForm, PasswordForm, ClubForm, TournamentForm", "from django.core.exceptions import ObjectDoesNotExist", "from django.contrib.auth import authenticate, login, logout", "from django.contrib.auth.decorators import login_required", "from django.contrib.auth.models import Group", "from .models import User, Club, Tournament, Match", "from .helpers import login_prohibited, member_only, staff_only, owner_only, organiser_only", "from django.http import HttpResponseForbidden", "from django.utils import timezone", "import random", "from django.contrib.auth.hashers import check_password", "", "def home(request):", "    return render(request, 'home.html')", "", "", "@login_required", "def user_profile(request):", "    current_user = request.user", "    clubs = Club.objects.all()", "    return render(request, 'user_profile.html',", "                    {'current_user': current_user,", "                     'clubs': clubs,", "                    }", "                 )", "", "@login_prohibited", "def sign_up(request):", "    if request.method == 'POST':", "        form = SignUpForm(request.POST)", "        if form.is_valid():", "            user = form.save()", "            applicants, created = Group.objects.get_or_create(name = 'applicants')", "            applicants.user_set.add(user)", "            login(request, user)", "            return redirect('user_profile')", "    else:", "        form = SignUpForm()", "    return render(request, 'sign_up.html', {'form': form})", "", "@login_required", "@member_only", "def member_list_for_members(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    members = current_club.members.all()", "    return render(request, 'member_list_for_members.html',", "                    {'members': members,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club", "                    }", "                 )", "", "@login_required", "@staff_only", "def member_list_for_staff(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    members = current_club.members.all()", "    return render(request, 'member_list_for_staff.html',", "                    {'members': members,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club", "                    }", "                 )", "", "@login_required", "@staff_only", "def applicant_list(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    applicants = current_club.applicants.all()", "    return render(request, 'applicant_list.html',", "                    {'applicants': applicants,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club", "                    }", "                 )", "", "@login_required", "def officer_list(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    officers = current_club.officers.all()", "    return render(request, 'officer_list.html',", "                    {'officers': officers,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club", "                    }", "                 )", "", "@login_required", "def show_user(request, user_id):", "    current_user = request.user", "    clubs = Club.objects.all()", "    try:", "        user = User.objects.get(id=user_id)", "    except ObjectDoesNotExist:", "        return redirect('user_profile')", "    else:", "        return render(request, 'show_user.html',", "            {'user': user,", "             'current_user': current_user,", "             'clubs': clubs,", "            }", "        )", "", "@login_prohibited", "def log_in(request):", "    if request.method == 'POST':", "        form = LogInForm(request.POST)", "        if form.is_valid():", "            email = form.cleaned_data.get('email')", "            password = form.cleaned_data.get('password')", "            user = authenticate(email=email, password=password)", "            if user is not None:", "                login(request, user)", "                return redirect('user_profile')", "        messages.add_message(request, messages.ERROR, \"The credentials provided were invalid!\")", "    form = LogInForm()", "    return render(request, 'log_in.html', {'form': form})", "", "def log_out(request):", "    logout(request)", "    return redirect('home')", "", "@login_required", "def profile(request):", "    current_user = request.user", "    clubs = Club.objects.all()", "    if request.method == 'POST':", "        form = UserForm(instance=current_user, data=request.POST)", "        if form.is_valid():", "            messages.add_message(request, messages.SUCCESS, \"Profile updated!\")", "            form.save()", "            return redirect('user_profile')", "    else:", "        form = UserForm(instance=current_user)", "    return render(request, 'profile.html',", "                    {'form': form,", "                     'current_user': current_user,", "                     'clubs': clubs}", "                 )", "", "@login_required", "def password(request):", "    current_user = request.user", "    clubs = Club.objects.all()", "    if request.method == 'POST':", "        form = PasswordForm(data=request.POST)", "        if form.is_valid():", "            password = form.cleaned_data.get('password')", "            if check_password(password, current_user.password):", "                new_password = form.cleaned_data.get('new_password')", "                current_user.set_password(new_password)", "                current_user.save()", "                login(request, current_user)", "                messages.add_message(request, messages.SUCCESS, \"Password updated!\")", "                return redirect('user_profile')", "    form = PasswordForm()", "    return render(request, 'password.html',", "                    {'form': form,", "                     'current_user': current_user,", "                     'clubs': clubs}", "                 )", "", "", "@login_required", "@staff_only", "def approve_toggle(request, user_id, club_id):", "    current_user = request.user", "    try:", "        user = User.objects.get(id=user_id)", "        club = Club.objects.get(id=club_id)", "        current_user.toggle_approve(user, club)", "    except ObjectDoesNotExist:", "        return redirect('applicant_list', club_id)", "    else:", "        return redirect('applicant_list', club_id)", "", "", "@login_required", "@staff_only", "def cancel_toggle(request, user_id, club_id):", "    current_user = request.user", "    try:", "        user = User.objects.get(id=user_id)", "        club = Club.objects.get(id=club_id)", "        current_user.toggle_cancel(user, club)", "    except ObjectDoesNotExist:", "        return redirect('member_list_for_staff', club_id)", "    else:", "        return redirect('member_list_for_staff', club_id)", "", "@login_required", "@owner_only", "def promote_toggle(request, user_id, club_id):", "    current_user = request.user", "    try:", "        user = User.objects.get(id=user_id)", "        club = Club.objects.get(id=club_id)", "        current_user.toggle_promote(user, club)", "    except ObjectDoesNotExist:", "        return redirect('member_list_for_staff', club_id)", "    else:", "        return redirect('member_list_for_staff', club_id)", "", "@login_required", "@owner_only", "def demote_toggle(request, user_id, club_id):", "    current_user = request.user", "    try:", "        user = User.objects.get(id=user_id)", "        club = Club.objects.get(id=club_id)", "        current_user.toggle_demote(user, club)", "    except ObjectDoesNotExist:", "        return redirect('officer_list', club_id)", "    else:", "        return redirect('officer_list', club_id)", "", "@login_required", "@owner_only", "def transfer_toggle(request, user_id, club_id):", "    current_user = request.user", "    try:", "        user = User.objects.get(id=user_id)", "        club = Club.objects.get(id=club_id)", "        current_user.toggle_transfer(user, club)", "    except ObjectDoesNotExist:", "        return redirect('officer_list', club_id)", "    else:", "        return redirect('officer_list', club_id)", "", "", "@login_required", "def create_club(request, user_id):", "    if request.method == 'POST':", "        if request.user.is_authenticated:", "            current_user = request.user", "            form = ClubForm(request.POST)", "            if form.is_valid():", "                club_name = form.cleaned_data.get('club_name')", "                location = form.cleaned_data.get('location')", "                description = form.cleaned_data.get('description')", "                club = Club.objects.create(club_owner = current_user, club_name = club_name, location = location, description = description)", "                club.club_owner.clubs.add(club)", "                # club.officers.add(user)", "                return redirect('user_profile')", "            else:", "                return render(request, 'create_club.html', {'form': form, 'current_user': current_user})", "        else:", "            return redirect('log_in')", "    else:", "        # return HttpResponseForbidden()", "        form = ClubForm()", "        current_user = request.user", "    return render(request, 'create_club.html', {'form': form, 'current_user': current_user})", "", "@login_required", "@staff_only", "def create_tournament(request, club_id):", "    clubs = Club.objects.all()", "    current_club = Club.objects.get(id=club_id)", "    if request.method == 'POST':", "        if request.user.is_authenticated:", "            current_user = request.user", "", "            form = TournamentForm(request.POST)", "            if form.is_valid():", "                tournament_name = form.cleaned_data.get('tournament_name')", "                short_description = form.cleaned_data.get('short_description')", "                number_of_participants = form.cleaned_data.get('number_of_participants')", "                deadline = form.cleaned_data.get('deadline')", "                start_time = form.cleaned_data.get('start_time')", "                tournament = Tournament.objects.create(tournament_name = tournament_name,", "                                                        short_description = short_description,", "                                                        number_of_participants = number_of_participants,", "                                                        club = current_club,", "                                                        deadline = deadline,", "                                                        start_time = start_time)", "                tournament.organisers.add(current_user)", "                current_club.tournaments.add(tournament)", "                current_club.tournament_list.add(tournament)", "                return redirect('tournament_list', club_id)", "            else:", "                return render(request, 'create_tournament.html',", "                                {'form': form,", "                                 'current_user': current_user,", "                                 'current_club': current_club,", "                                 'clubs': clubs", "                                }", "                            )", "        else:", "            return redirect('log_in')", "    else:", "        form = TournamentForm()", "        current_user = request.user", "    return render(request, 'create_tournament.html',", "                    {'form': form,", "                     'current_user': current_user,", "                     'current_club': current_club,", "                     'clubs': clubs", "                    }", "                )", "", "@login_required", "def show_club(request, club_id):", "    current_user = request.user", "    clubs = Club.objects.all()", "    now = timezone.now", "    try:", "        current_club = Club.objects.get(id=club_id)", "        tournaments = current_club.tournaments.all()", "    except ObjectDoesNotExist:", "        return redirect('user_profile')", "    else:", "        return render(request, 'show_club.html',", "            {'current_club': current_club,", "             'current_user': current_user,", "             'clubs': clubs,", "             'tournaments': tournaments,", "             'now': now", "            }", "        )", "", "@login_required", "def apply_membership(request, club_id):", "    current_user = request.user", "    clubs = Club.objects.all()", "    try:", "        current_club = Club.objects.get(id=club_id)", "        current_club.applicants.add(current_user)", "        current_user.clubs.add(current_club)", "    except ObjectDoesNotExist:", "        return redirect('user_profile')", "    else:", "        return render(request, 'show_club.html',", "            {'current_club': current_club,", "             'current_user': current_user,", "             'clubs': clubs", "            }", "        )", "", "@login_required", "def edit_tournament_info(request, club_id, tournament_id):", "    current_user = request.user", "    clubs = Club.objects.all()", "    current_club = Club.objects.get(id=club_id)", "    current_tournament = Tournament.objects.get(id=tournament_id)", "    if request.method == 'POST':", "        form = TournamentForm(data = request.POST, instance=current_tournament)", "        if form.is_valid():", "            messages.add_message(request, messages.SUCCESS, \"Successfully updated!\")", "            form.save()", "            return redirect('tournament_list', club_id)", "    else:", "        form = TournamentForm(instance = current_tournament)", "    return render(request, 'edit_tournament_info.html',", "                    {'form': form,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club,", "                     'current_tournament': current_tournament", "                    }", "                 )", "", "", "", "", "@login_required", "@staff_only", "@organiser_only", "def co_organise(request, club_id, tournament_id):", "    current_user = request.user", "    clubs = Club.objects.all()", "    current_club = Club.objects.get(id=club_id)", "    officers = current_club.officers.all()", "    current_tournament = Tournament.objects.get(id=tournament_id)", "    organisers = current_tournament.organisers.all()", "    return render(request, 'co_organiser_list.html',", "                    {'officers': officers,", "                     'organisers': organisers,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club,", "                     'tournament': current_tournament", "                    }", "                 )", "", "@login_required", "@staff_only", "@organiser_only", "def co_organise_toggle(request, club_id, tournament_id, user_id):", "    try:", "        current_user = request.user", "        user =  User.objects.get(id=user_id)", "        current_club = Club.objects.get(id=club_id)", "        current_tournament = Tournament.objects.get(id=tournament_id)", "        current_tournament.organisers.add(user)", "    except ObjectDoesNotExist:", "        return redirect('co_organise', club_id, tournament_id)", "    else:", "        return redirect('co_organise', club_id, tournament_id)", "", "", "@login_required", "def tournament_list(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    tournaments = current_club.tournaments.all()", "", "#THIS IS MORE MATCHES - FARIHA WAS TESTING WITH IT --- KEEP FOR NOW PLEASE!!!", "    # tournament_list = current_club.tournament_list.all()", "    # for t in tournament_list:", "    #     t.all_winners_list.clear()", "    #     t.winners_list.clear()", "    #     t.tournament_winner = None", "    #     print(t.tournament_winner)", "    #     t.matches_list.clear()", "    #     t.all_matches_list.clear()", "    #     if t.tournament_winner:", "    #         t.tournament_winner = None", "    #         t.save()", "    #     t.save()", "", "", "    now = timezone.now", "    return render(request, 'tournament_list.html',", "                    {'tournaments': tournaments,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club,", "                     'now': now,", "                    }", "                 )", "", "@login_required", "@member_only", "def tournament_joined(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    tournament_joined = current_user.tournaments.all()", "    now = timezone.now", "    return render(request, 'tournament_joined.html',", "                    {'tournament_joined': tournament_joined,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club,", "                     'now': now,", "                    }", "                 )", "", "@login_required", "@member_only", "def show_tournament(request, tournament_id):", "    current_user = request.user", "    clubs = Club.objects.all()", "    try:", "        tournament = Tournament.objects.get(id=tournament_id)", "    except ObjectDoesNotExist:", "        return redirect('user_profile')", "    else:", "        return render(request, 'show_tournament.html',", "            {'tournament': tournament,", "             'current_user': current_user,", "             'clubs': clubs,", "            }", "        )", "#", "@login_required", "@member_only", "def sign_up_toggle(request, tournament_id, club_id):", "    current_user = request.user", "    try:", "        tournament = Tournament.objects.get(id=tournament_id)", "        club = Club.objects.get(id=club_id)", "        current_user.toggle_sign_up(tournament, club)", "    except ObjectDoesNotExist:", "        return redirect('tournament_list', club_id)", "    else:", "        return redirect('tournament_list', club_id)", "", "", "@login_required", "@member_only", "def withdraw_toggle(request, tournament_id, club_id):", "    current_user = request.user", "    try:", "        tournament = Tournament.objects.get(id=tournament_id)", "        club = Club.objects.get(id=club_id)", "        current_user.toggle_withdraw(tournament, club)", "    except ObjectDoesNotExist:", "        return redirect('tournament_joined', club_id)", "    else:", "        return redirect('tournament_joined', club_id)", "", "", "", "", "", "", "", "@login_required", "@organiser_only", "def generate_matches(request, tournament_id, club_id):", "    try:", "        clubs = Club.objects.all()", "        current_user = request.user", "        current_club = Club.objects.get(id=club_id)", "        current_tournament = Tournament.objects.get(id=tournament_id)", "", "# THIS IS MORE MATCHES - FARIHA WAS TESTING WITH IT --- KEEP FOR NOW PLEASE!!!", "#         Match.objects.all().delete()", "        # current_tournament.matches_list.clear()", "        # current_tournament.winners_list.clear()", "        # tournament = Tournament.objects.all()", "#         --^^^ USE THIS AFTER CLICKING 'GENERATE_MATCHES', THEN COMMENT OUT AGAIN", "#         USE IT TO CLEAR THE WINNERS FOR A TOURNAMENT - FOR DEV PURPOSES", "        current_tournament.tournament_winner= None", "        current_tournament.current_participants.clear()", "        current_tournament.removed_participants.clear()", "", "        all_participants_list = current_tournament.participants_list.all()", "        participants_list_count = len(all_participants_list)", "        previous_power_of_two = current_tournament.power_Of_Two(participants_list_count)", "        current_tournament.make_Participants_Power_Of_2(previous_power_of_two)", "        #Change current participants list to include the highest power of 2 number of particpants", "        # - if number of particpants is not a power of 2", "        participants_list = current_tournament.current_participants.all()", "        matches_list = current_tournament.matches_list.all()", "        winners_list = current_tournament.winners_list.all()", "        now = timezone.now()", "        if all_participants_list.count() <= 1 and current_tournament.start_time >now:", "            messages.add_message(request, messages.ERROR, \"Not enough participants!\")", "        else:", "            if matches_list.count() == 0:    #I.E. NO MATCHES HAVE BEEN MADE FOR THIS ROUND YET!", "                round_input = 1  #first round", "                current_tournament.create_matches(round_input, participants_list)", "                matches_list = current_tournament.matches_list.all()", "                winners_list = current_tournament.winners_list.all()", "", "                return render(request, 'generate_matches.html',", "                                {'current_user': current_user,", "                                 'clubs': clubs,", "                                 'current_club': current_club,", "                                 'current_tournament': current_tournament,", "                                 'matches_list': matches_list,", "                                 'all_participants_list': all_participants_list,", "                                 'winners_list': winners_list,", "                                 'now':now", "                                }", "                             )", "            else:", "                return render(request, 'generate_matches.html',   #redisplay html template with selected winners + unselected winners", "                                {'current_user': current_user,", "                                 'clubs': clubs,", "                                 'current_club': current_club,", "                                 'current_tournament': current_tournament,", "                                 'matches_list': matches_list,", "                                 'all_participants_list': all_participants_list,", "                                 'winners_list': winners_list,", "                                 'now':now", "                                }", "                             )", "    except ObjectDoesNotExist:", "        return redirect('tournament_list', club_id)", "    else:", "        return redirect('tournament_list', club_id)", "", "", "", "", "@login_required", "@organiser_only", "def log_winners(request, tournament_id, club_id, user_id, match_id):", "    try:", "        current_user = request.user", "        winner_user =  User.objects.get(id=user_id)", "        current_club = Club.objects.get(id=club_id)", "        current_match = Match.objects.get(matchId = match_id)", "", "        current_tournament = Tournament.objects.get(id=tournament_id)", "", "        if winner_user not in current_tournament.organisers.all():", "            if winner_user == current_match.player1 or winner_user == current_match.player2:", "                current_tournament.winners_list.add(winner_user)", "                current_tournament.all_winners_list.add(winner_user)", "", "            # current_match = Match.objects.get(matchId = match_id)", "                current_match.winner = winner_user", "", "        if current_tournament.winners_list.count() == 1 and current_tournament.matches_list.count() ==1:", "            current_tournament.tournament_winner = winner_user", "            current_tournament.save()", "", "    except ObjectDoesNotExist:", "        return redirect('generate_matches', club_id, tournament_id)", "    else:", "        if current_match.round == 1:", "            return redirect('generate_matches', club_id, tournament_id)", "        else:", "            return redirect('generate_next_matches', club_id, tournament_id)", "", "", "", "", "", "@login_required", "@organiser_only", "def next_match(request, tournament_id, club_id):", "    try:", "        current_tournament = Tournament.objects.get(id=tournament_id)", "        current_winners = current_tournament.winners_list.all()", "", "        if current_winners.count() != 1 :", "            current_tournament.current_participants.clear()", "", "            for winner in current_winners:", "                current_tournament.current_participants.add(winner)   #Move all winners from last round into current_participants_list", "", "            current_tournament.winners_list.clear()    #clear winners for this round.", "", "    except ObjectDoesNotExist:", "        return redirect('generate_next_matches',  club_id, tournament_id)", "    else:", "        return redirect('generate_next_matches',  club_id, tournament_id)", "", "", "", "", "", "@login_required", "@organiser_only", "def generate_next_matches(request, tournament_id, club_id):", "    try:", "        clubs = Club.objects.all()", "        current_user = request.user", "        current_club = Club.objects.get(id=club_id)", "        current_tournament = Tournament.objects.get(id=tournament_id)", "", "        all_participants_list = current_tournament.participants_list.all()", "        participants_list = current_tournament.current_participants.all()", "", "", "        round_input = 2  #All other rounds have 'round =2' except first round has round 2", "        current_tournament.create_matches(round_input, participants_list)", "        matches_list = current_tournament.matches_list.all()", "        now = timezone.now()", "", "        winners_list = current_tournament.winners_list.all()", "", "        return render(request, 'generate_matches.html',", "                        {'current_user': current_user,", "                         'clubs': clubs,", "                         'current_club': current_club,", "                         'current_tournament': current_tournament,", "                         'matches_list': matches_list,", "                         'winners_list': winners_list,", "                         'all_participants_list': all_participants_list,", "                         'now':now", "                        }", "                     )", "", "    except ObjectDoesNotExist:", "        return redirect('tournament_list', club_id)", "    else:", "        return redirect('tournament_list', club_id)"], "system/settings.py": ["    'widget_tweaks'"], "system/urls.py": ["    path('sign_up/', views.sign_up, name='sign_up'),", "    path('log_in/', views.log_in, name='log_in'),", "    path('club/<int:club_id>/applicants/', views.applicant_list, name='applicant_list'),", "    path('club/<int:club_id>/officers/', views.officer_list, name='officer_list'),", "    path('club/<int:club_id>/members/', views.member_list_for_staff, name='member_list_for_staff'),", "    path('club/<int:club_id>/member_list/', views.member_list_for_members, name='member_list_for_members'),", "    path('user/<int:user_id>', views.show_user, name='show_user'),", "    path('profile/', views.profile, name='profile'),", "    path('password/', views.password, name='password'),", "    path('club/<int:club_id>', views.show_club, name='show_club'),", "    # path('club_page/', views.club_page, name = 'club_page'),", "    path('create_club/<int:user_id>', views.create_club, name='create_club'),", "    path('club/<int:club_id>/create_tournament/', views.create_tournament, name='create_tournament'),", "    path('apply/<int:club_id>', views.apply_membership, name='apply_membership'),", "    path('club/<int:club_id>/edit_tournament_info/<int:tournament_id>', views.edit_tournament_info, name='edit_tournament_info'),", "    path('club/<int:club_id>/co_organise/<int:tournament_id>', views.co_organise, name='co_organise'),", "    path('club/<int:club_id>/co_organise_toggle/<int:tournament_id>/<int:user_id>', views.co_organise_toggle, name='co_organise_toggle'),", "    path('club/<int:club_id>/tournaments/', views.tournament_list, name='tournament_list'),", "    path('tournament/<int:tournament_id>', views.show_tournament, name='show_tournament'),", "    path('club/<int:club_id>/tournament_joined/', views.tournament_joined, name='tournament_joined'),"]}]}, {"commitAuthor": "lisa947", "commitSha": "523beea8f06235d5ebe686ef2456b295450b5f87", "filesEdited": ["clubs/templates/applicant_list.html", "clubs/templates/member_list_for_members.html", "clubs/templates/member_list_for_staff.html", "clubs/templates/officer_applicant_list.html", "clubs/templates/officer_list.html", "clubs/templates/tournament_joined.html", "clubs/templates/tournament_list.html", "clubs/tests/views/test_applicant_list_view.py", "clubs/tests/views/test_approve_officer_toggle_view.py", "clubs/tests/views/test_member_list_for_members_view.py", "clubs/tests/views/test_member_list_for_staff_view.py", "clubs/tests/views/test_officer_applicant_list.view.py", "clubs/tests/views/test_officer_applicant_list_view.py", "clubs/tests/views/test_officer_list_view.py", "clubs/tests/views/test_show_clubs_view.py", "clubs/tests/views/test_tournament_joined_view.py", "clubs/tests/views/test_tournament_list_view.py", "clubs/views.py", "clubs/views/match_views.py", "clubs/views/mixins.py", "clubs/views/tournament_view.py", "clubs/views/user_view.py", "system/settings.py", "system/urls.py"], "additionsPerFile": [{"clubs/templates/applicant_list.html": ["{% load bootstrap_pagination %}", "      {% bootstrap_paginate page_obj range=6 previous_label=\"Previous\" next_label=\"Next\" show_first_last=\"true\" %}"], "clubs/templates/member_list_for_members.html": ["{% load bootstrap_pagination %}", "      <h1>Members</h1>", "      {% bootstrap_paginate page_obj range=6 previous_label=\"Previous\" next_label=\"Next\" show_first_last=\"true\" %}"], "clubs/templates/member_list_for_staff.html": ["{% load bootstrap_pagination %}", "       {% bootstrap_paginate page_obj range=6 previous_label=\"Previous\" next_label=\"Next\" show_first_last=\"true\" %}"], "clubs/templates/officer_applicant_list.html": ["{% load bootstrap_pagination %}", "      {% bootstrap_paginate page_obj range=6 previous_label=\"Previous\" next_label=\"Next\" show_first_last=\"true\" %}"], "clubs/templates/officer_list.html": ["{% load bootstrap_pagination %}", "      {% bootstrap_paginate page_obj range=6 previous_label=\"Previous\" next_label=\"Next\" show_first_last=\"true\" %}"], "clubs/templates/tournament_joined.html": ["{% load bootstrap_pagination %}", "       {% bootstrap_paginate page_obj range=6 previous_label=\"Previous\" next_label=\"Next\" show_first_last=\"true\" %}"], "clubs/templates/tournament_list.html": ["{% load bootstrap_pagination %}", "       {% bootstrap_paginate page_obj range=6 previous_label=\"Previous\" next_label=\"Next\" show_first_last=\"true\" %}"], "clubs/tests/views/test_applicant_list_view.py": ["from django.conf import settings", "        self._create_test_applicants(settings.USERS_PER_PAGE-1)", "        self.assertEqual(len(response.context['applicants']), settings.USERS_PER_PAGE)", "        self.assertFalse(response.context['is_paginated'])", "        for user_id in range(settings.USERS_PER_PAGE-1):", "    def test_get_applicant_list_with_pagination(self):", "        self.client.login(email=self.user.email, password='Password123')", "        club = Club.objects.get(club_name='Chess Club 1')", "        self._create_test_applicants(settings.USERS_PER_PAGE*2+3-1)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'applicant_list.html')", "        self.assertEqual(len(response.context['applicants']), settings.USERS_PER_PAGE)", "        self.assertTrue(response.context['is_paginated'])", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_one_url = reverse('applicant_list', kwargs={'club_id': club.id}) + '?page=1'", "        response = self.client.get(page_one_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'applicant_list.html')", "        self.assertEqual(len(response.context['applicants']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_two_url = reverse('applicant_list', kwargs={'club_id': club.id}) + '?page=2'", "        response = self.client.get(page_two_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'applicant_list.html')", "        self.assertEqual(len(response.context['applicants']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_three_url = reverse('applicant_list', kwargs={'club_id': club.id}) + '?page=3'", "        response = self.client.get(page_three_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'applicant_list.html')", "        self.assertEqual(len(response.context['applicants']), 3)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertFalse(page_obj.has_next())", ""], "clubs/tests/views/test_member_list_for_members_view.py": ["from django.conf import settings", "        self._create_test_members(settings.USERS_PER_PAGE-1)", "        self.assertEqual(len(response.context['members']), settings.USERS_PER_PAGE)", "        for user_id in range(settings.USERS_PER_PAGE-1):", "    def test_get_member_list_with_pagination(self):", "        self.client.login(email=self.user.email, password='Password123')", "        club = Club.objects.get(club_name='Chess Club 1')", "        self._create_test_members(settings.USERS_PER_PAGE*2+3-1)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_members.html')", "        self.assertEqual(len(response.context['members']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_one_url = reverse('member_list_for_members', kwargs={'club_id': club.id}) + '?page=1'", "        response = self.client.get(page_one_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_members.html')", "        self.assertEqual(len(response.context['members']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_two_url = reverse('member_list_for_members', kwargs={'club_id': club.id}) + '?page=2'", "        response = self.client.get(page_two_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_members.html')", "        self.assertEqual(len(response.context['members']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_three_url = reverse('member_list_for_members', kwargs={'club_id': club.id}) + '?page=3'", "        response = self.client.get(page_three_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_members.html')", "        self.assertEqual(len(response.context['members']), 3)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertFalse(page_obj.has_next())"], "clubs/tests/views/test_member_list_for_staff_view.py": ["from django.conf import settings", "    def test_get_member_list_for_staff(self):", "        self._create_test_members(settings.USERS_PER_PAGE)", "        self.assertEqual(len(response.context['members']), settings.USERS_PER_PAGE)", "        self.assertFalse(response.context['is_paginated'])", "        for user_id in range(settings.USERS_PER_PAGE):", "            self.assertContains(response, f'First{user_id}')", "            self.assertContains(response, f'Last{user_id}')", "            user = User.objects.get(username=f'user{user_id}@test.org')", "            user_url = reverse('show_user', kwargs={'user_id': user.id})", "            self.assertContains(response, user_url)", "    def test_get_member_list_with_pagination(self):", "        self.client.login(email=self.user.email, password='Password123')", "        club = Club.objects.get(club_name='Chess Club 1')", "        self._create_test_members(settings.USERS_PER_PAGE*2+3)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_staff.html')", "        self.assertEqual(len(response.context['members']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_one_url = reverse('member_list_for_staff', kwargs={'club_id': club.id}) + '?page=1'", "        response = self.client.get(page_one_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_staff.html')", "        self.assertEqual(len(response.context['members']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_two_url = reverse('member_list_for_staff', kwargs={'club_id': club.id}) + '?page=2'", "        response = self.client.get(page_two_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_staff.html')", "        self.assertEqual(len(response.context['members']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_three_url = reverse('member_list_for_staff', kwargs={'club_id': club.id}) + '?page=3'", "        response = self.client.get(page_three_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_staff.html')", "        self.assertEqual(len(response.context['members']), 3)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertFalse(page_obj.has_next())", "                username=f'user{user_id}@test.org',"], "clubs/tests/views/test_officer_applicant_list_view.py": ["from django.test import TestCase", "from django.urls import reverse", "from clubs.models import User, Club", "from clubs.tests.helpers import reverse_with_next", "from django.contrib.auth import authenticate", "from django.conf import settings", "", "class OfficerApplicantListTest(TestCase):", "", "    fixtures = ['clubs/tests/fixtures/default_club.json',", "                'clubs/tests/fixtures/default_user.json']", "", "    def setUp(self):", "        self.user = User.objects.get(email='johndoe@example.org')", "        self.club = Club.objects.get(club_name = 'Chess Club 1')", "        self.user.clubs.add(self.club)", "        self.url = reverse('officer_applicant_list', kwargs={'club_id': self.club.id})", "", "    def test_user_list_url(self):", "        self.assertEqual(f'/club/{self.club.id}/officer_applicants/',self.url)", "", "    def test_get_officer_applicant_list_redirects_when_not_logged_in(self):", "         redirect_url = reverse_with_next('log_in', self.url)", "         response = self.client.get(self.url)", "         self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "    def test_get_officer_applicant_list(self):", "        self.client.login(email=self.user.email, password='Password123')", "        self._create_test_officer_applicants(settings.USERS_PER_PAGE)", "        print(self.club.officers.all())", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_applicant_list.html')", "        self.assertEqual(len(response.context['officer_applicants']), settings.USERS_PER_PAGE)", "        self.assertFalse(response.context['is_paginated'])", "        for user_id in range(settings.USERS_PER_PAGE):", "            self.assertContains(response,f'user{user_id}@test.org')", "            self.assertContains(response, f'First{user_id}')", "            self.assertContains(response, f'Last{user_id}')", "            user = User.objects.get(username=f'user{user_id}@test.org')", "            user_url = reverse('show_user', kwargs={'user_id': user.id})", "            self.assertContains(response, user_url)", "", "    def test_get_officer_applicant_list_with_pagination(self):", "        self.client.login(email=self.user.email, password='Password123')", "        club = Club.objects.get(club_name='Chess Club 1')", "        self._create_test_officer_applicants(settings.USERS_PER_PAGE*2+3)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_applicant_list.html')", "        self.assertEqual(len(response.context['officer_applicants']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_one_url = reverse('officer_applicant_list', kwargs={'club_id': club.id}) + '?page=1'", "        response = self.client.get(page_one_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_applicant_list.html')", "        self.assertEqual(len(response.context['officer_applicants']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_two_url = reverse('officer_applicant_list', kwargs={'club_id': club.id}) + '?page=2'", "        response = self.client.get(page_two_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_applicant_list.html')", "        self.assertEqual(len(response.context['officer_applicants']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_three_url = reverse('officer_applicant_list', kwargs={'club_id': club.id}) + '?page=3'", "        response = self.client.get(page_three_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_applicant_list.html')", "        self.assertEqual(len(response.context['officer_applicants']), 3)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertFalse(page_obj.has_next())", "", "    def test_get_user_list_redirects_when_not_logged_in(self):", "          redirect_url = reverse_with_next('log_in', self.url)", "          response = self.client.get(self.url)", "          self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "    def _create_test_officer_applicants(self, user_count=10):", "        for user_id in range(user_count):", "            user = User.objects.create_user(", "                username = f'user{user_id}@test.org',", "                first_name=f'First{user_id}',", "                last_name=f'Last{user_id}',", "                email=f'user{user_id}@test.org',", "                password='Password123',", "                public_bio= \"My bio\",", "                chess_experience_level= 1,", "                short_personal_statement= \"I love chess.\" )", "            self.club.officer_applicants.add(user)", "            user.clubs.add(self.club)"], "clubs/tests/views/test_officer_list_view.py": ["from django.conf import settings", "                'clubs/tests/fixtures/default_user.json',", "                'clubs/tests/fixtures/other_users.json']", "    def test_get_officer_list_url(self):", "        self.assertEqual(f'/club/{self.club.id}/officers/', self.url)", "    def test_get_transfer_toggle_redirects_when_not_an_owner(self):", "        user = User.objects.get(email='petrapickles@example.org')", "        self.client.login(email=user.email, password='Password123')", "        redirect_url = reverse('show_club', kwargs={'club_id': self.club.id})", "        response = self.client.get(self.url, follow=True)", "        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "        self._create_test_officers(settings.USERS_PER_PAGE)", "        self.assertEqual(len(response.context['officers']), settings.USERS_PER_PAGE)", "        self.assertFalse(response.context['is_paginated'])", "        for user_id in range(settings.USERS_PER_PAGE):", "            self.assertContains(response, f'First{user_id}')", "            self.assertContains(response, f'Last{user_id}')", "            user = User.objects.get(username=f'user{user_id}@test.org')", "            user_url = reverse('show_user', kwargs={'user_id': user.id})", "            self.assertContains(response, user_url)", "    def test_get_officer_list_with_pagination(self):", "        self.client.login(email=self.user.email, password='Password123')", "        club = Club.objects.get(club_name='Chess Club 1')", "        self._create_test_officers(settings.USERS_PER_PAGE*2+3)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_list.html')", "        self.assertEqual(len(response.context['officers']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_one_url = reverse('officer_list', kwargs={'club_id': club.id}) + '?page=1'", "        response = self.client.get(page_one_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_list.html')", "        self.assertEqual(len(response.context['officers']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_two_url = reverse('officer_list', kwargs={'club_id': club.id}) + '?page=2'", "        response = self.client.get(page_two_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_list.html')", "        self.assertEqual(len(response.context['officers']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_three_url = reverse('officer_list', kwargs={'club_id': club.id}) + '?page=3'", "        response = self.client.get(page_three_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_list.html')", "        self.assertEqual(len(response.context['officers']), 3)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertFalse(page_obj.has_next())"], "clubs/tests/views/test_show_clubs_view.py": ["        self.assertEqual(f'/club/{self.club.id}',self.url)"], "clubs/tests/views/test_tournament_joined_view.py": ["from django.test import TestCase", "from django.urls import reverse", "from clubs.models import User, Club, Tournament", "from clubs.tests.helpers import reverse_with_next", "from django.contrib.auth import authenticate", "from django.conf import settings", "", "class TournamentJoinedTest(TestCase):", "", "    fixtures = ['clubs/tests/fixtures/default_user.json',", "                'clubs/tests/fixtures/other_users.json',", "                'clubs/tests/fixtures/default_tournament.json',", "                'clubs/tests/fixtures/other_tournaments.json',", "                'clubs/tests/fixtures/default_club.json',", "                'clubs/tests/fixtures/other_clubs.json'", "                ]", "", "    def setUp(self):", "        super(TestCase, self).setUp()", "        self.user = User.objects.get(username='johndoe@example.org')", "        self.club = Club.objects.get(club_name = 'Chess Club 1')", "        self.tournament = Tournament.objects.get(tournament_name=\"Tournament 1\")", "        self.url = reverse('tournament_joined', kwargs={'club_id': self.club.id})", "", "    def test_tournament_joined_url(self):", "        self.assertEqual(f'/club/{self.club.id}/tournament_joined/',self.url)", "", "    def test_get_tournament_joined_redirects_when_not_logged_in(self):", "         redirect_url = reverse_with_next('log_in', self.url)", "         response = self.client.get(self.url)", "         self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "    def test_get_tournament_joined(self):", "        self.client.login(email=self.user.email, password='Password123')", "        self._create_test_tournaments(settings.TOURNAMENTS_PER_PAGE)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_joined.html')", "        self.assertEqual(len(response.context['tournament_joined']), settings.TOURNAMENTS_PER_PAGE)", "        for tournament_id in range(settings.TOURNAMENTS_PER_PAGE-1):", "            self.assertContains(response,f'tournament_name{tournament_id}')", "", "    def test_get_tournament_joined_with_pagination(self):", "        self.client.login(email=self.user.email, password='Password123')", "        club = Club.objects.get(club_name='Chess Club 1')", "        self._create_test_tournaments(settings.USERS_PER_PAGE*2+3)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_joined.html')", "        self.assertEqual(len(response.context['tournament_joined']), settings.TOURNAMENTS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_one_url = reverse('tournament_joined', kwargs={'club_id': club.id}) + '?page=1'", "        response = self.client.get(page_one_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_joined.html')", "        self.assertEqual(len(response.context['tournament_joined']), settings.TOURNAMENTS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_two_url = reverse('tournament_joined', kwargs={'club_id': club.id}) + '?page=2'", "        response = self.client.get(page_two_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_joined.html')", "        self.assertEqual(len(response.context['tournament_joined']), settings.TOURNAMENTS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_three_url = reverse('tournament_joined', kwargs={'club_id': club.id}) + '?page=3'", "        response = self.client.get(page_three_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_joined.html')", "        self.assertEqual(len(response.context['tournament_joined']), 3)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertFalse(page_obj.has_next())", "", "    def _create_test_tournaments(self, tournament_count=10):", "        for tournament_id in range(tournament_count):", "            club = Club.objects.get(id=1)", "            tournament = Tournament.objects.create(", "                tournament_name = f'tournament_name{tournament_id}',", "                short_description=\"this is a new tournament\",", "                number_of_participants=tournament_count,", "                club = club", "                )", "            self.user.tournaments.add(tournament)"], "clubs/tests/views/test_tournament_list_view.py": ["from django.test import TestCase", "from django.urls import reverse", "from clubs.models import User, Club, Tournament", "from clubs.tests.helpers import reverse_with_next", "from django.contrib.auth import authenticate", "from django.conf import settings", "", "class TournamentListTest(TestCase):", "", "    fixtures = ['clubs/tests/fixtures/default_user.json',", "                'clubs/tests/fixtures/other_users.json',", "                'clubs/tests/fixtures/default_tournament.json',", "                'clubs/tests/fixtures/other_tournaments.json',", "                'clubs/tests/fixtures/default_club.json',", "                'clubs/tests/fixtures/other_clubs.json'", "                ]", "", "    def setUp(self):", "        super(TestCase, self).setUp()", "        self.user = User.objects.get(username='johndoe@example.org')", "        self.club = Club.objects.get(club_name = 'Chess Club 1')", "        self.tournament = Tournament.objects.get(tournament_name=\"Tournament 1\")", "        self.url = reverse('tournament_list', kwargs={'club_id': self.club.id})", "", "", "    def test_tournament_list_url(self):", "        self.assertEqual(f'/club/{self.club.id}/tournaments/',self.url)", "", "    def test_get_tournament_list_redirects_when_not_logged_in(self):", "         redirect_url = reverse_with_next('log_in', self.url)", "         response = self.client.get(self.url)", "         self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "    def test_get_tournament_list(self):", "        self.client.login(email=self.user.email, password='Password123')", "        self._create_test_tournaments(settings.TOURNAMENTS_PER_PAGE)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_list.html')", "        self.assertEqual(len(response.context['tournaments']), settings.TOURNAMENTS_PER_PAGE)", "        for tournament_id in range(settings.TOURNAMENTS_PER_PAGE-1):", "            self.assertContains(response,f'tournament_name{tournament_id}')", "", "    def test_get_tournament_list_with_pagination(self):", "        self.client.login(email=self.user.email, password='Password123')", "        club = Club.objects.get(club_name='Chess Club 1')", "        self._create_test_tournaments(settings.USERS_PER_PAGE*2+3)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_list.html')", "        self.assertEqual(len(response.context['tournaments']), settings.TOURNAMENTS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_one_url = reverse('tournament_list', kwargs={'club_id': club.id}) + '?page=1'", "        response = self.client.get(page_one_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_list.html')", "        self.assertEqual(len(response.context['tournaments']), settings.TOURNAMENTS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_two_url = reverse('tournament_list', kwargs={'club_id': club.id}) + '?page=2'", "        response = self.client.get(page_two_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_list.html')", "        self.assertEqual(len(response.context['tournaments']), settings.TOURNAMENTS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_three_url = reverse('tournament_list', kwargs={'club_id': club.id}) + '?page=3'", "        response = self.client.get(page_three_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_list.html')", "        self.assertEqual(len(response.context['tournaments']), 3)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertFalse(page_obj.has_next())", "", "    def _create_test_tournaments(self, tournament_count=10):", "        for tournament_id in range(tournament_count):", "            club = Club.objects.get(id=1)", "            tournament = Tournament.objects.create(", "                tournament_name = f'tournament_name{tournament_id}',", "                short_description=\"this is a new tournament\",", "                number_of_participants=tournament_count,", "                club = club", "                )", "            self.club.tournaments.add(tournament)"], "clubs/views/match_views.py": ["from django.core.paginator import Paginator"], "clubs/views/mixins.py": ["        if not current_club.officers.filter(email=request.user.email).exists():", "        if not current_club.officers.filter(email=request.user.email).exists() and current_club.club_owner.email!=request.user.email:", "        if not current_club.members.filter(email=request.user.email).exists():"], "clubs/views/tournament_view.py": ["from django.core.paginator import Paginator", "from django.views.generic import ListView", "class TournamentListView(LoginRequiredMixin, ListView):", "    \"\"\"View that shows a list of all users.\"\"\"", "", "    model = Tournament", "    template_name = \"tournament_list.html\"", "    context_object_name = \"tournaments\"", "    paginate_by = settings.TOURNAMENTS_PER_PAGE", "", "    def get(self, request, club_id, *args, **kwargs):", "        self.current_user = request.user", "        self.clubs = Club.objects.all()", "        self.current_club = Club.objects.get(id=club_id)", "        self.tournaments = self.current_club.tournaments.all()", "        try:", "            return super().get(request, *args, **kwargs)", "        except Http404:", "            return redirect('tournament_list', club_id)", "", "    def get_context_data(self, **kwargs):", "        now = timezone.now", "        context = super().get_context_data(object_list=self.tournaments, **kwargs)", "        context['current_user'] = self.current_user", "        context['tournaments'] = context['object_list']", "        context['clubs'] = self.clubs", "        context['current_club'] = self.current_club", "        context['now'] = now", "        return context", "", "class TournamentJoinedView(LoginRequiredMixin, ListView):", "    \"\"\"View that shows a list of all users.\"\"\"", "", "    model = Tournament", "    template_name = \"tournament_joined.html\"", "    context_object_name = \"tournament_joined\"", "    paginate_by = settings.TOURNAMENTS_PER_PAGE", "", "    def get(self, request, club_id, *args, **kwargs):", "        self.current_user = request.user", "        self.clubs = Club.objects.all()", "        self.current_club = Club.objects.get(id=club_id)", "        self.tournament_joined = self.current_user.tournaments.all()", "        try:", "            return super().get(request, *args, **kwargs)", "        except Http404:", "            return redirect('tournament_list', club_id)", "", "    def get_context_data(self, **kwargs):", "        now = timezone.now", "        context = super().get_context_data(object_list=self.tournament_joined, **kwargs)", "        context['current_user'] = self.current_user", "        context['tournament_joined'] = context['object_list']", "        context['clubs'] = self.clubs", "        context['current_club'] = self.current_club", "        context['now'] = now", "        return context"], "clubs/views/user_view.py": ["from .mixins import *", "from django.core.paginator import Paginator", "class ApplicantListView(LoginRequiredMixin, OfficerOrOwnerOnlyMixin, ListView):", "    paginate_by = settings.USERS_PER_PAGE", "    context_object_name = \"Officer Applicants\"", "    paginate_by = settings.USERS_PER_PAGE", "class MemberListForMembersView(LoginRequiredMixin, MemberOnlyMixin, ListView):", "    \"\"\"View that shows a list of all users.\"\"\"", "    model = User", "    template_name = \"member_list_for_members.html\"", "    context_object_name = \"members\"", "    paginate_by = settings.USERS_PER_PAGE", "    def get(self, request, club_id, *args, **kwargs):", "        self.current_user = request.user", "        self.clubs = Club.objects.all()", "        self.current_club = Club.objects.get(id=club_id)", "        self.members = self.current_club.members.all()", "        try:", "            return super().get(request, *args, **kwargs)", "        except Http404:", "            return redirect('member_list_for_members', club_id)", "    def get_context_data(self, **kwargs):", "        context = super().get_context_data(object_list=self.members, **kwargs)", "        context['current_user'] = self.current_user", "        context['members'] = context['object_list']", "        context['clubs'] = self.clubs", "        context['current_club'] = self.current_club", "        return context", "class MemberListForStaffView(LoginRequiredMixin, OfficerOrOwnerOnlyMixin, ListView):", "    \"\"\"View that shows a list of all members.\"\"\"", "    model = User", "    template_name = \"member_list_for_staff.html\"", "    context_object_name = \"members\"", "    paginate_by = settings.USERS_PER_PAGE", "    def get(self, request, club_id, *args, **kwargs):", "        self.current_user = request.user", "        self.clubs = Club.objects.all()", "        self.current_club = Club.objects.get(id=club_id)", "        self.members = self.current_club.members.all()", "        try:", "            return super().get(request, *args, **kwargs)", "        except Http404:", "            return redirect('member_list_for_staff', club_id)", "", "    def get_context_data(self, **kwargs):", "        context = super().get_context_data(object_list=self.members, **kwargs)", "        context['current_user'] = self.current_user", "        context['members'] = context['object_list']", "        context['clubs'] = self.clubs", "        context['current_club'] = self.current_club", "        return context", "", "class OfficerListView(LoginRequiredMixin, OfficerOrOwnerOnlyMixin, ListView):", "    \"\"\"View that shows a list of all officers.\"\"\"", "", "    model = User", "    template_name = \"officer_list.html\"", "    context_object_name = \"officers\"", "    paginate_by = settings.USERS_PER_PAGE", "", "    def get(self, request, club_id, *args, **kwargs):", "        self.current_user = request.user", "        self.clubs = Club.objects.all()", "        self.current_club = Club.objects.get(id=club_id)", "        self.officers = self.current_club.officers.all()", "        try:", "            return super().get(request, *args, **kwargs)", "        except Http404:", "            return redirect('officer_list', club_id)", "", "    def get_context_data(self, **kwargs):", "        context = super().get_context_data(object_list=self.officers, **kwargs)", "        context['current_user'] = self.current_user", "        context['officers'] = context['object_list']", "        context['clubs'] = self.clubs", "        context['current_club'] = self.current_club", "        return context", "#", "# @login_required", "# @officer_only", "# def co_organiser_list(request, club_id, tournament_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     current_club = Club.objects.get(id=club_id)", "#     officers = current_club.officers.all()", "#     current_tournament = Tournament.objects.get(id=tournament_id)", "#     organisers = current_tournament.organisers.all()", "#     paginator = Paginator(officers, settings.USERS_PER_PAGE)", "#     # paginate_by = settings.USERS_PER_PAGE", "#     return render(request, 'co_organiser_list.html',", "#                     {'officers': officers,", "#                      'organisers': organisers,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club,", "#                      'tournament': current_tournament", "#                     }", "#                  )", "class CoOrganiserListView(LoginRequiredMixin, OfficerOnlyMixin, ListView):", "    \"\"\"View that shows a list of all users.\"\"\"", "", "    model = User", "    template_name = \"co_organiser_list.html\"", "    context_object_name = \"co-organisers\"", "    paginate_by = settings.USERS_PER_PAGE", "", "    def get(self, request, club_id, tournament_id, *args, **kwargs):", "        self.current_user = request.user", "        self.clubs = Club.objects.all()", "        self.current_club = Club.objects.get(id=club_id)", "        self.officers = self.current_club.officers.all()", "        self.current_tournament = Tournament.objects.get(id=tournament_id)", "        organisers = current_tournament.organisers.all()", "", "        try:", "            return super().get(request, *args, **kwargs)", "        except Http404:", "            return redirect('co_organiser_list', club_id)", "", "    def get_context_data(self, **kwargs):", "        context = super().get_context_data(object_list=self.officers, **kwargs)", "        context['current_user'] = self.current_user", "        context['officers'] = context['object_list']", "        context['organisers'] = self.organisers", "        context['clubs'] = self.clubs", "        context['current_club'] = self.current_club", "        context['tournament'] = self.current_tournament", "        return context"], "system/settings.py": ["    'widget_tweaks',", "    'bootstrap_pagination'", "# Page lengths", "USERS_PER_PAGE = 5", "TOURNAMENTS_PER_PAGE = 5", ""], "system/urls.py": ["    path('club/<int:club_id>/officers/', views.OfficerListView.as_view(), name='officer_list'),", "    path('club/<int:club_id>/members/', views.MemberListForStaffView.as_view(), name='member_list_for_staff'),", "    path('club/<int:club_id>/member_list/', views.MemberListForMembersView.as_view(), name='member_list_for_members'),", "    path('club/<int:club_id>/co_organise/<int:tournament_id>', views.CoOrganiserListView.as_view(), name='co_organiser_list'),", "", "    path('club/<int:club_id>/tournaments/', views.TournamentListView.as_view(), name='tournament_list'),", "    path('club/<int:club_id>/tournament_joined/', views.TournamentJoinedView.as_view(), name='tournament_joined'),", "", ""]}], "deletionsPerFile": [{"clubs/templates/member_list_for_members.html": ["      <h1>All Members</h1>"], "clubs/tests/views/test_applicant_list_view.py": ["        self._create_test_applicants(14)", "        self.assertEqual(len(response.context['applicants']), 15)", "        for user_id in range(15-1):"], "clubs/tests/views/test_approve_officer_toggle_view.py": ["        # print(self.club.club_owner)", "        # self.club.officers.add(self.user)"], "clubs/tests/views/test_member_list_for_members_view.py": ["", "", "", "", "", "        self._create_test_members(14)", "        self.assertEqual(len(response.context['members']), 15)", "        for user_id in range(15-1):", "", "    def test_get_user_list_redirects_when_not_logged_in(self):", "          redirect_url = reverse_with_next('log_in', self.url)", "          response = self.client.get(self.url)", "          self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", ""], "clubs/tests/views/test_member_list_for_staff_view.py": ["        self.club.members.add(self.user)", "", "", "", "", "    def test_get_member_list(self):", "        self._create_test_members(14)", "        self.assertEqual(len(response.context['members']), 15)", "        for user_id in range(15-1):", "            # self.assertContains(response, f'Last{user_id}')", "            # EXTENDED THIS TEST FOR SHOW USER FUNCTIONALITY:", "            # user = User.objects.get(email=f'{user_id}@example.org')", "            # user_url = reverse('show_user', kwargs={'user_id': user.id})", "            # self.assertContains(response, user_url)", "", "    def test_get_user_list_redirects_when_not_logged_in(self):", "          redirect_url = reverse_with_next('log_in', self.url)", "          response = self.client.get(self.url)", "          self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "                username = f'user{user_id}@test.org',"], "clubs/tests/views/test_officer_applicant_list.view.py": ["from django.test import TestCase", "from django.urls import reverse", "from clubs.models import User, Club", "from clubs.tests.helpers import reverse_with_next", "from django.contrib.auth import authenticate", "", "class ApplicantListTest(TestCase):", "", "    fixtures = ['clubs/tests/fixtures/default_club.json',", "                'clubs/tests/fixtures/default_user.json']", "", "    def setUp(self):", "        self.user = User.objects.get(email='johndoe@example.org')", "        self.club = Club.objects.get(club_name = 'Chess Club 1')", "        self.club.applicant_officer.add(self.user)", "        self.user.clubs.add(self.club)", "        self.url = reverse('applicant_officer_list', kwargs={'club_id': self.club.id})", "", "", "    def test_user_list_url(self):", "        self.assertEqual(f'/club/{self.club.id}/applicant_officer_list/',self.url)", "", "", "", "    def test_get_applicant_list_redirects_when_not_logged_in(self):", "         redirect_url = reverse_with_next('log_in', self.url)", "         response = self.client.get(self.url)", "         self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "", "    def test_get_applicant_list(self):", "        self.client.login(email=self.user.email, password='Password123')", "        self._create_test_applicants(14)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'applicant_officer_list.html')", "        self.assertEqual(len(response.context['applicant_officer']), 15)", "        for user_id in range(15-1):", "            self.assertContains(response,f'user{user_id}@test.org')", "            # self.assertContains(response, f'Last{user_id}')", "            # EXTENDED THIS TEST FOR SHOW USER FUNCTIONALITY:", "            # user = User.objects.get(email=f'{user_id}@example.org')", "            # user_url = reverse('show_user', kwargs={'user_id': user.id})", "            # self.assertContains(response, user_url)", "", "    def test_get_user_list_redirects_when_not_logged_in(self):", "          redirect_url = reverse_with_next('log_in', self.url)", "          response = self.client.get(self.url)", "          self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "", "", "    def _create_test_applicants(self, user_count=10):", "        for user_id in range(user_count):", "            user = User.objects.create_user(", "                username = f'user{user_id}@test.org',", "                first_name=f'First{user_id}',", "                last_name=f'Last{user_id}',", "                email=f'user{user_id}@test.org',", "                password='Password123',", "                public_bio= \"My bio\",", "                chess_experience_level= 1,", "                short_personal_statement= \"I love chess.\" )", "            self.club.applicant_officer.add(user)", "            user.clubs.add(self.club)"], "clubs/tests/views/test_officer_list_view.py": ["                'clubs/tests/fixtures/default_user.json']", "        self.club.officers.add(self.user)", "", "    def test_user_list_url(self):", "        self.assertEqual(f'/club/{self.club.id}/officers/',self.url)", "", "", "        self._create_test_officers(14)", "        self.assertEqual(len(response.context['officers']), 15)", "        for user_id in range(15-1):", "            # self.assertContains(response, f'Last{user_id}')", "            # EXTENDED THIS TEST FOR SHOW USER FUNCTIONALITY:", "            # user = User.objects.get(email=f'{user_id}@example.org')", "            # user_url = reverse('show_user', kwargs={'user_id': user.id})", "            # self.assertContains(response, user_url)", ""], "clubs/tests/views/test_show_clubs_view.py": ["        self.assertEqual(f'/club/{self.user.id}',self.url)"], "clubs/views.py": ["# from django.contrib import messages", "# from django.shortcuts import render, redirect", "# from .forms import SignUpForm, LogInForm, UserForm, PasswordForm, ClubForm, TournamentForm", "# from django.core.exceptions import ObjectDoesNotExist", "# from django.contrib.auth import authenticate, login, logout", "# from django.contrib.auth.decorators import login_required", "# from django.contrib.auth.models import Group", "# from .models import User, Club, Tournament, Match", "# from .helpers import login_prohibited, member_only, staff_only, owner_only", "# from django.http import HttpResponseForbidden", "# <<<<<<< HEAD", "# from django.utils import timezone", "# import random", "# =======", "# from django.contrib.auth.hashers import check_password", "# >>>>>>> test_apply_membership", "#", "# def home(request):", "#     return render(request, 'home.html')", "#", "#", "# @login_required", "# def user_profile(request):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     return render(request, 'user_profile.html',", "#                     {'current_user': current_user,", "#                      'clubs': clubs,", "#                     }", "#                  )", "#", "# @login_prohibited", "# def sign_up(request):", "#     if request.method == 'POST':", "#         form = SignUpForm(request.POST)", "#         if form.is_valid():", "#             user = form.save()", "#             applicants, created = Group.objects.get_or_create(name = 'applicants')", "#             applicants.user_set.add(user)", "#             login(request, user)", "#             return redirect('user_profile')", "#     else:", "#         form = SignUpForm()", "#     return render(request, 'sign_up.html', {'form': form})", "#", "# @login_required", "# @member_only", "# def member_list_for_members(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     members = current_club.members.all()", "#     return render(request, 'member_list_for_members.html',", "#                     {'members': members,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club", "#                     }", "#                  )", "#", "# @login_required", "# @staff_only", "# def member_list_for_staff(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     members = current_club.members.all()", "#     return render(request, 'member_list_for_staff.html',", "#                     {'members': members,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club", "#                     }", "#                  )", "#", "# @login_required", "# @staff_only", "# def applicant_list(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     applicants = current_club.applicants.all()", "#     return render(request, 'applicant_list.html',", "#                     {'applicants': applicants,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club", "#                     }", "#                  )", "# @login_required", "# @staff_only", "# def applicant_officer_list(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     officer_applicants = current_club.officer_applicants.all()", "#     return render(request, 'applicant_officer_list.html',", "#                     {'officer_applicants': officer_applicants,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club", "#                     }", "#                  )", "#", "# @login_required", "# # @owner_only", "# def officer_list(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     officers = current_club.officers.all()", "#     return render(request, 'officer_list.html',", "#                     {'officers': officers,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club", "#                     }", "#                  )", "#", "# @login_required", "# def show_user(request, user_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     try:", "#         user = User.objects.get(id=user_id)", "#     except ObjectDoesNotExist:", "#         return redirect('user_profile')", "#     else:", "#         return render(request, 'show_user.html',", "#             {'user': user,", "#              'current_user': current_user,", "#              'clubs': clubs,", "#             }", "#         )", "#", "# @login_prohibited", "# def log_in(request):", "#     if request.method == 'POST':", "#         form = LogInForm(request.POST)", "#         if form.is_valid():", "#             email = form.cleaned_data.get('email')", "#             password = form.cleaned_data.get('password')", "#             user = authenticate(email=email, password=password)", "#             if user is not None:", "#                 login(request, user)", "#                 return redirect('user_profile')", "#         messages.add_message(request, messages.ERROR, \"The credentials provided were invalid!\")", "#     form = LogInForm()", "#     return render(request, 'log_in.html', {'form': form})", "#", "# def log_out(request):", "#     logout(request)", "#     return redirect('home')", "#", "# @login_required", "# def profile(request):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     if request.method == 'POST':", "#         form = UserForm(instance=current_user, data=request.POST)", "#         if form.is_valid():", "#             messages.add_message(request, messages.SUCCESS, \"Profile updated!\")", "#             form.save()", "#             return redirect('user_profile')", "#     else:", "#         form = UserForm(instance=current_user)", "#     return render(request, 'profile.html',", "#                     {'form': form,", "#                      'current_user': current_user,", "#                      'clubs': clubs}", "#                  )", "#", "# @login_required", "# def password(request):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     if request.method == 'POST':", "#         form = PasswordForm(data=request.POST)", "#         if form.is_valid():", "#             password = form.cleaned_data.get('password')", "#             if check_password(password, current_user.password):", "#                 new_password = form.cleaned_data.get('new_password')", "#                 current_user.set_password(new_password)", "#                 current_user.save()", "#                 login(request, current_user)", "#                 messages.add_message(request, messages.SUCCESS, \"Password updated!\")", "#                 return redirect('user_profile')", "#     form = PasswordForm()", "#     return render(request, 'password.html',", "#                     {'form': form,", "#                      'current_user': current_user,", "#                      'clubs': clubs}", "#                  )", "#", "#", "# @login_required", "# @staff_only", "# def approve_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_approve(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('applicant_list', club_id)", "#     else:", "#         return redirect('applicant_list', club_id)", "#", "#", "# @login_required", "# @staff_only", "# def cancel_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_cancel(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('member_list_for_staff', club_id)", "#     else:", "#         return redirect('member_list_for_staff', club_id)", "#", "# @login_required", "# @owner_only", "# def promote_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_promote(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('member_list_for_staff', club_id)", "#     else:", "#         return redirect('member_list_for_staff', club_id)", "#", "# @login_required", "# @owner_only", "# def demote_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_demote(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('officer_list', club_id)", "#     else:", "#         return redirect('officer_list', club_id)", "#", "# @login_required", "# @owner_only", "# def transfer_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_transfer(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('officer_list', club_id)", "#     else:", "#         return redirect('officer_list', club_id)", "#", "#", "# @login_required", "# def create_club(request, user_id):", "#     if request.method == 'POST':", "#         if request.user.is_authenticated:", "#             current_user = request.user", "#             form = ClubForm(request.POST)", "#             if form.is_valid():", "#                 club_name = form.cleaned_data.get('club_name')", "#                 location = form.cleaned_data.get('location')", "#                 description = form.cleaned_data.get('description')", "#                 club = Club.objects.create(club_owner = current_user, club_name = club_name, location = location, description = description)", "#                 club.club_owner.clubs.add(club)", "#                 # club.officers.add(user)", "#                 return redirect('user_profile')", "#             else:", "#                 return render(request, 'create_club.html', {'form': form, 'current_user': current_user})", "#         else:", "#             return redirect('log_in')", "#     else:", "#         # return HttpResponseForbidden()", "#         form = ClubForm()", "#         current_user = request.user", "#     return render(request, 'create_club.html', {'form': form, 'current_user': current_user})", "#", "# @login_required", "# <<<<<<< HEAD", "# @staff_only", "# def create_tournament(request, club_id):", "#     clubs = Club.objects.all()", "#     current_club = Club.objects.get(id=club_id)", "#     if request.method == 'POST':", "#         if request.user.is_authenticated:", "#             current_user = request.user", "#", "#             form = TournamentForm(request.POST)", "#             if form.is_valid():", "#                 tournament_name = form.cleaned_data.get('tournament_name')", "#                 short_description = form.cleaned_data.get('short_description')", "#                 number_of_participants = form.cleaned_data.get('number_of_participants')", "#                 deadline = form.cleaned_data.get('deadline')", "#                 start_time = form.cleaned_data.get('start_time')", "#                 tournament = Tournament.objects.create(tournament_name = tournament_name,", "#                                                         short_description = short_description,", "#                                                         number_of_participants = number_of_participants,", "#                                                         club = current_club,", "#                                                         deadline = deadline,", "#                                                         start_time = start_time)", "#                 tournament.organisers.add(current_user)", "#                 current_club.tournaments.add(tournament)", "#                 current_club.tournament_list.add(tournament)", "#                 return redirect('tournament_list', club_id)", "#             else:", "#                 return render(request, 'create_tournament.html',", "#                                 {'form': form,", "#                                  'current_user': current_user,", "#                                  'current_club': current_club,", "#                                  'clubs': clubs", "#                                 }", "#                             )", "#         else:", "#             return redirect('log_in')", "#     else:", "#         form = TournamentForm()", "#         current_user = request.user", "#     return render(request, 'create_tournament.html',", "#                     {'form': form,", "#                      'current_user': current_user,", "#                      'current_club': current_club,", "#                      'clubs': clubs", "#                     }", "#                 )", "#", "# @login_required", "# =======", "# >>>>>>> test_apply_membership", "# def show_club(request, club_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     now = timezone.now", "#     try:", "#         current_club = Club.objects.get(id=club_id)", "#         tournaments = current_club.tournaments.all()", "#     except ObjectDoesNotExist:", "#         return redirect('user_profile')", "#     else:", "#         return render(request, 'show_club.html',", "#             {'current_club': current_club,", "#              'current_user': current_user,", "#              'clubs': clubs,", "#              'tournaments': tournaments,", "#              'now': now", "#             }", "#         )", "#", "# @login_required", "# def apply_membership(request, club_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     try:", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_apply_membership(club)", "#     except ObjectDoesNotExist:", "#         return redirect('user_profile')", "#     else:", "# <<<<<<< HEAD", "#         return render(request, 'show_club.html',", "#             {'current_club': current_club,", "#              'current_user': current_user,", "#              'clubs': clubs", "#             }", "#         )", "#", "# @login_required", "# def edit_tournament_info(request, club_id, tournament_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     current_club = Club.objects.get(id=club_id)", "#     current_tournament = Tournament.objects.get(id=tournament_id)", "#     if request.method == 'POST':", "#         form = TournamentForm(data = request.POST, instance=current_tournament)", "#         if form.is_valid():", "#             messages.add_message(request, messages.SUCCESS, \"Successfully updated!\")", "#             form.save()", "#             return redirect('tournament_list', club_id)", "#     else:", "#         form = TournamentForm(instance = current_tournament)", "#     return render(request, 'edit_tournament_info.html',", "#                     {'form': form,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club,", "#                      'current_tournament': current_tournament", "#                     }", "#                  )", "#", "#", "#", "#", "# @login_required", "# @staff_only", "# def co_organise(request, club_id, tournament_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     current_club = Club.objects.get(id=club_id)", "#     officers = current_club.officers.all()", "#     current_tournament = Tournament.objects.get(id=tournament_id)", "#     organisers = current_tournament.organisers.all()", "#     return render(request, 'co_organiser_list.html',", "#                     {'officers': officers,", "#                      'organisers': organisers,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club,", "#                      'tournament': current_tournament", "#                     }", "#                  )", "#", "# @login_required", "# @staff_only", "# def co_organise_toggle(request, club_id, tournament_id, user_id):", "#     try:", "#         current_user = request.user", "#         user =  User.objects.get(id=user_id)", "#         current_club = Club.objects.get(id=club_id)", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#         current_tournament.organisers.add(user)", "#     except ObjectDoesNotExist:", "#         return redirect('co_organise', club_id, tournament_id)", "#     else:", "#         return redirect('co_organise', club_id, tournament_id)", "#", "#", "# @login_required", "# def tournament_list(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     tournaments = current_club.tournaments.all()", "#     now = timezone.now", "#     return render(request, 'tournament_list.html',", "#                     {'tournaments': tournaments,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club,", "#                      'now': now,", "#                     }", "#                  )", "#", "# @login_required", "# @member_only", "# def tournament_joined(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     tournament_joined = current_user.tournaments.all()", "#     now = timezone.now", "#     return render(request, 'tournament_joined.html',", "#                     {'tournament_joined': tournament_joined,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club,", "#                      'now': now,", "#                     }", "#                  )", "#", "# @login_required", "# @member_only", "# def show_tournament(request, tournament_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     try:", "#         tournament = Tournament.objects.get(id=tournament_id)", "#     except ObjectDoesNotExist:", "#         return redirect('user_profile')", "#     else:", "#         return render(request, 'show_tournament.html',", "#             {'tournament': tournament,", "#              'current_user': current_user,", "#              'clubs': clubs,", "#             }", "#         )", "#", "# @login_required", "# @member_only", "# def sign_up_toggle(request, tournament_id, club_id):", "#     current_user = request.user", "#     try:", "#         tournament = Tournament.objects.get(id=tournament_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_sign_up(tournament, club)", "#     except ObjectDoesNotExist:", "#         return redirect('tournament_list', club_id)", "#     else:", "#         return redirect('tournament_list', club_id)", "#", "# @login_required", "# @member_only", "# def withdraw_toggle(request, tournament_id, club_id):", "#     current_user = request.user", "#     try:", "#         tournament = Tournament.objects.get(id=tournament_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_withdraw(tournament, club)", "#     except ObjectDoesNotExist:", "#         return redirect('tournament_joined', club_id)", "#     else:", "#         return redirect('tournament_joined', club_id)", "#", "#", "#", "#", "#", "#", "#", "# @login_required", "# def generate_matches(request, tournament_id, club_id):", "#     try:", "#         current_user = request.user", "#         current_club = Club.objects.get(id=club_id)", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#         #", "#         Match.objects.all().delete()", "#         current_tournament.matches_list.clear()", "#         current_tournament.winners_list.clear()", "#         current_tournament.winner= None", "#         current_tournament.current_participants.clear()", "#         current_tournament.removed_participants.clear()", "#         #--^^^ USE THIS AFTER CLICKING 'GENERATE_MATCHES', THEN COMMENT OUT AGAIN", "#         # USE IT TO CLEAR THE WINNERS FOR A TOURNAMENT - FOR DEV PURPOSES", "#", "#", "#         all_participants_list = current_tournament.participants_list.all()", "#", "#         x = len(all_participants_list)", "#         print(x)", "#         previous_power_of_two = power_Of_Two(x)", "#", "#         make_Participants_Power_Of_2(current_tournament, previous_power_of_two)", "#", "#         # if(len(participants_list) & (len(participants_list)-1) != 0):", "#         #", "#         #     print(\"not power of 2\")", "#         participants_list = current_tournament.current_participants.all()", "#", "#         matches_list = current_tournament.matches_list.all()", "#         winners_list = current_tournament.winners_list.all()", "#         now = timezone.now", "#         finals=1", "#", "#         if all_participants_list.count() <= 1:", "#             messages.add_message(request, messages.ERROR, \"Not enough participants!\")", "#", "#", "#         else:", "#             if matches_list.count() == 0:    #I.E. NO MATCHES HAVE BEEN MADE FOR THIS ROUND YET!", "#                 round_input = 1  #first round", "#                 current_tournament.create_matches(round_input, participants_list)", "#                 matches_list = current_tournament.matches_list.all()", "#                 # now = timezone.now", "#                 winners_list = current_tournament.winners_list.all()", "#", "#                 return render(request, 'generate_matches.html',", "#                                 {'current_user': current_user,", "#                                  # 'clubs': clubs,", "#                                  'current_club': current_club,", "#                                  'current_tournament': current_tournament,", "#                                  'matches_list': matches_list,", "#                                  'all_participants_list': all_participants_list,", "#                                  'winners_list': winners_list,", "#                                  'now':now,", "#                                  'finals':finals", "#                                 }", "#                              )", "#             else:", "#                 return render(request, 'generate_matches.html',   #redisplay html template with selected winners + unselected winners", "#                                 {'current_user': current_user,", "#                                  # 'clubs': clubs,", "#                                  'current_club': current_club,", "#                                  'current_tournament': current_tournament,", "#                                  'matches_list': matches_list,", "#                                  'all_participants_list': all_participants_list,", "#                                  'winners_list': winners_list,", "#                                  'now':now,", "#                                  'finals':finals", "#                                 }", "#                              )", "#", "#", "#     except ObjectDoesNotExist:", "#         return redirect('tournament_list', club_id)", "#     else:", "#         return redirect('tournament_list', club_id)", "#", "#", "#", "#", "# def power_Of_Two(x):    #x= len(participants_list)", "#     \"\"\"Calculate if the number of participants in a tournament is a power of 2,", "#     if not, if it is not, calculate the previous power of two. \"\"\"", "#", "#     if(x & (x-1) != 0):  #Not a power of 2", "#         while (x & x-1):", "#             x = x & x-1    #Finds previous power of 2", "#         print(\"not power of 2, next power of 2 is:\")", "#         print(x)", "#         return x", "#", "#", "#", "#", "# def make_Participants_Power_Of_2(current_tournament, previous_power_of_two):", "#     participants_list = current_tournament.participants_list.all()", "#     if previous_power_of_two:", "#         print(participants_list)", "#", "#         print(previous_power_of_two)", "#", "#", "#         new_participants = participants_list[:previous_power_of_two]", "#         for new_p in new_participants:", "#             current_tournament.current_participants.add(new_p)", "#", "#         print(\"new current p:\")", "#         print(current_tournament.current_participants.all())", "#", "#", "#", "#", "#         remaining = (participants_list.count() - previous_power_of_two) +1   #THE OTHER HALF OF THE LIST: WHO WONT PLAY!", "#", "#         removed_participants = participants_list[(remaining):]", "#         for new_p in removed_participants:", "#             current_tournament.removed_participants.add(new_p)", "#", "#         # print(remaining)", "#         # print(participants_list[(remaining):])", "#         print(\"removed p:\")", "#         # current_tournament.removed_participants.add(participants_list[(remaining):].all())", "#         print(current_tournament.removed_participants.all())", "#", "#     else:", "#         print(\"its fine\")", "#         for participants in participants_list:", "#             current_tournament.current_participants.add(participants)", "#", "#", "#", "#", "#", "#", "#", "# @login_required", "# def log_winners(request, tournament_id, club_id, user_id, match_id):", "#     try:", "#         current_user = request.user", "#         winner_user =  User.objects.get(id=user_id)", "#         current_club = Club.objects.get(id=club_id)", "#", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#", "#         current_tournament.winners_list.add(winner_user)", "#         current_tournament.all_winners_list.add(winner_user)", "#", "#", "#         current_match = Match.objects.get(matchId = match_id)", "#         current_match.winner = winner_user", "#         # current_match.match_winner_list.add(winner_user)", "#         if current_tournament.winners_list.count() == 1 and current_tournament.matches_list.count() ==1:", "#             # current_tournament.winner = winner_user", "#             current_tournament.tournament_winner = winner_user", "#             current_tournament.save()", "#", "#", "#", "#     except ObjectDoesNotExist:", "#         return redirect('generate_matches', club_id, tournament_id)", "#     else:", "#         if current_match.round == 1:", "#             return redirect('generate_matches', club_id, tournament_id)", "#         else:", "#             return redirect('generate_next_match', club_id, tournament_id)", "#", "#", "#", "#", "#", "# @login_required", "# def next_match(request, tournament_id, club_id):", "#     try:", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#         current_winners = current_tournament.winners_list.all()", "#", "#         if current_winners.count() != 1 :", "#             print(current_tournament.current_participants.all())", "#             current_tournament.current_participants.clear()", "#", "#             for winner in current_winners:", "#                 current_tournament.current_participants.add(winner)   #Move all winners from last round into current_participants_list", "#", "#             current_tournament.winners_list.clear()    #clear winners for this round.", "#", "#     except ObjectDoesNotExist:", "#         return redirect('generate_next_match',  club_id, tournament_id)", "#     else:", "#         return redirect('generate_next_match',  club_id, tournament_id)", "#", "#", "#", "#", "#", "# @login_required", "# def generate_next_match(request, tournament_id, club_id):", "#     try:", "#         current_user = request.user", "#         current_club = Club.objects.get(id=club_id)", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#", "#         all_participants_list = current_tournament.participants_list.all()", "#         participants_list = current_tournament.current_participants.all()", "#", "#         finals=1", "#", "#         round_input = 2  #All other rounds have 'round =2' for now --- maybe remove round field ?", "#         current_tournament.create_matches(round_input, participants_list)", "#         matches_list = current_tournament.matches_list.all()", "#         now = timezone.now", "#         winners_list = current_tournament.winners_list.all()", "#", "#         return render(request, 'generate_matches.html',", "#                         {'current_user': current_user,", "#                          # 'clubs': clubs,", "#                          'current_club': current_club,", "#                          'current_tournament': current_tournament,", "#                          'matches_list': matches_list,", "#                          'winners_list': winners_list,", "#                          'all_participants_list': all_participants_list,", "#                          'now':now,", "#                          'finals':finals,", "#                         }", "#                      )", "#", "#     except ObjectDoesNotExist:", "#         return redirect('tournament_list', club_id)", "#     else:", "#         return redirect('tournament_list', club_id)", "# =======", "#         return redirect('show_club', club_id)", "#", "# @login_required", "# def apply_officer(request, club_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     try:", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_apply_officer(club)", "#     except ObjectDoesNotExist:", "#         return redirect('user_profile')", "#     else:", "#         return redirect('show_club', club_id)", "#", "# @login_required", "# @owner_only", "# def approve_member_to_officer_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_approve_member_to_officer(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('applicant_officer_list', club_id)", "#     else:", "#         return redirect('applicant_officer_list', club_id)", "# >>>>>>> test_apply_membership"], "clubs/views/match_views.py": ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], "clubs/views/mixins.py": ["        if current_club.officers.filter(email=request.user.email).exists():", "        if current_club.officers.filter(email=request.user.email).exists() or current_club.club_owner.email!=request.user.email:", "        if current_club.members.filter(email=request.user.email).exists():"], "clubs/views/tournament_view.py": ["@login_required", "def tournament_list(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    tournaments = current_club.tournaments.all()", "    now = timezone.now", "    return render(request, 'tournament_list.html',", "                    {'tournaments': tournaments,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club,", "                     'now': now,", "                    }", "                 )", "", "@login_required", "@member_only", "def tournament_joined(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    tournament_joined = current_user.tournaments.all()", "    now = timezone.now", "    return render(request, 'tournament_joined.html',", "                    {'tournament_joined': tournament_joined,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club,", "                     'now': now,", "                    }", "                 )"], "clubs/views/user_view.py": ["from .mixins import LoginProhibitedMixin, OwnerOnlyMixin", "", "", "class ApplicantListView(LoginRequiredMixin, ListView):", "    # paginate_by = settings.USERS_PER_PAGE", "    context_object_name = \"OfficerApplicantListView\"", "    # paginate_by = settings.USERS_PER_PAGE", "@login_required", "@member_only", "def member_list_for_members(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    members = current_club.members.all()", "    return render(request, 'member_list_for_members.html',", "                    {'members': members,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club", "                    }", "                 )", "@login_required", "@officer_or_owner_only", "def member_list_for_staff(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    members = current_club.members.all()", "    return render(request, 'member_list_for_staff.html',", "                    {'members': members,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club", "                    }", "                 )", "@login_required", "@owner_only", "def officer_list(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    officers = current_club.officers.all()", "    return render(request, 'officer_list.html',", "                    {'officers': officers,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club", "                    }", "                 )", "@login_required", "@owner_only", "def applicant_officer_list(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    officer_applicants = current_club.officer_applicants.all()", "    return render(request, 'applicant_officer_list.html',", "                    {'officer_applicants': officer_applicants,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club", "                    }", "                 )", "@login_required", "@officer_only", "def co_organiser_list(request, club_id, tournament_id):", "    current_user = request.user", "    clubs = Club.objects.all()", "    current_club = Club.objects.get(id=club_id)", "    officers = current_club.officers.all()", "    current_tournament = Tournament.objects.get(id=tournament_id)", "    organisers = current_tournament.organisers.all()", "    return render(request, 'co_organiser_list.html',", "                    {'officers': officers,", "                     'organisers': organisers,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club,", "                     'tournament': current_tournament", "                    }", "                 )"], "system/settings.py": ["    'widget_tweaks'"], "system/urls.py": ["    path('club/<int:club_id>/officers/', views.officer_list, name='officer_list'),", "    path('club/<int:club_id>/members/', views.member_list_for_staff, name='member_list_for_staff'),", "    path('club/<int:club_id>/member_list/', views.member_list_for_members, name='member_list_for_members'),", "    path('club/<int:club_id>/tournaments/', views.tournament_list, name='tournament_list'),", "    path('club/<int:club_id>/tournament_joined/', views.tournament_joined, name='tournament_joined'),", "    path('club/<int:club_id>/co_organise/<int:tournament_id>', views.co_organiser_list, name='co_organiser_list'),"]}]}, {"commitAuthor": "lisa947", "commitSha": "fc2c112beb41408c0a8c97fc69058f7fa7c98517", "filesEdited": ["clubs/templates/partials/club_profile.html", "clubs/templates/tournament_list.html", "clubs/tests/views/test_apply_membership_toggle_view.py", "clubs/tests/views/test_apply_officer_toggle_view.py", "clubs/tests/views/test_co_organiser_list_view.py", "clubs/views/apply_member_or_officer_views.py", "clubs/views/club_view.py", "clubs/views/match_views.py", "clubs/views/toggle_view.py", "clubs/views/tournament_view.py", "clubs/views/user_view.py", "system/urls.py"], "additionsPerFile": [{"clubs/templates/partials/club_profile.html": ["          <form action=\"{% url 'apply_membership_toggle' current_club.id %}\" method=\"get\">", "            <form action=\"{% url 'apply_officer_toggle' current_club.id %}\" method=\"get\">", "         {% endif %}"], "clubs/templates/tournament_list.html": ["                  <form action=\"{% url 'co_organiser_list' club_id=current_club.id tournament_id=tournament.id%}\" method=\"get\">"], "clubs/tests/views/test_apply_membership_toggle_view.py": ["class ApplyMembershipToggleTest(TestCase):", "        self.url = reverse('apply_membership_toggle', kwargs={'club_id': self.club.id})", "        self.assertEqual(f'/club/{self.club.id}/apply_membership_toggle/',self.url)", "        url = reverse('apply_membership_toggle', kwargs={'club_id': self.club.id+9999})"], "clubs/tests/views/test_apply_officer_toggle_view.py": ["class ApplyOfficerToggleTest(TestCase):", "        self.url = reverse('apply_officer_toggle', kwargs={'club_id': self.club.id})", "        self.assertEqual(f'/club/{self.club.id}/apply_officer_toggle/',self.url)", "        url = reverse('apply_officer_toggle', kwargs={'club_id': self.club.id+9999})"], "clubs/tests/views/test_co_organiser_list_view.py": ["        self.url = reverse('co_organiser_list', kwargs={'club_id': self.club.id, 'tournament_id':self.tournament.id})", "    #     self.assertEqual(f'/club/{self.club.id}/co_organiser_list/{self.tournament.id}',self.url)", "    #         # path('club/<int:club_id>/co_organiser_list/<int:tournament_id>', views.co_organiser_list, name='co_organiser_list'),"], "clubs/views/club_view.py": ["from django.utils import timezone", "from django.contrib.auth.decorators import login_required", "from ..helpers import *", "from django.views.generic import ListView", "from django.views.generic.detail import DetailView", "from django.views.generic.list import MultipleObjectMixin", "from django.http import Http404", "from .mixins import *", "", "class ShowClubView(LoginRequiredMixin, DetailView, MultipleObjectMixin):", "    \"\"\"View that shows individual user details.\"\"\"", "", "    model = Club", "    template_name = 'show_club.html'", "    # paginate_by = settings.POSTS_PER_PAGE", "    pk_url_kwarg = 'club_id'", "", "", "    def get(self, request, *args, **kwargs):", "        \"\"\"Handle get request, and redirect to user_profile if club_id invalid.\"\"\"", "        self.current_user = request.user", "        try:", "            return super().get(request, *args, **kwargs)", "        except Http404:", "            return redirect('user_profile')", "", "    def get_context_data(self, **kwargs):", "        \"\"\"Generate context data to be shown in the template.\"\"\"", "        now = timezone.now", "        current_club = self.get_object()", "        tournaments = current_club.tournaments.all()", "        clubs = Club.objects.all()", "        context = super().get_context_data(object_list=tournaments, **kwargs)", "        context['current_club'] = current_club", "        context['clubs'] = clubs", "        context['tournaments'] = context['object_list']", "        context['current_user'] = self.current_user", "        context['now'] = now", "        return context"], "clubs/views/match_views.py": ["from django.contrib.auth import login, logout", "from ..models import User, Club, Tournament, Match", "from ..helpers import *", "# from django.contrib.auth.mixins import LoginRequiredMixin", "# from django.views.generic import ListView", "# from django.views.generic.detail import DetailView", "# from django.views.generic.list import MultipleObjectMixin", "# from django.http import Http404", "# from .mixins import *"], "clubs/views/toggle_view.py": ["from ..helpers import *", "        return redirect('co_organiser_list', club_id, tournament_id)", "        return redirect('co_organiser_list', club_id, tournament_id)", "", "@login_required", "def apply_membership_toggle(request, club_id):", "    current_user = request.user", "    clubs = Club.objects.all()", "    try:", "        club = Club.objects.get(id=club_id)", "        current_user.toggle_apply_membership(club)", "    except ObjectDoesNotExist:", "        return redirect('user_profile')", "    else:", "        return redirect('show_club', club_id)", "", "@login_required", "def apply_officer_toggle(request, club_id):", "    current_user = request.user", "    clubs = Club.objects.all()", "    try:", "        club = Club.objects.get(id=club_id)", "        current_user.toggle_apply_officer(club)", "    except ObjectDoesNotExist:", "        return redirect('user_profile')", "    else:", "        return redirect('show_club', club_id)"], "clubs/views/tournament_view.py": ["from django.contrib.auth.decorators import login_required", "from ..helpers import *", "from django.utils import timezone", "", "@login_required", "def tournament_list(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    tournaments = current_club.tournaments.all()", "    now = timezone.now", "    return render(request, 'tournament_list.html',", "                    {'tournaments': tournaments,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club,", "                     'now': now,", "                    }", "                 )", "", "@login_required", "@member_only", "def tournament_joined(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    tournament_joined = current_user.tournaments.all()", "    now = timezone.now", "    return render(request, 'tournament_joined.html',", "                    {'tournament_joined': tournament_joined,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club,", "                     'now': now,", "                    }", "                 )"], "clubs/views/user_view.py": ["from django.contrib import messages", "from django.conf import settings", "from django.shortcuts import render, redirect", "from django.utils.decorators import method_decorator", "from django.views import View", "from django.contrib.auth import authenticate, login", "from django.contrib.auth.decorators import login_required", "from ..models import User, Club, Tournament", "from ..helpers import *", "from django.utils import timezone", "from django.contrib.auth.mixins import LoginRequiredMixin", "from django.views.generic import ListView", "from django.views.generic.detail import DetailView", "from django.views.generic.list import MultipleObjectMixin", "from django.http import Http404", "from .mixins import LoginProhibitedMixin, OwnerOnlyMixin", "", "", "class ShowUserView(LoginRequiredMixin, DetailView, MultipleObjectMixin):", "    \"\"\"View that shows individual user details.\"\"\"", "", "    model = User", "    template_name = 'show_user.html'", "    # paginate_by = settings.POSTS_PER_PAGE", "    pk_url_kwarg = 'user_id'", "", "", "    def get(self, request, *args, **kwargs):", "        \"\"\"Handle get request, and redirect to user_profile if user_id invalid.\"\"\"", "        self.current_user = request.user", "        try:", "            return super().get(request, *args, **kwargs)", "        except Http404:", "            return redirect('user_profile')", "", "    def get_context_data(self, **kwargs):", "        \"\"\"Generate context data to be shown in the template.\"\"\"", "        user = self.get_object()", "        users = User.objects.all()", "        context = super().get_context_data(object_list=users, **kwargs)", "        context['user'] = user", "        context['users'] = context['object_list']", "        context['current_user'] = self.current_user", "        return context", "", "", "class ApplicantListView(LoginRequiredMixin, ListView):", "    \"\"\"View that shows a list of all users.\"\"\"", "", "    model = User", "    template_name = \"applicant_list.html\"", "    context_object_name = \"applicants\"", "    # paginate_by = settings.USERS_PER_PAGE", "", "    def get(self, request, club_id, *args, **kwargs):", "        self.current_user = request.user", "        self.clubs = Club.objects.all()", "        self.current_club = Club.objects.get(id=club_id)", "        self.applicants = self.current_club.applicants.all()", "        try:", "            return super().get(request, *args, **kwargs)", "        except Http404:", "            return redirect('applicant_list', club_id)", "", "    def get_context_data(self, **kwargs):", "        context = super().get_context_data(object_list=self.applicants, **kwargs)", "        context['current_user'] = self.current_user", "        context['applicants'] = context['object_list']", "        context['clubs'] = self.clubs", "        context['current_club'] = self.current_club", "        return context", "", "class OfficerApplicantListView(LoginRequiredMixin, OwnerOnlyMixin, ListView):", "    \"\"\"View that shows a list of all users.\"\"\"", "", "    model = User", "    template_name = \"officer_applicant_list.html\"", "    context_object_name = \"OfficerApplicantListView\"", "    # paginate_by = settings.USERS_PER_PAGE", "", "    def get(self, request, club_id, *args, **kwargs):", "        self.current_user = request.user", "        self.clubs = Club.objects.all()", "        self.current_club = Club.objects.get(id=club_id)", "        self.officer_applicants = self.current_club.officer_applicants.all()", "        try:", "            return super().get(request, *args, **kwargs)", "        except Http404:", "            return redirect('officer_applicant_list', club_id)", "", "    def get_context_data(self, **kwargs):", "        context = super().get_context_data(object_list=self.officer_applicants, **kwargs)", "        context['current_user'] = self.current_user", "        context['officer_applicants'] = context['object_list']", "        context['clubs'] = self.clubs", "        context['current_club'] = self.current_club", "        return context", "", "", "@login_required", "@member_only", "def member_list_for_members(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    members = current_club.members.all()", "    return render(request, 'member_list_for_members.html',", "                    {'members': members,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club", "                    }", "                 )", "", "@login_required", "@officer_or_owner_only", "def member_list_for_staff(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    members = current_club.members.all()", "    return render(request, 'member_list_for_staff.html',", "                    {'members': members,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club", "                    }", "                 )", "", "", "@login_required", "@owner_only", "def officer_list(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    officers = current_club.officers.all()", "    return render(request, 'officer_list.html',", "                    {'officers': officers,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club", "                    }", "                 )", "", "@login_required", "@owner_only", "def applicant_officer_list(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    officer_applicants = current_club.officer_applicants.all()", "    return render(request, 'applicant_officer_list.html',", "                    {'officer_applicants': officer_applicants,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club", "                    }", "                 )", "", "@login_required", "@officer_only", "def co_organiser_list(request, club_id, tournament_id):", "    current_user = request.user", "    clubs = Club.objects.all()", "    current_club = Club.objects.get(id=club_id)", "    officers = current_club.officers.all()", "    current_tournament = Tournament.objects.get(id=tournament_id)", "    organisers = current_tournament.organisers.all()", "    return render(request, 'co_organiser_list.html',", "                    {'officers': officers,", "                     'organisers': organisers,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club,", "                     'tournament': current_tournament", "                    }", "                 )", "", "@login_required", "def user_profile(request):", "    current_user = request.user", "    clubs = Club.objects.all()", "    return render(request, 'user_profile.html',", "                    {'current_user': current_user,", "                     'clubs': clubs,", "                    }", "                 )"], "system/urls.py": ["    path('club/<int:club_id>/apply_membership_toggle/', views.apply_membership_toggle, name='apply_membership_toggle'),", "    path('club/<int:club_id>/apply_officer_toggle/', views.apply_officer_toggle, name='apply_officer_toggle'),", "    path('club/<int:club_id>/approve_member_to_officer_toggle/<int:user_id>', views.approve_member_to_officer_toggle, name='approve_member_to_officer_toggle'),", "    path('club/<int:club_id>/co_organise_toggle/<int:tournament_id>/<int:user_id>', views.co_organise_toggle, name='co_organise_toggle'),", "    path('club/<int:club_id>/co_organise/<int:tournament_id>', views.co_organiser_list, name='co_organiser_list'),", "    path('club/<int:club_id>', views.ShowClubView.as_view(), name='show_club'),"]}], "deletionsPerFile": [{"clubs/templates/partials/club_profile.html": ["          <form action=\"{% url 'apply_membership' current_club.id %}\" method=\"get\">", "            <form action=\"{% url 'apply_officer' current_club.id %}\" method=\"get\">", "", "          {% endif %}"], "clubs/templates/tournament_list.html": ["                  <form action=\"{% url 'co_organise' club_id=current_club.id tournament_id=tournament.id%}\" method=\"get\">"], "clubs/tests/views/test_apply_membership_toggle_view.py": ["class ApplyMembershipTest(TestCase):", "        self.url = reverse('apply_membership', kwargs={'club_id': self.club.id})", "        self.assertEqual(f'/apply_membership/{self.club.id}',self.url)", "        url = reverse('apply_membership', kwargs={'club_id': self.club.id+9999})"], "clubs/tests/views/test_apply_officer_toggle_view.py": ["class ApplyOfficerTest(TestCase):", "        self.url = reverse('apply_officer', kwargs={'club_id': self.club.id})", "        self.assertEqual(f'/apply_officer/{self.club.id}',self.url)", "        url = reverse('apply_officer', kwargs={'club_id': self.club.id+9999})"], "clubs/tests/views/test_co_organiser_list_view.py": ["        self.url = reverse('co_organise', kwargs={'club_id': self.club.id, 'tournament_id':self.tournament.id})", "    #     self.assertEqual(f'/club/{self.club.id}/co_organise/{self.tournament.id}',self.url)", "    #         # path('club/<int:club_id>/co_organise/<int:tournament_id>', views.co_organise, name='co_organise'),"], "clubs/views/apply_member_or_officer_views.py": ["\"\"\"Apply for being a member or officer related views.\"\"\"", "from django.contrib.auth.decorators import login_required", "from django.core.exceptions import ObjectDoesNotExist", "from django.shortcuts import redirect", "from clubs.helpers import member_only", "from clubs.models import User, Club", "", "@login_required", "def apply_membership(request, club_id):", "    current_user = request.user", "    clubs = Club.objects.all()", "    try:", "        club = Club.objects.get(id=club_id)", "        current_user.toggle_apply_membership(club)", "    except ObjectDoesNotExist:", "        return redirect('user_profile')", "    else:", "        return redirect('show_club', club_id)", "", "@login_required", "def apply_officer(request, club_id):", "    current_user = request.user", "    clubs = Club.objects.all()", "    try:", "        club = Club.objects.get(id=club_id)", "        current_user.toggle_apply_officer(club)", "    except ObjectDoesNotExist:", "        return redirect('user_profile')", "    else:", "        return redirect('show_club', club_id)"], "clubs/views/match_views.py": ["from django.contrib.auth import authenticate, login, logout", "from ..models import User, Club, Tournament", "from ..helpers import login_prohibited, member_only, officer_only, owner_only, officer_or_owner_only", "from django.contrib.auth.mixins import LoginRequiredMixin", "from django.views.generic import ListView", "from django.views.generic.detail import DetailView", "from django.views.generic.list import MultipleObjectMixin", "from django.http import Http404", "from .mixins import LoginProhibitedMixin, OwnerOnlyMixin", "", "@login_required", "def user_profile(request):", "    current_user = request.user", "    clubs = Club.objects.all()", "    return render(request, 'user_profile.html',", "                    {'current_user': current_user,", "                     'clubs': clubs,", "                    }", "                 )", "", "class ShowUserView(LoginRequiredMixin, DetailView, MultipleObjectMixin):", "    \"\"\"View that shows individual user details.\"\"\"", "", "    model = User", "    template_name = 'show_user.html'", "    # paginate_by = settings.POSTS_PER_PAGE", "    pk_url_kwarg = 'user_id'", "", "", "    def get(self, request, *args, **kwargs):", "        \"\"\"Handle get request, and redirect to user_list if user_id invalid.\"\"\"", "        self.current_user = request.user", "        try:", "            return super().get(request, *args, **kwargs)", "        except Http404:", "            return redirect('user_profile')", "", "    def get_context_data(self, **kwargs):", "        \"\"\"Generate context data to be shown in the template.\"\"\"", "        user = self.get_object()", "        users = User.objects.all()", "        context = super().get_context_data(object_list=users, **kwargs)", "        context['user'] = user", "        context['users'] = context['object_list']", "        context['current_user'] = self.current_user", "        return context", "", "class ApplicantListView(LoginRequiredMixin, ListView):", "    \"\"\"View that shows a list of all users.\"\"\"", "", "    model = User", "    template_name = \"applicant_list.html\"", "    context_object_name = \"applicants\"", "    # paginate_by = settings.USERS_PER_PAGE", "", "    def get(self, request, club_id, *args, **kwargs):", "        self.current_user = request.user", "        self.clubs = Club.objects.all()", "        self.current_club = Club.objects.get(id=club_id)", "        self.applicants = self.current_club.applicants.all()", "        try:", "            return super().get(request, *args, **kwargs)", "        except Http404:", "            return redirect('applicant_list', club_id)", "", "    def get_context_data(self, **kwargs):", "        context = super().get_context_data(object_list=self.applicants, **kwargs)", "        context['current_user'] = self.current_user", "        context['applicants'] = context['object_list']", "        context['clubs'] = self.clubs", "        context['current_club'] = self.current_club", "        return context", "", "class OfficerApplicantListView(LoginRequiredMixin, OwnerOnlyMixin, ListView):", "    \"\"\"View that shows a list of all users.\"\"\"", "", "    model = User", "    template_name = \"officer_applicant_list.html\"", "    context_object_name = \"OfficerApplicantListView\"", "    # paginate_by = settings.USERS_PER_PAGE", "", "    def get(self, request, club_id, *args, **kwargs):", "        self.current_user = request.user", "        self.clubs = Club.objects.all()", "        self.current_club = Club.objects.get(id=club_id)", "        self.officer_applicants = self.current_club.officer_applicants.all()", "        try:", "            return super().get(request, *args, **kwargs)", "        except Http404:", "            return redirect('officer_applicant_list', club_id)", "", "    def get_context_data(self, **kwargs):", "        context = super().get_context_data(object_list=self.officer_applicants, **kwargs)", "        context['current_user'] = self.current_user", "        context['officer_applicants'] = context['object_list']", "        context['clubs'] = self.clubs", "        context['current_club'] = self.current_club", "        return context", "", "@login_required", "@member_only", "def member_list_for_members(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    members = current_club.members.all()", "    return render(request, 'member_list_for_members.html',", "                    {'members': members,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club", "                    }", "                 )", "", "@login_required", "@officer_or_owner_only", "def member_list_for_staff(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    members = current_club.members.all()", "    return render(request, 'member_list_for_staff.html',", "                    {'members': members,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club", "                    }", "                 )", "", "", "@login_required", "@owner_only", "def officer_list(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    officers = current_club.officers.all()", "    return render(request, 'officer_list.html',", "                    {'officers': officers,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club", "                    }", "                 )", "", "@login_required", "@owner_only", "def applicant_officer_list(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    officer_applicants = current_club.officer_applicants.all()", "    return render(request, 'applicant_officer_list.html',", "                    {'officer_applicants': officer_applicants,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club", "                    }", "                 )", "", "", "", "@login_required", "def tournament_list(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    tournaments = current_club.tournaments.all()", "    now = timezone.now", "    return render(request, 'tournament_list.html',", "                    {'tournaments': tournaments,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club,", "                     'now': now,", "                    }", "                 )", "", "@login_required", "@member_only", "def tournament_joined(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    tournament_joined = current_user.tournaments.all()", "    now = timezone.now", "    return render(request, 'tournament_joined.html',", "                    {'tournament_joined': tournament_joined,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club,", "                     'now': now,", "                    }", "                 )", "", "@login_required", "def show_club(request, club_id):", "    current_user = request.user", "    clubs = Club.objects.all()", "    try:", "        current_club = Club.objects.get(id=club_id)", "    except ObjectDoesNotExist:", "        return redirect('user_profile')", "    else:", "        return render(request, 'show_club.html',", "            {'current_club': current_club,", "             'current_user': current_user,", "             'clubs': clubs}", "        )", "", "", "@login_required", "@officer_only", "def co_organise(request, club_id, tournament_id):", "    current_user = request.user", "    clubs = Club.objects.all()", "    current_club = Club.objects.get(id=club_id)", "    officers = current_club.officers.all()", "    current_tournament = Tournament.objects.get(id=tournament_id)", "    organisers = current_tournament.organisers.all()", "    return render(request, 'co_organiser_list.html',", "                    {'officers': officers,", "                     'organisers': organisers,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club,", "                     'tournament': current_tournament", "                    }", "                 )"], "clubs/views/toggle_view.py": ["from ..helpers import login_prohibited, member_only, officer_only, owner_only", "        return redirect('co_organise', club_id, tournament_id)", "        return redirect('co_organise', club_id, tournament_id)"], "clubs/views/tournament_view.py": [""], "system/urls.py": ["    path('club/<int:club_id>', views.show_club, name='show_club'),", "    path('club/<int:club_id>/co_organise/<int:tournament_id>', views.co_organise, name='co_organise'),", "    path('club/<int:club_id>/co_organise_toggle/<int:tournament_id>/<int:user_id>', views.co_organise_toggle, name='co_organise_toggle'),", "", "", "    path('apply_membership/<int:club_id>', views.apply_membership, name='apply_membership'),", "    path('apply_officer/<int:club_id>', views.apply_officer, name='apply_officer'),", "", "    path('club/<int:club_id>/approve_member_to_officer_toggle/<int:user_id>', views.approve_member_to_officer_toggle, name='approve_member_to_officer_toggle'),", ""]}]}, {"commitAuthor": "FarihaChoudhury", "commitSha": "7dcffef4bac2960dda78dd56029159bdb075f7e5", "filesEdited": ["clubs/tests/forms/test_user_form.py", "clubs/views.py"], "additionsPerFile": [{"clubs/tests/forms/test_user_form.py": ["\"\"\"Unit tests of the User Form.\"\"\"", "    \"\"\"Unit tests of the User Form.\"\"\""], "clubs/views.py": ["", "# THIS IS MORE MATCHES - FARIHA WAS TESTING WITH IT --- KEEP FOR NOW PLEASE!!!", "#         Match.objects.all().delete()", "#         --^^^ USE THIS AFTER CLICKING 'GENERATE_MATCHES', THEN COMMENT OUT AGAIN", "#         USE IT TO CLEAR THE WINNERS FOR A TOURNAMENT - FOR DEV PURPOSES"]}], "deletionsPerFile": [{"clubs/tests/forms/test_user_form.py": ["\"\"\"Unit tests of the user form.\"\"\"", "    \"\"\"Unit tests of the user form.\"\"\""], "clubs/views.py": ["#THIS IS MORE MATCHES - FARIHA WAS TESTING WITH IT --- KEEP FOR NOW PLEASE!!!", "        # Match.objects.all().delete()", "        # --^^^ USE THIS AFTER CLICKING 'GENERATE_MATCHES', THEN COMMENT OUT AGAIN", "        # USE IT TO CLEAR THE WINNERS FOR A TOURNAMENT - FOR DEV PURPOSES"]}]}, {"commitAuthor": "FarihaChoudhury", "commitSha": "4840cc8886190c0bcb712cd5d7c4222262d4cd58", "filesEdited": ["clubs/forms.py", "clubs/tests/fixtures/default_tournament.json", "clubs/tests/fixtures/other_tournaments.json", "clubs/tests/forms/test_club_form.py", "clubs/tests/forms/test_log_in_form.py", "clubs/tests/forms/test_password_form.py", "clubs/tests/forms/test_sign_up_form.py", "clubs/tests/forms/test_tournament_form.py", "clubs/tests/forms/test_user_form.py"], "additionsPerFile": [{"clubs/tests/fixtures/default_tournament.json": ["      \"start_time\" : \"2023-12-04T03:26:15+00:00\",", "      \"tournament_winner\": 1"], "clubs/tests/fixtures/other_tournaments.json": ["        \"start_time\" : \"2023-12-04T03:27:15+00:00\",", "        \"start_time\" : \"2023-12-04T03:28:15+00:00\","], "clubs/tests/forms/test_club_form.py": ["\"\"\"Unit tests of the club form.\"\"\"", "from django import forms", "    \"\"\"Unit tests of the Club form.\"\"\"", "", "    fixtures = ['clubs/tests/fixtures/default_club.json',", "                'clubs/tests/fixtures/default_user.json']", "", "", "        self.user = User.objects.get(email='johndoe@example.org')", "        self.form_input = {", "            'club_name': 'Club 4',", "            'location': 'London',", "            'description': 'Random chess club in london',", "        }", "", "", "    def test_form_has_necessary_fields(self):", "        form = ClubForm()", "        self.assertIn('club_name', form.fields)", "        self.assertIn('location', form.fields)", "        self.assertIn('description', form.fields)", "        form = ClubForm(data=self.form_input)", "    def test_form_uses_model_validation(self):", "        self.form_input['location'] = 'x'*200", "        form = ClubForm(data=self.form_input)", "", "    def test_form_rejects_blank_club_name(self):", "        self.form_input['club_name'] = ''", "        form = ClubForm(data=self.form_input)", "        self.assertFalse(form.is_valid())", "", "    def test_form_rejects_blank_password(self):", "        self.form_input['location'] = ''", "        form = ClubForm(data=self.form_input)", "        self.assertFalse(form.is_valid())", "", "    def test_form_accepts_no_description(self):", "        self.form_input['description'] = ''", "        form = ClubForm(data=self.form_input)", "        self.assertTrue(form.is_valid())"], "clubs/tests/forms/test_log_in_form.py": ["# from . import fixtures"], "clubs/tests/forms/test_password_form.py": ["from django import forms", "        self.user = User.objects.get(email='johndoe@example.org')", "        self.assertFalse(form.is_valid())"], "clubs/tests/forms/test_sign_up_form.py": ["from django import forms", "        'chess_experience_level': 1,", "        # chess_experience_level_field = form.fields['chess_experience_level']", "        # self.assertFalse(isinstance(chess_experience_level_field, forms.IntegerField))", "        # self.assertIn()"], "clubs/tests/forms/test_tournament_form.py": ["# \"\"\"Unit tests of the tournament form.\"\"\"", "# from django import forms", "# from django.test import TestCase", "# from clubs.forms import TournamentForm", "# from clubs.models import User, Club, Tournament", "#", "# class TournamentFormTestCase(TestCase):", "#     \"\"\"Unit tests of the tournament form.\"\"\"", "#", "#     fixtures = ['clubs/tests/fixtures/default_club.json',", "#                 'clubs/tests/fixtures/default_user.json']", "#", "#     def setUp(self):", "#         self.user = User.objects.get(email='johndoe@example.org')", "#         self.form_input = {", "#             'tournament_name': 'Tournament 4',", "#             'short_description': 'Another chess club tournament',", "#             'number_of_participants': 13,", "#             'deadline': '2022-12-04T03:23:15+00:00',", "#             'start_time': '023-12-04T03:23:15+00:00',", "#         }", "#         self.club = Club.objects.get(club_name = \"Chess Club 1\")", "#         self.club.officers.add(self.user)", "#         self.user.clubs.add(self.club)", "#", "#", "#     def test_valid_tournament_form(self):", "#         form = TournamentForm(data=self.form_input)", "#         self.assertTrue(form.is_valid())", "", "    # def test_form_has_necessary_fields(self):", "    #     form = TournamentForm()", "    #     self.assertIn('tournament_name', form.fields)", "    #     self.assertIn('short_description', form.fields)", "    #     self.assertIn('number_of_participants', form.fields)", "    #     self.assertIn('deadline', form.fields)", "    #     self.assertIn('start_time', form.fields)", "        # number_of_participants_field = form.fields['number_of_participants']", "        # self.assertIn()", "        # self.assertTrue(isinstance(number_of_participants_field , forms.IntegerField))", "        # deadline_field = form.fields['deadline']", "        # self.assertTrue(isinstance(deadline_field , forms.DateTimeField))", "        # start_time_field = form.fields['start_time']", "        # self.assertTrue(isinstance(start_time_field , forms.DateTimeField))", "", "", "", "    # def test_form_tournament_model_validation(self):", "    #     self.form_input['number_of_participants'] = 'bad_number_of_participants'", "    #     form = TournamentForm(data=self.form_input)", "    #     self.assertFalse(form.is_valid())", "    #", "    #", "    # def test_form_rejects_blank_tournament_name(self):", "    #     self.form_input['tournament_name'] = ''", "    #     form = TournamentForm(data=self.form_input)", "    #     self.assertFalse(form.is_valid())", "    #", "    # def test_form_rejects_blank_number_of_participants(self):", "    #     self.form_input['number_of_participants'] = ''", "    #     form = TournamentForm(data=self.form_input)", "    #     self.assertFalse(form.is_valid())", "    #", "    # def test_form_accepts_no_short_description(self):", "    #     self.form_input['short_description'] = ''", "    #     form = TournamentForm(data=self.form_input)", "    #     self.assertTrue(form.is_valid())", "", "", "", "", "", "", "", "", "    # def test_form_must_save_correctly(self):", "    #     tournament = Tournament.objects.get(tournament_name='Tournament 4')", "    #     form = TornamentForm(instance=tournament, data=self.form_input)", "    #     before_count = Tournament.objects.count()", "    #     form.save()", "    #     after_count = Tournament.objects.count()", "    #     self.assertEqual(after_count, before_count)", "    #     self.assertEqual(Tournament.tournament_name, 'Tournament 4')", "    #     self.assertEqual(Tournament.short_description, 'Another chess club tournament')", "    #     self.assertEqual(Tournament.number_of_participants,'13')", "    #     self.assertEqual(Tournament.deadline, '2022-12-04T03:23:15+00:00')", "    #     self.assertEqual(Tournament.start_time, '023-12-04T03:23:15+00:00')", "    #     self.assertEqual(Tournament.description, 'I love chess.')"], "clubs/tests/forms/test_user_form.py": ["from django import forms"]}], "deletionsPerFile": [{"clubs/forms.py": ["        widgets = {'description': forms.Textarea()}"], "clubs/tests/fixtures/default_tournament.json": ["      \"start_time\" : \"2023-12-04T03:23:15+00:00\",", "      \"tournament_winner\": 1 "], "clubs/tests/fixtures/other_tournaments.json": ["        \"start_time\" : \"2023-12-04T03:23:15+00:00\",", "        \"start_time\" : \"2023-12-04T03:23:15+00:00\","], "clubs/tests/forms/test_club_form.py": ["        self.user = User.objects.create_user(", "            '@jonedoe@example.org',", "            first_name='John',", "            last_name='Doe',", "            email='johndoe@example.org',", "            password='Password123',", "            public_bio = 'My bio',", "            chess_experience_level= '1',", "            short_personal_statement = 'I love chess.',", "            password='Password123',", "        )", "        input = {'location': 'x'*200 }", "        form = ClubForm(data=input)", "    def test_invalid_club_form(self):", "        input = {'location': 'x'*600 }", "        form = ClubForm(data=input)"], "clubs/tests/forms/test_log_in_form.py": ["from . import fixtures"], "clubs/tests/forms/test_password_form.py": ["        self.user = User.objects.get(username='@johndoe')", "        self.assertFalse(form.is_valid())"], "clubs/tests/forms/test_sign_up_form.py": ["from django import forms", "        'chess_experience_level': '1',", "        chess_experience_level_field = form.fields['chess_experience_level']", "        self.assertTrue(isinstance(chess_experience_level_field, forms.IntegerField))"]}]}, {"commitAuthor": "ZhangWei0304", "commitSha": "a42ef7a4de6279c128ec785b8bd1929e6a18a77b", "filesEdited": ["clubs/templates/applicant_list.html", "clubs/templates/member_list_for_members.html", "clubs/templates/member_list_for_staff.html", "clubs/templates/officer_applicant_list.html", "clubs/templates/officer_list.html", "clubs/templates/tournament_joined.html", "clubs/templates/tournament_list.html", "clubs/tests/views/test_applicant_list_view.py", "clubs/tests/views/test_club_profile_view.py", "clubs/tests/views/test_member_list_for_members_view.py", "clubs/tests/views/test_member_list_for_staff_view.py", "clubs/tests/views/test_officer_applicant_list.view.py", "clubs/tests/views/test_officer_applicant_list_view.py", "clubs/tests/views/test_officer_list_view.py", "clubs/tests/views/test_tournament_joined_view.py", "clubs/tests/views/test_tournament_list_view.py", "clubs/views.py", "clubs/views/other_views.py", "system/settings.py"], "additionsPerFile": [{"clubs/templates/applicant_list.html": ["{% load bootstrap_pagination %}", "      {% bootstrap_paginate page_obj range=6 previous_label=\"Previous\" next_label=\"Next\" show_first_last=\"true\" %}"], "clubs/templates/member_list_for_members.html": ["      <nav aria-label=\"Page navigation example\">", "        <ul class=\"pagination justify-content-end\">", "    {% if member_list.has_previous %}", "        <li class=\"page-item\">", "        <a class=\"page-link\" href=\"?page=1\">&laquo First</a></li>", "        <li class=\"page-item\">", "        <a class=\"page-link\" href=\"?page={{ member_list.previous_page_number }}\">Previous</a></li>", "    {% else %}", "        <li class=\"page-item disabled\">", "        <a class=\"page-link\">&laquo First</a></li>", "        <li class=\"page-item disabled\">", "        <a class=\"page-link\">Previous</a></li>", "    {% endif %}", "    {% for i in nums %}", "        <li class=\"page-item\">", "          <a class=\"page-link\" href=\"?page={{ forloop.counter }}\">", "            {{ forloop.counter }}</a></li>", "    {% endfor %}", "    {% if member_list.has_next %}", "        <li class=\"page-item\">", "        <a class=\"page-link\" href=\"?page={{ member_list.next_page_number }}\">Next</a></li>", "        <li class=\"page-item\">", "        <a class=\"page-link\" href=\"?page={{ member_list.paginator.num_pages }}\">Last &raquo</a></li>", "    {% else %}", "        <li class=\"page-item disabled\">", "        <a class=\"page-link\">Next</a></li>", "        <li class=\"page-item disabled\">", "        <a class=\"page-link\">Last &raquo</a></li>", "    {% endif %}", "       </ul>", "    </nav>", "        {% for member in member_list %}"], "clubs/templates/member_list_for_staff.html": ["       <nav aria-label=\"Page navigation example\">", "         <ul class=\"pagination justify-content-end\">", "     {% if member_list.has_previous %}", "         <li class=\"page-item\">", "         <a class=\"page-link\" href=\"?page=1\">&laquo First</a></li>", "         <li class=\"page-item\">", "         <a class=\"page-link\" href=\"?page={{ member_list.previous_page_number }}\">Previous</a></li>", "     {% else %}", "         <li class=\"page-item disabled\">", "         <a class=\"page-link\">&laquo First</a></li>", "         <li class=\"page-item disabled\">", "         <a class=\"page-link\">Previous</a></li>", "     {% endif %}", "     {% for i in nums %}", "         <li class=\"page-item\">", "           <a class=\"page-link\" href=\"?page={{ forloop.counter }}\">", "             {{ forloop.counter }}</a></li>", "     {% endfor %}", "     {% if member_list.has_next %}", "         <li class=\"page-item\">", "         <a class=\"page-link\" href=\"?page={{ member_list.next_page_number }}\">Next</a></li>", "         <li class=\"page-item\">", "         <a class=\"page-link\" href=\"?page={{ member_list.paginator.num_pages }}\">Last &raquo</a></li>", "     {% else %}", "         <li class=\"page-item disabled\">", "         <a class=\"page-link\">Next</a></li>", "         <li class=\"page-item disabled\">", "         <a class=\"page-link\">Last &raquo</a></li>", "     {% endif %}", "        </ul>", "     </nav>", "         {% for member in member_list %}"], "clubs/templates/officer_applicant_list.html": ["{% load bootstrap_pagination %}", "      {% bootstrap_paginate page_obj range=6 previous_label=\"Previous\" next_label=\"Next\" show_first_last=\"true\" %}"], "clubs/templates/officer_list.html": ["      <nav aria-label=\"Page navigation example\">", "        <ul class=\"pagination justify-content-end\">", "    {% if officer_list.has_previous %}", "        <li class=\"page-item\">", "        <a class=\"page-link\" href=\"?page=1\">&laquo First</a></li>", "        <li class=\"page-item\">", "        <a class=\"page-link\" href=\"?page={{ officer_list.previous_page_number }}\">Previous</a></li>", "    {% else %}", "        <li class=\"page-item disabled\">", "        <a class=\"page-link\">&laquo First</a></li>", "        <li class=\"page-item disabled\">", "        <a class=\"page-link\">Previous</a></li>", "    {% endif %}", "    {% for i in nums %}", "        <li class=\"page-item\">", "          <a class=\"page-link\" href=\"?page={{ forloop.counter }}\">", "            {{ forloop.counter }}</a></li>", "    {% endfor %}", "    {% if officer_list.has_next %}", "        <li class=\"page-item\">", "        <a class=\"page-link\" href=\"?page={{ officer_list.next_page_number }}\">Next</a></li>", "        <li class=\"page-item\">", "        <a class=\"page-link\" href=\"?page={{ officer_list.paginator.num_pages }}\">Last &raquo</a></li>", "    {% else %}", "        <li class=\"page-item disabled\">", "        <a class=\"page-link\">Next</a></li>", "        <li class=\"page-item disabled\">", "        <a class=\"page-link\">Last &raquo</a></li>", "    {% endif %}", "       </ul>", "    </nav>", "        {% for officer in officer_list %}"], "clubs/templates/tournament_joined.html": ["       <nav aria-label=\"Page navigation example\">", "         <ul class=\"pagination justify-content-end\">", "     {% if tournament_joined_list.has_previous %}", "         <li class=\"page-item\">", "         <a class=\"page-link\" href=\"?page=1\">&laquo First</a></li>", "         <li class=\"page-item\">", "         <a class=\"page-link\" href=\"?page={{ tournament_joined_list.previous_page_number }}\">Previous</a></li>", "     {% else %}", "         <li class=\"page-item disabled\">", "         <a class=\"page-link\">&laquo First</a></li>", "         <li class=\"page-item disabled\">", "         <a class=\"page-link\">Previous</a></li>", "     {% endif %}", "     {% for i in nums %}", "         <li class=\"page-item\">", "           <a class=\"page-link\" href=\"?page={{ forloop.counter }}\">", "             {{ forloop.counter }}</a></li>", "     {% endfor %}", "     {% if tournament_joined_list.has_next %}", "         <li class=\"page-item\">", "         <a class=\"page-link\" href=\"?page={{ tournament_joined_list.next_page_number }}\">Next</a></li>", "         <li class=\"page-item\">", "         <a class=\"page-link\" href=\"?page={{ tournament_joined_list.paginator.num_pages }}\">Last &raquo</a></li>", "     {% else %}", "         <li class=\"page-item disabled\">", "         <a class=\"page-link\">Next</a></li>", "         <li class=\"page-item disabled\">", "         <a class=\"page-link\">Last &raquo</a></li>", "     {% endif %}", "        </ul>", "     </nav>", "         {% for tournament in tournament_joined_list %}"], "clubs/templates/tournament_list.html": ["       <nav aria-label=\"Page navigation example\">", "         <ul class=\"pagination justify-content-end\">", "     {% if tournament_list.has_previous %}", "         <li class=\"page-item\">", "         <a class=\"page-link\" href=\"?page=1\">&laquo First</a></li>", "         <li class=\"page-item\">", "         <a class=\"page-link\" href=\"?page={{ tournament_list.previous_page_number }}\">Previous</a></li>", "     {% else %}", "         <li class=\"page-item disabled\">", "         <a class=\"page-link\">&laquo First</a></li>", "         <li class=\"page-item disabled\">", "         <a class=\"page-link\">Previous</a></li>", "     {% endif %}", "     {% for i in nums %}", "         <li class=\"page-item\">", "           <a class=\"page-link\" href=\"?page={{ forloop.counter }}\">", "             {{ forloop.counter }}</a></li>", "     {% endfor %}", "     {% if tournament_list.has_next %}", "         <li class=\"page-item\">", "         <a class=\"page-link\" href=\"?page={{ tournament_list.next_page_number }}\">Next</a></li>", "         <li class=\"page-item\">", "         <a class=\"page-link\" href=\"?page={{ tournament_list.paginator.num_pages }}\">Last &raquo</a></li>", "     {% else %}", "         <li class=\"page-item disabled\">", "         <a class=\"page-link\">Next</a></li>", "         <li class=\"page-item disabled\">", "         <a class=\"page-link\">Last &raquo</a></li>", "     {% endif %}", "        </ul>", "     </nav>", "         {% for tournament in tournament_list %}"], "clubs/tests/views/test_applicant_list_view.py": ["from django.conf import settings", "        self._create_test_applicants(settings.USERS_PER_PAGE-1)", "        self.assertEqual(len(response.context['applicants']), settings.USERS_PER_PAGE)", "        self.assertFalse(response.context['is_paginated'])", "        for user_id in range(settings.USERS_PER_PAGE-1):", "    def test_get_applicant_list_with_pagination(self):", "        self.client.login(email=self.user.email, password='Password123')", "        club = Club.objects.get(club_name='Chess Club 1')", "        self._create_test_applicants(settings.USERS_PER_PAGE*2+3-1)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'applicant_list.html')", "        self.assertEqual(len(response.context['applicants']), settings.USERS_PER_PAGE)", "        self.assertTrue(response.context['is_paginated'])", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_one_url = reverse('applicant_list', kwargs={'club_id': club.id}) + '?page=1'", "        response = self.client.get(page_one_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'applicant_list.html')", "        self.assertEqual(len(response.context['applicants']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_two_url = reverse('applicant_list', kwargs={'club_id': club.id}) + '?page=2'", "        response = self.client.get(page_two_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'applicant_list.html')", "        self.assertEqual(len(response.context['applicants']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_three_url = reverse('applicant_list', kwargs={'club_id': club.id}) + '?page=3'", "        response = self.client.get(page_three_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'applicant_list.html')", "        self.assertEqual(len(response.context['applicants']), 3)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertFalse(page_obj.has_next())", ""], "clubs/tests/views/test_club_profile_view.py": ["from django.contrib import messages", "from django.test import TestCase", "from django.urls import reverse", "from clubs.forms import ClubForm", "from clubs.models import User, Club", "from clubs.tests.helpers import reverse_with_next", "", "class ClubProfileViewTest(TestCase):", "", "    fixtures = [", "        'clubs/tests/fixtures/default_user.json',", "        'clubs/tests/fixtures/other_users.json',", "        'clubs/tests/fixtures/default_club.json',", "        'clubs/tests/fixtures/other_clubs.json',", "    ]", "", "    def setUp(self):", "        self.user = User.objects.get(email='johndoe@example.org')", "        self.club = Club.objects.get(club_name=\"Chess Club 1\")", "        self.url = reverse('show_club', kwargs={'club_id':self.club.id})", "        self.form_input = {", "            'club_name': 'Chess Club',", "            'location': 'London',", "            'description': 'a new club',", "        }", "", "    def test_club_profile_url(self):", "        self.assertEqual(self.url, f'/club/{self.club.id}')", "", "    def test_get_profile(self):", "        self.client.login(email=self.user.email, password='Password123')", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'show_club.html')", "        form = response.context['form']", "        self.assertTrue(isinstance(form, ClubForm))", "        self.assertEqual(form.instance, self.club)", "", "    def test_get_profile_redirects_when_not_logged_in(self):", "        redirect_url = reverse_with_next('log_in', self.url)", "        response = self.client.get(self.url)", "        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "    def test_unsuccessful_profile_update_due_to_duplicate_club_name(self):", "        self.client.login(email=self.user.email, password='Password123')", "        self.form_input['club_name'] = 'Chess Club'", "        before_count = Club.objects.count()", "        response = self.client.get(self.url)", "        after_count = Club.objects.count()", "        self.assertEqual(after_count, before_count)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'show_club.html')", "        form = response.context['form']", "        self.assertTrue(isinstance(form, ClubForm))", "        self.assertFalse(form.is_bound)", "        self.club.refresh_from_db()", "        self.assertEqual(self.club.club_name, 'Chess Club 1')", "        self.assertEqual(self.club.description, 'A new chess club for chess enthusiasts.')", "        self.assertEqual(self.club.location, 'London')", "", "    def test_succesful_profile_update(self):", "        self.client.login(email=self.user.email, password='Password123')", "        before_count = Club.objects.count()", "        response = self.client.get(self.url)", "        after_count = Club.objects.count()", "        self.assertEqual(after_count, before_count)", "        self.assertTemplateUsed(response, 'show_club.html')", "        messages_list = list(response.context['messages'])", "        # self.assertEqual(len(messages_list), 1)", "        # self.assertEqual(messages_list[0].level, messages.SUCCESS)", "        self.club.refresh_from_db()", "        self.assertEqual(self.club.club_name, 'Chess Club 1')", "        self.assertEqual(self.club.description, 'A new chess club for chess enthusiasts.')", "        self.assertEqual(self.club.location, 'London')"], "clubs/tests/views/test_member_list_for_members_view.py": ["from django.conf import settings", "        self._create_test_members(settings.USERS_PER_PAGE-1)", "        self.assertEqual(len(response.context['members']), settings.USERS_PER_PAGE)", "        for user_id in range(settings.USERS_PER_PAGE-1):", "    def test_get_member_list_with_pagination(self):", "        self.client.login(email=self.user.email, password='Password123')", "        club = Club.objects.get(club_name='Chess Club 1')", "        self._create_test_members(settings.USERS_PER_PAGE*2+3-1)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_members.html')", "        self.assertEqual(len(response.context['member_list']), settings.USERS_PER_PAGE)", "        page_obj = response.context['member_list']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_one_url = reverse('member_list_for_members', kwargs={'club_id': club.id}) + '?page=1'", "        response = self.client.get(page_one_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_members.html')", "        self.assertEqual(len(response.context['member_list']), settings.USERS_PER_PAGE)", "        page_obj = response.context['member_list']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_two_url = reverse('member_list_for_members', kwargs={'club_id': club.id}) + '?page=2'", "        response = self.client.get(page_two_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_members.html')", "        self.assertEqual(len(response.context['member_list']), settings.USERS_PER_PAGE)", "        page_obj = response.context['member_list']", "        self.assertTrue(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_three_url = reverse('member_list_for_members', kwargs={'club_id': club.id}) + '?page=3'", "        response = self.client.get(page_three_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_members.html')", "        self.assertEqual(len(response.context['member_list']), 3)", "        page_obj = response.context['member_list']", "        self.assertTrue(page_obj.has_previous())", "        self.assertFalse(page_obj.has_next())", ""], "clubs/tests/views/test_member_list_for_staff_view.py": ["from django.conf import settings", "        self._create_test_members(settings.USERS_PER_PAGE-1)", "        self.assertEqual(len(response.context['members']), settings.USERS_PER_PAGE)", "        for user_id in range(settings.USERS_PER_PAGE-1):", "", "    def test_get_member_list_with_pagination(self):", "        self.client.login(email=self.user.email, password='Password123')", "        club = Club.objects.get(club_name='Chess Club 1')", "        self._create_test_members(settings.USERS_PER_PAGE*2+3-1)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_staff.html')", "        self.assertEqual(len(response.context['member_list']), settings.USERS_PER_PAGE)", "        page_obj = response.context['member_list']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_one_url = reverse('member_list_for_staff', kwargs={'club_id': club.id}) + '?page=1'", "        response = self.client.get(page_one_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_staff.html')", "        self.assertEqual(len(response.context['member_list']), settings.USERS_PER_PAGE)", "        page_obj = response.context['member_list']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_two_url = reverse('member_list_for_staff', kwargs={'club_id': club.id}) + '?page=2'", "        response = self.client.get(page_two_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_staff.html')", "        self.assertEqual(len(response.context['member_list']), settings.USERS_PER_PAGE)", "        page_obj = response.context['member_list']", "        self.assertTrue(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_three_url = reverse('member_list_for_staff', kwargs={'club_id': club.id}) + '?page=3'", "        response = self.client.get(page_three_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'member_list_for_staff.html')", "        self.assertEqual(len(response.context['member_list']), 3)", "        page_obj = response.context['member_list']", "        self.assertTrue(page_obj.has_previous())", "        self.assertFalse(page_obj.has_next())"], "clubs/tests/views/test_officer_applicant_list_view.py": ["from django.test import TestCase", "from django.urls import reverse", "from clubs.models import User, Club", "from clubs.tests.helpers import reverse_with_next", "from django.contrib.auth import authenticate", "from django.conf import settings", "", "class OfficerApplicantListTest(TestCase):", "", "    fixtures = ['clubs/tests/fixtures/default_club.json',", "                'clubs/tests/fixtures/default_user.json']", "", "    def setUp(self):", "        self.user = User.objects.get(email='johndoe@example.org')", "        self.club = Club.objects.get(club_name = 'Chess Club 1')", "        self.club.officer_applicants.add(self.user)", "        self.user.clubs.add(self.club)", "        self.url = reverse('officer_applicant_list', kwargs={'club_id': self.club.id})", "", "", "    def test_user_list_url(self):", "        self.assertEqual(f'/club/{self.club.id}/officer_applicants/',self.url)", "", "", "", "    def test_get_officer_applicant_list_redirects_when_not_logged_in(self):", "         redirect_url = reverse_with_next('log_in', self.url)", "         response = self.client.get(self.url)", "         self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "", "    def test_get_officer_applicant_list(self):", "        self.client.login(email=self.user.email, password='Password123')", "        self._create_test_officer_applicants(settings.USERS_PER_PAGE-1)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_applicant_list.html')", "        self.assertEqual(len(response.context['officer_applicants']), settings.USERS_PER_PAGE)", "        self.assertFalse(response.context['is_paginated'])", "        for user_id in range(settings.USERS_PER_PAGE-1):", "            self.assertContains(response,f'user{user_id}@test.org')", "            # self.assertContains(response, f'Last{user_id}')", "            # EXTENDED THIS TEST FOR SHOW USER FUNCTIONALITY:", "            # user = User.objects.get(email=f'{user_id}@example.org')", "            # user_url = reverse('show_user', kwargs={'user_id': user.id})", "            # self.assertContains(response, user_url)", "", "    def test_get_officer_applicant_list_with_pagination(self):", "        self.client.login(email=self.user.email, password='Password123')", "        club = Club.objects.get(club_name='Chess Club 1')", "        self._create_test_officer_applicants(settings.USERS_PER_PAGE*2+3-1)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_applicant_list.html')", "        self.assertEqual(len(response.context['officer_applicants']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_one_url = reverse('officer_applicant_list', kwargs={'club_id': club.id}) + '?page=1'", "        response = self.client.get(page_one_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_applicant_list.html')", "        self.assertEqual(len(response.context['officer_applicants']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_two_url = reverse('officer_applicant_list', kwargs={'club_id': club.id}) + '?page=2'", "        response = self.client.get(page_two_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_applicant_list.html')", "        self.assertEqual(len(response.context['officer_applicants']), settings.USERS_PER_PAGE)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_three_url = reverse('officer_applicant_list', kwargs={'club_id': club.id}) + '?page=3'", "        response = self.client.get(page_three_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_applicant_list.html')", "        self.assertEqual(len(response.context['officer_applicants']), 3)", "        page_obj = response.context['page_obj']", "        self.assertTrue(page_obj.has_previous())", "        self.assertFalse(page_obj.has_next())", "", "    def test_get_user_list_redirects_when_not_logged_in(self):", "          redirect_url = reverse_with_next('log_in', self.url)", "          response = self.client.get(self.url)", "          self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "", "", "    def _create_test_officer_applicants(self, user_count=10):", "        for user_id in range(user_count):", "            user = User.objects.create_user(", "                username = f'user{user_id}@test.org',", "                first_name=f'First{user_id}',", "                last_name=f'Last{user_id}',", "                email=f'user{user_id}@test.org',", "                password='Password123',", "                public_bio= \"My bio\",", "                chess_experience_level= 1,", "                short_personal_statement= \"I love chess.\" )", "            self.club.officer_applicants.add(user)", "            user.clubs.add(self.club)"], "clubs/tests/views/test_officer_list_view.py": ["from django.conf import settings", "        self._create_test_officers(settings.USERS_PER_PAGE-1)", "        self.assertEqual(len(response.context['officers']), settings.USERS_PER_PAGE)", "        for user_id in range(settings.USERS_PER_PAGE-1):", "    def test_get_officer_list_with_pagination(self):", "        self.client.login(email=self.user.email, password='Password123')", "        club = Club.objects.get(club_name='Chess Club 1')", "        self._create_test_officers(settings.USERS_PER_PAGE*2+3-1)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_list.html')", "        self.assertEqual(len(response.context['officer_list']), settings.USERS_PER_PAGE)", "        page_obj = response.context['officer_list']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_one_url = reverse('officer_list', kwargs={'club_id': club.id}) + '?page=1'", "        response = self.client.get(page_one_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_list.html')", "        self.assertEqual(len(response.context['officer_list']), settings.USERS_PER_PAGE)", "        page_obj = response.context['officer_list']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_two_url = reverse('officer_list', kwargs={'club_id': club.id}) + '?page=2'", "        response = self.client.get(page_two_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_list.html')", "        self.assertEqual(len(response.context['officer_list']), settings.USERS_PER_PAGE)", "        page_obj = response.context['officer_list']", "        self.assertTrue(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_three_url = reverse('officer_list', kwargs={'club_id': club.id}) + '?page=3'", "        response = self.client.get(page_three_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'officer_list.html')", "        self.assertEqual(len(response.context['officer_list']), 3)", "        page_obj = response.context['officer_list']", "        self.assertTrue(page_obj.has_previous())", "        self.assertFalse(page_obj.has_next())"], "clubs/tests/views/test_tournament_joined_view.py": ["from django.test import TestCase", "from django.urls import reverse", "from clubs.models import User, Club, Tournament", "from clubs.tests.helpers import reverse_with_next", "from django.contrib.auth import authenticate", "from django.conf import settings", "", "class TournamentJoinedTest(TestCase):", "", "    fixtures = ['clubs/tests/fixtures/default_user.json',", "                'clubs/tests/fixtures/other_users.json',", "                'clubs/tests/fixtures/default_tournament.json',", "                'clubs/tests/fixtures/other_tournaments.json',", "                'clubs/tests/fixtures/default_club.json',", "                'clubs/tests/fixtures/other_clubs.json'", "                ]", "", "    def setUp(self):", "        super(TestCase, self).setUp()", "        self.user = User.objects.get(username='johndoe@example.org')", "        self.club = Club.objects.get(club_name = 'Chess Club 1')", "        self.tournament = Tournament.objects.get(tournament_name=\"Tournament 1\")", "        self.url = reverse('tournament_joined', kwargs={'club_id': self.club.id})", "", "", "    def test_tournament_joined_url(self):", "        self.assertEqual(f'/club/{self.club.id}/tournament_joined/',self.url)", "", "    def test_get_tournament_joined_redirects_when_not_logged_in(self):", "         redirect_url = reverse_with_next('log_in', self.url)", "         response = self.client.get(self.url)", "         self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "    # def test_get_tournament_joined(self):", "    #     self.client.login(email=self.user.email, password='Password123')", "    #     self._create_test_tournaments(settings.TOURNAMENTS_PER_PAGE)", "    #     response = self.client.get(self.url)", "    #     self.assertEqual(response.status_code, 200)", "    #     self.assertTemplateUsed(response, 'tournament_joined.html')", "    #     self.assertEqual(len(response.context['tournament_joined']), settings.TOURNAMENTS_PER_PAGE)", "    #     for tournament_id in range(settings.TOURNAMENTS_PER_PAGE-1):", "    #         self.assertContains(response,f'tournament_name{tournament_id}')", "    #", "    # def test_get_tournament_joined_with_pagination(self):", "    #     self.client.login(email=self.user.email, password='Password123')", "    #     club = Club.objects.get(club_name='Chess Club 1')", "    #     self._create_test_tournaments(settings.USERS_PER_PAGE*2+3)", "    #     response = self.client.get(self.url)", "    #     self.assertEqual(response.status_code, 200)", "    #     self.assertTemplateUsed(response, 'tournament_joined.html')", "    #     self.assertEqual(len(response.context['tournament_joined_list']), settings.TOURNAMENTS_PER_PAGE)", "    #     page_obj = response.context['tournament_joined_list']", "    #     self.assertFalse(page_obj.has_previous())", "    #     self.assertTrue(page_obj.has_next())", "    #     page_one_url = reverse('tournament_joined', kwargs={'club_id': club.id}) + '?page=1'", "    #     response = self.client.get(page_one_url)", "    #     self.assertEqual(response.status_code, 200)", "    #     self.assertTemplateUsed(response, 'tournament_joined.html')", "    #     self.assertEqual(len(response.context['tournament_joined_list']), settings.TOURNAMENTS_PER_PAGE)", "    #     page_obj = response.context['tournament_joined_list']", "    #     self.assertFalse(page_obj.has_previous())", "    #     self.assertTrue(page_obj.has_next())", "    #     page_two_url = reverse('tournament_joined', kwargs={'club_id': club.id}) + '?page=2'", "    #     response = self.client.get(page_two_url)", "    #     self.assertEqual(response.status_code, 200)", "    #     self.assertTemplateUsed(response, 'tournament_joined.html')", "    #     self.assertEqual(len(response.context['tournament_joined_list']), settings.TOURNAMENTS_PER_PAGE)", "    #     page_obj = response.context['tournament_joined_list']", "    #     self.assertTrue(page_obj.has_previous())", "    #     self.assertTrue(page_obj.has_next())", "    #     page_three_url = reverse('tournament_joined', kwargs={'club_id': club.id}) + '?page=3'", "    #     response = self.client.get(page_three_url)", "    #     self.assertEqual(response.status_code, 200)", "    #     self.assertTemplateUsed(response, 'tournament_joined.html')", "    #     self.assertEqual(len(response.context['tournament_joined_list']), 3)", "    #     page_obj = response.context['tournament_joined_list']", "    #     self.assertTrue(page_obj.has_previous())", "    #     self.assertFalse(page_obj.has_next())", "", "    def _create_test_tournaments(self, tournament_count=10):", "        for tournament_id in range(tournament_count):", "            club = Club.objects.get(id=1)", "            tournament = Tournament.objects.create(", "                tournament_name = f'tournament_name{tournament_id}',", "                short_description=\"this is a new tournament\",", "                number_of_participants=tournament_count,", "                club = club", "                )", "            self.club.tournament_member.add(tournament)"], "clubs/tests/views/test_tournament_list_view.py": ["from django.test import TestCase", "from django.urls import reverse", "from clubs.models import User, Club, Tournament", "from clubs.tests.helpers import reverse_with_next", "from django.contrib.auth import authenticate", "from django.conf import settings", "", "class TournamentListTest(TestCase):", "", "    fixtures = ['clubs/tests/fixtures/default_user.json',", "                'clubs/tests/fixtures/other_users.json',", "                'clubs/tests/fixtures/default_tournament.json',", "                'clubs/tests/fixtures/other_tournaments.json',", "                'clubs/tests/fixtures/default_club.json',", "                'clubs/tests/fixtures/other_clubs.json'", "                ]", "", "    def setUp(self):", "        super(TestCase, self).setUp()", "        self.user = User.objects.get(username='johndoe@example.org')", "        self.club = Club.objects.get(club_name = 'Chess Club 1')", "        self.tournament = Tournament.objects.get(tournament_name=\"Tournament 1\")", "        self.url = reverse('tournament_list', kwargs={'club_id': self.club.id})", "", "", "    def test_tournament_list_url(self):", "        self.assertEqual(f'/club/{self.club.id}/tournaments/',self.url)", "", "    def test_get_tournament_list_redirects_when_not_logged_in(self):", "         redirect_url = reverse_with_next('log_in', self.url)", "         response = self.client.get(self.url)", "         self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "    def test_get_tournament_list(self):", "        self.client.login(email=self.user.email, password='Password123')", "        self._create_test_tournaments(settings.TOURNAMENTS_PER_PAGE)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_list.html')", "        self.assertEqual(len(response.context['tournaments']), settings.TOURNAMENTS_PER_PAGE)", "        for tournament_id in range(settings.TOURNAMENTS_PER_PAGE-1):", "            self.assertContains(response,f'tournament_name{tournament_id}')", "", "    def test_get_tournament_list_with_pagination(self):", "        self.client.login(email=self.user.email, password='Password123')", "        club = Club.objects.get(club_name='Chess Club 1')", "        self._create_test_tournaments(settings.USERS_PER_PAGE*2+3)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_list.html')", "        self.assertEqual(len(response.context['tournament_list']), settings.TOURNAMENTS_PER_PAGE)", "        page_obj = response.context['tournament_list']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_one_url = reverse('tournament_list', kwargs={'club_id': club.id}) + '?page=1'", "        response = self.client.get(page_one_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_list.html')", "        self.assertEqual(len(response.context['tournament_list']), settings.TOURNAMENTS_PER_PAGE)", "        page_obj = response.context['tournament_list']", "        self.assertFalse(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_two_url = reverse('tournament_list', kwargs={'club_id': club.id}) + '?page=2'", "        response = self.client.get(page_two_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_list.html')", "        self.assertEqual(len(response.context['tournament_list']), settings.TOURNAMENTS_PER_PAGE)", "        page_obj = response.context['tournament_list']", "        self.assertTrue(page_obj.has_previous())", "        self.assertTrue(page_obj.has_next())", "        page_three_url = reverse('tournament_list', kwargs={'club_id': club.id}) + '?page=3'", "        response = self.client.get(page_three_url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'tournament_list.html')", "        self.assertEqual(len(response.context['tournament_list']), 3)", "        page_obj = response.context['tournament_list']", "        self.assertTrue(page_obj.has_previous())", "        self.assertFalse(page_obj.has_next())", "", "    def _create_test_tournaments(self, tournament_count=10):", "        for tournament_id in range(tournament_count):", "            club = Club.objects.get(id=1)", "            tournament = Tournament.objects.create(", "                tournament_name = f'tournament_name{tournament_id}',", "                short_description=\"this is a new tournament\",", "                number_of_participants=tournament_count,", "                club = club", "                )", "            self.club.tournament_list.add(tournament)"], "clubs/views/other_views.py": ["from django.core.paginator import Paginator", "from clubs.forms import ClubForm", "    paginate_by = settings.USERS_PER_PAGE", "    paginate_by = settings.USERS_PER_PAGE", "    members = current_club.members.all().order_by('date_joined')", "", "    paginator = Paginator(members, settings.USERS_PER_PAGE)", "    page = request.GET.get('page')", "    member_list = paginator.get_page(page)", "    nums = \"a\" * member_list.paginator.num_pages", "                     'current_club': current_club,", "                     'member_list': member_list,", "                     'nums': nums", "    members = current_club.members.all().order_by('date_joined')", "", "    paginator = Paginator(members, settings.USERS_PER_PAGE)", "    page = request.GET.get('page')", "    member_list = paginator.get_page(page)", "    nums = \"a\" * member_list.paginator.num_pages", "                     'current_club': current_club,", "                     'member_list': member_list,", "                     'nums': nums", "    officers = current_club.officers.all().order_by('date_joined')", "", "    paginator = Paginator(officers, settings.USERS_PER_PAGE)", "    page = request.GET.get('page')", "    officer_list = paginator.get_page(page)", "    nums = \"a\" * officer_list.paginator.num_pages", "                     'current_club': current_club,", "                     'officer_list': officer_list,", "                     'nums': nums", "# @login_required", "# @owner_only", "# def applicant_officer_list(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     officer_applicants = current_club.officer_applicants.all()", "#     return render(request, 'applicant_officer_list.html',", "#                     {'officer_applicants': officer_applicants,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club", "#                     }", "#                  )", "    tournaments = current_club.tournament_list.all()", "", "    paginator = Paginator(tournaments, settings.TOURNAMENTS_PER_PAGE)", "    page = request.GET.get('page')", "    tournament_list = paginator.get_page(page)", "    nums = \"a\" * tournament_list.paginator.num_pages", "                     'tournament_list': tournament_list,", "                     'nums': nums", "    tournament_joined = current_club.tournament_member.all()", "", "    paginator = Paginator(tournament_joined, settings.TOURNAMENTS_PER_PAGE)", "    page = request.GET.get('page')", "    tournament_joined_list = paginator.get_page(page)", "    nums = \"a\" * tournament_joined_list.paginator.num_pages", "                     'tournament_joined_list': tournament_list,", "                     'nums': nums", "    now = timezone.now", "    current_club = Club.objects.get(id=club_id)", "    tournaments = current_club.tournaments.all()", "    if request.method == 'POST':", "        form = ClubForm(instance=current_club, data=request.POST)", "        if form.is_valid():", "            messages.add_message(request, messages.SUCCESS, \"Profile updated!\")", "            form.save()", "            return redirect('user_profile')", "        form = ClubForm(instance=current_club)", "    return render(request, 'show_club.html',", "        {'current_club': current_club,", "         'current_user': current_user,", "         'clubs': clubs,", "         'tournaments': tournaments,", "         'now': now,", "         'form':form", "        }", "    )"], "system/settings.py": ["    'widget_tweaks',", "    'bootstrap_pagination'", "# Page lengths", "USERS_PER_PAGE = 5", "TOURNAMENTS_PER_PAGE = 5", ""]}], "deletionsPerFile": [{"clubs/templates/member_list_for_members.html": ["        {% for member in members %}"], "clubs/templates/member_list_for_staff.html": ["         {% for member in members %}"], "clubs/templates/officer_list.html": ["        {% for officer in officers %}"], "clubs/templates/tournament_joined.html": ["         {% for tournament in tournament_joined %}"], "clubs/templates/tournament_list.html": ["         {% for tournament in tournaments %}"], "clubs/tests/views/test_applicant_list_view.py": ["        self._create_test_applicants(14)", "        self.assertEqual(len(response.context['applicants']), 15)", "        for user_id in range(15-1):"], "clubs/tests/views/test_member_list_for_members_view.py": ["        self._create_test_members(14)", "        self.assertEqual(len(response.context['members']), 15)", "        for user_id in range(15-1):"], "clubs/tests/views/test_member_list_for_staff_view.py": ["        self._create_test_members(14)", "        self.assertEqual(len(response.context['members']), 15)", "        for user_id in range(15-1):", "            # self.assertContains(response, f'Last{user_id}')", "            # EXTENDED THIS TEST FOR SHOW USER FUNCTIONALITY:", "            # user = User.objects.get(email=f'{user_id}@example.org')", "            # user_url = reverse('show_user', kwargs={'user_id': user.id})", "            # self.assertContains(response, user_url)"], "clubs/tests/views/test_officer_applicant_list.view.py": ["from django.test import TestCase", "from django.urls import reverse", "from clubs.models import User, Club", "from clubs.tests.helpers import reverse_with_next", "from django.contrib.auth import authenticate", "", "class ApplicantListTest(TestCase):", "", "    fixtures = ['clubs/tests/fixtures/default_club.json',", "                'clubs/tests/fixtures/default_user.json']", "", "    def setUp(self):", "        self.user = User.objects.get(email='johndoe@example.org')", "        self.club = Club.objects.get(club_name = 'Chess Club 1')", "        self.club.applicant_officer.add(self.user)", "        self.user.clubs.add(self.club)", "        self.url = reverse('applicant_officer_list', kwargs={'club_id': self.club.id})", "", "", "    def test_user_list_url(self):", "        self.assertEqual(f'/club/{self.club.id}/applicant_officer_list/',self.url)", "", "", "", "    def test_get_applicant_list_redirects_when_not_logged_in(self):", "         redirect_url = reverse_with_next('log_in', self.url)", "         response = self.client.get(self.url)", "         self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "", "    def test_get_applicant_list(self):", "        self.client.login(email=self.user.email, password='Password123')", "        self._create_test_applicants(14)", "        response = self.client.get(self.url)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'applicant_officer_list.html')", "        self.assertEqual(len(response.context['applicant_officer']), 15)", "        for user_id in range(15-1):", "            self.assertContains(response,f'user{user_id}@test.org')", "            # self.assertContains(response, f'Last{user_id}')", "            # EXTENDED THIS TEST FOR SHOW USER FUNCTIONALITY:", "            # user = User.objects.get(email=f'{user_id}@example.org')", "            # user_url = reverse('show_user', kwargs={'user_id': user.id})", "            # self.assertContains(response, user_url)", "", "    def test_get_user_list_redirects_when_not_logged_in(self):", "          redirect_url = reverse_with_next('log_in', self.url)", "          response = self.client.get(self.url)", "          self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "", "", "    def _create_test_applicants(self, user_count=10):", "        for user_id in range(user_count):", "            user = User.objects.create_user(", "                username = f'user{user_id}@test.org',", "                first_name=f'First{user_id}',", "                last_name=f'Last{user_id}',", "                email=f'user{user_id}@test.org',", "                password='Password123',", "                public_bio= \"My bio\",", "                chess_experience_level= 1,", "                short_personal_statement= \"I love chess.\" )", "            self.club.applicant_officer.add(user)", "            user.clubs.add(self.club)"], "clubs/tests/views/test_officer_list_view.py": ["        self._create_test_officers(14)", "        self.assertEqual(len(response.context['officers']), 15)", "        for user_id in range(15-1):"], "clubs/views.py": ["# from django.contrib import messages", "# from django.shortcuts import render, redirect", "# from .forms import SignUpForm, LogInForm, UserForm, PasswordForm, ClubForm, TournamentForm", "# from django.core.exceptions import ObjectDoesNotExist", "# from django.contrib.auth import authenticate, login, logout", "# from django.contrib.auth.decorators import login_required", "# from django.contrib.auth.models import Group", "# from .models import User, Club, Tournament, Match", "# from .helpers import login_prohibited, member_only, staff_only, owner_only", "# from django.http import HttpResponseForbidden", "# <<<<<<< HEAD", "# from django.utils import timezone", "# import random", "# =======", "# from django.contrib.auth.hashers import check_password", "# >>>>>>> test_apply_membership", "#", "# def home(request):", "#     return render(request, 'home.html')", "#", "#", "# @login_required", "# def user_profile(request):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     return render(request, 'user_profile.html',", "#                     {'current_user': current_user,", "#                      'clubs': clubs,", "#                     }", "#                  )", "#", "# @login_prohibited", "# def sign_up(request):", "#     if request.method == 'POST':", "#         form = SignUpForm(request.POST)", "#         if form.is_valid():", "#             user = form.save()", "#             applicants, created = Group.objects.get_or_create(name = 'applicants')", "#             applicants.user_set.add(user)", "#             login(request, user)", "#             return redirect('user_profile')", "#     else:", "#         form = SignUpForm()", "#     return render(request, 'sign_up.html', {'form': form})", "#", "# @login_required", "# @member_only", "# def member_list_for_members(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     members = current_club.members.all()", "#     return render(request, 'member_list_for_members.html',", "#                     {'members': members,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club", "#                     }", "#                  )", "#", "# @login_required", "# @staff_only", "# def member_list_for_staff(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     members = current_club.members.all()", "#     return render(request, 'member_list_for_staff.html',", "#                     {'members': members,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club", "#                     }", "#                  )", "#", "# @login_required", "# @staff_only", "# def applicant_list(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     applicants = current_club.applicants.all()", "#     return render(request, 'applicant_list.html',", "#                     {'applicants': applicants,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club", "#                     }", "#                  )", "# @login_required", "# @staff_only", "# def applicant_officer_list(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     officer_applicants = current_club.officer_applicants.all()", "#     return render(request, 'applicant_officer_list.html',", "#                     {'officer_applicants': officer_applicants,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club", "#                     }", "#                  )", "#", "# @login_required", "# # @owner_only", "# def officer_list(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     officers = current_club.officers.all()", "#     return render(request, 'officer_list.html',", "#                     {'officers': officers,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club", "#                     }", "#                  )", "#", "# @login_required", "# def show_user(request, user_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     try:", "#         user = User.objects.get(id=user_id)", "#     except ObjectDoesNotExist:", "#         return redirect('user_profile')", "#     else:", "#         return render(request, 'show_user.html',", "#             {'user': user,", "#              'current_user': current_user,", "#              'clubs': clubs,", "#             }", "#         )", "#", "# @login_prohibited", "# def log_in(request):", "#     if request.method == 'POST':", "#         form = LogInForm(request.POST)", "#         if form.is_valid():", "#             email = form.cleaned_data.get('email')", "#             password = form.cleaned_data.get('password')", "#             user = authenticate(email=email, password=password)", "#             if user is not None:", "#                 login(request, user)", "#                 return redirect('user_profile')", "#         messages.add_message(request, messages.ERROR, \"The credentials provided were invalid!\")", "#     form = LogInForm()", "#     return render(request, 'log_in.html', {'form': form})", "#", "# def log_out(request):", "#     logout(request)", "#     return redirect('home')", "#", "# @login_required", "# def profile(request):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     if request.method == 'POST':", "#         form = UserForm(instance=current_user, data=request.POST)", "#         if form.is_valid():", "#             messages.add_message(request, messages.SUCCESS, \"Profile updated!\")", "#             form.save()", "#             return redirect('user_profile')", "#     else:", "#         form = UserForm(instance=current_user)", "#     return render(request, 'profile.html',", "#                     {'form': form,", "#                      'current_user': current_user,", "#                      'clubs': clubs}", "#                  )", "#", "# @login_required", "# def password(request):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     if request.method == 'POST':", "#         form = PasswordForm(data=request.POST)", "#         if form.is_valid():", "#             password = form.cleaned_data.get('password')", "#             if check_password(password, current_user.password):", "#                 new_password = form.cleaned_data.get('new_password')", "#                 current_user.set_password(new_password)", "#                 current_user.save()", "#                 login(request, current_user)", "#                 messages.add_message(request, messages.SUCCESS, \"Password updated!\")", "#                 return redirect('user_profile')", "#     form = PasswordForm()", "#     return render(request, 'password.html',", "#                     {'form': form,", "#                      'current_user': current_user,", "#                      'clubs': clubs}", "#                  )", "#", "#", "# @login_required", "# @staff_only", "# def approve_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_approve(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('applicant_list', club_id)", "#     else:", "#         return redirect('applicant_list', club_id)", "#", "#", "# @login_required", "# @staff_only", "# def cancel_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_cancel(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('member_list_for_staff', club_id)", "#     else:", "#         return redirect('member_list_for_staff', club_id)", "#", "# @login_required", "# @owner_only", "# def promote_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_promote(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('member_list_for_staff', club_id)", "#     else:", "#         return redirect('member_list_for_staff', club_id)", "#", "# @login_required", "# @owner_only", "# def demote_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_demote(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('officer_list', club_id)", "#     else:", "#         return redirect('officer_list', club_id)", "#", "# @login_required", "# @owner_only", "# def transfer_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_transfer(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('officer_list', club_id)", "#     else:", "#         return redirect('officer_list', club_id)", "#", "#", "# @login_required", "# def create_club(request, user_id):", "#     if request.method == 'POST':", "#         if request.user.is_authenticated:", "#             current_user = request.user", "#             form = ClubForm(request.POST)", "#             if form.is_valid():", "#                 club_name = form.cleaned_data.get('club_name')", "#                 location = form.cleaned_data.get('location')", "#                 description = form.cleaned_data.get('description')", "#                 club = Club.objects.create(club_owner = current_user, club_name = club_name, location = location, description = description)", "#                 club.club_owner.clubs.add(club)", "#                 # club.officers.add(user)", "#                 return redirect('user_profile')", "#             else:", "#                 return render(request, 'create_club.html', {'form': form, 'current_user': current_user})", "#         else:", "#             return redirect('log_in')", "#     else:", "#         # return HttpResponseForbidden()", "#         form = ClubForm()", "#         current_user = request.user", "#     return render(request, 'create_club.html', {'form': form, 'current_user': current_user})", "#", "# @login_required", "# <<<<<<< HEAD", "# @staff_only", "# def create_tournament(request, club_id):", "#     clubs = Club.objects.all()", "#     current_club = Club.objects.get(id=club_id)", "#     if request.method == 'POST':", "#         if request.user.is_authenticated:", "#             current_user = request.user", "#", "#             form = TournamentForm(request.POST)", "#             if form.is_valid():", "#                 tournament_name = form.cleaned_data.get('tournament_name')", "#                 short_description = form.cleaned_data.get('short_description')", "#                 number_of_participants = form.cleaned_data.get('number_of_participants')", "#                 deadline = form.cleaned_data.get('deadline')", "#                 start_time = form.cleaned_data.get('start_time')", "#                 tournament = Tournament.objects.create(tournament_name = tournament_name,", "#                                                         short_description = short_description,", "#                                                         number_of_participants = number_of_participants,", "#                                                         club = current_club,", "#                                                         deadline = deadline,", "#                                                         start_time = start_time)", "#                 tournament.organisers.add(current_user)", "#                 current_club.tournaments.add(tournament)", "#                 current_club.tournament_list.add(tournament)", "#                 return redirect('tournament_list', club_id)", "#             else:", "#                 return render(request, 'create_tournament.html',", "#                                 {'form': form,", "#                                  'current_user': current_user,", "#                                  'current_club': current_club,", "#                                  'clubs': clubs", "#                                 }", "#                             )", "#         else:", "#             return redirect('log_in')", "#     else:", "#         form = TournamentForm()", "#         current_user = request.user", "#     return render(request, 'create_tournament.html',", "#                     {'form': form,", "#                      'current_user': current_user,", "#                      'current_club': current_club,", "#                      'clubs': clubs", "#                     }", "#                 )", "#", "# @login_required", "# =======", "# >>>>>>> test_apply_membership", "# def show_club(request, club_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     now = timezone.now", "#     try:", "#         current_club = Club.objects.get(id=club_id)", "#         tournaments = current_club.tournaments.all()", "#     except ObjectDoesNotExist:", "#         return redirect('user_profile')", "#     else:", "#         return render(request, 'show_club.html',", "#             {'current_club': current_club,", "#              'current_user': current_user,", "#              'clubs': clubs,", "#              'tournaments': tournaments,", "#              'now': now", "#             }", "#         )", "#", "# @login_required", "# def apply_membership(request, club_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     try:", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_apply_membership(club)", "#     except ObjectDoesNotExist:", "#         return redirect('user_profile')", "#     else:", "# <<<<<<< HEAD", "#         return render(request, 'show_club.html',", "#             {'current_club': current_club,", "#              'current_user': current_user,", "#              'clubs': clubs", "#             }", "#         )", "#", "# @login_required", "# def edit_tournament_info(request, club_id, tournament_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     current_club = Club.objects.get(id=club_id)", "#     current_tournament = Tournament.objects.get(id=tournament_id)", "#     if request.method == 'POST':", "#         form = TournamentForm(data = request.POST, instance=current_tournament)", "#         if form.is_valid():", "#             messages.add_message(request, messages.SUCCESS, \"Successfully updated!\")", "#             form.save()", "#             return redirect('tournament_list', club_id)", "#     else:", "#         form = TournamentForm(instance = current_tournament)", "#     return render(request, 'edit_tournament_info.html',", "#                     {'form': form,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club,", "#                      'current_tournament': current_tournament", "#                     }", "#                  )", "#", "#", "#", "#", "# @login_required", "# @staff_only", "# def co_organise(request, club_id, tournament_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     current_club = Club.objects.get(id=club_id)", "#     officers = current_club.officers.all()", "#     current_tournament = Tournament.objects.get(id=tournament_id)", "#     organisers = current_tournament.organisers.all()", "#     return render(request, 'co_organiser_list.html',", "#                     {'officers': officers,", "#                      'organisers': organisers,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club,", "#                      'tournament': current_tournament", "#                     }", "#                  )", "#", "# @login_required", "# @staff_only", "# def co_organise_toggle(request, club_id, tournament_id, user_id):", "#     try:", "#         current_user = request.user", "#         user =  User.objects.get(id=user_id)", "#         current_club = Club.objects.get(id=club_id)", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#         current_tournament.organisers.add(user)", "#     except ObjectDoesNotExist:", "#         return redirect('co_organise', club_id, tournament_id)", "#     else:", "#         return redirect('co_organise', club_id, tournament_id)", "#", "#", "# @login_required", "# def tournament_list(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     tournaments = current_club.tournaments.all()", "#     now = timezone.now", "#     return render(request, 'tournament_list.html',", "#                     {'tournaments': tournaments,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club,", "#                      'now': now,", "#                     }", "#                  )", "#", "# @login_required", "# @member_only", "# def tournament_joined(request, club_id):", "#     clubs = Club.objects.all()", "#     current_user = request.user", "#     current_club = Club.objects.get(id=club_id)", "#     tournament_joined = current_user.tournaments.all()", "#     now = timezone.now", "#     return render(request, 'tournament_joined.html',", "#                     {'tournament_joined': tournament_joined,", "#                      'current_user': current_user,", "#                      'clubs': clubs,", "#                      'current_club': current_club,", "#                      'now': now,", "#                     }", "#                  )", "#", "# @login_required", "# @member_only", "# def show_tournament(request, tournament_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     try:", "#         tournament = Tournament.objects.get(id=tournament_id)", "#     except ObjectDoesNotExist:", "#         return redirect('user_profile')", "#     else:", "#         return render(request, 'show_tournament.html',", "#             {'tournament': tournament,", "#              'current_user': current_user,", "#              'clubs': clubs,", "#             }", "#         )", "#", "# @login_required", "# @member_only", "# def sign_up_toggle(request, tournament_id, club_id):", "#     current_user = request.user", "#     try:", "#         tournament = Tournament.objects.get(id=tournament_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_sign_up(tournament, club)", "#     except ObjectDoesNotExist:", "#         return redirect('tournament_list', club_id)", "#     else:", "#         return redirect('tournament_list', club_id)", "#", "# @login_required", "# @member_only", "# def withdraw_toggle(request, tournament_id, club_id):", "#     current_user = request.user", "#     try:", "#         tournament = Tournament.objects.get(id=tournament_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_withdraw(tournament, club)", "#     except ObjectDoesNotExist:", "#         return redirect('tournament_joined', club_id)", "#     else:", "#         return redirect('tournament_joined', club_id)", "#", "#", "#", "#", "#", "#", "#", "# @login_required", "# def generate_matches(request, tournament_id, club_id):", "#     try:", "#         current_user = request.user", "#         current_club = Club.objects.get(id=club_id)", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#         #", "#         Match.objects.all().delete()", "#         current_tournament.matches_list.clear()", "#         current_tournament.winners_list.clear()", "#         current_tournament.winner= None", "#         current_tournament.current_participants.clear()", "#         current_tournament.removed_participants.clear()", "#         #--^^^ USE THIS AFTER CLICKING 'GENERATE_MATCHES', THEN COMMENT OUT AGAIN", "#         # USE IT TO CLEAR THE WINNERS FOR A TOURNAMENT - FOR DEV PURPOSES", "#", "#", "#         all_participants_list = current_tournament.participants_list.all()", "#", "#         x = len(all_participants_list)", "#         print(x)", "#         previous_power_of_two = power_Of_Two(x)", "#", "#         make_Participants_Power_Of_2(current_tournament, previous_power_of_two)", "#", "#         # if(len(participants_list) & (len(participants_list)-1) != 0):", "#         #", "#         #     print(\"not power of 2\")", "#         participants_list = current_tournament.current_participants.all()", "#", "#         matches_list = current_tournament.matches_list.all()", "#         winners_list = current_tournament.winners_list.all()", "#         now = timezone.now", "#         finals=1", "#", "#         if all_participants_list.count() <= 1:", "#             messages.add_message(request, messages.ERROR, \"Not enough participants!\")", "#", "#", "#         else:", "#             if matches_list.count() == 0:    #I.E. NO MATCHES HAVE BEEN MADE FOR THIS ROUND YET!", "#                 round_input = 1  #first round", "#                 current_tournament.create_matches(round_input, participants_list)", "#                 matches_list = current_tournament.matches_list.all()", "#                 # now = timezone.now", "#                 winners_list = current_tournament.winners_list.all()", "#", "#                 return render(request, 'generate_matches.html',", "#                                 {'current_user': current_user,", "#                                  # 'clubs': clubs,", "#                                  'current_club': current_club,", "#                                  'current_tournament': current_tournament,", "#                                  'matches_list': matches_list,", "#                                  'all_participants_list': all_participants_list,", "#                                  'winners_list': winners_list,", "#                                  'now':now,", "#                                  'finals':finals", "#                                 }", "#                              )", "#             else:", "#                 return render(request, 'generate_matches.html',   #redisplay html template with selected winners + unselected winners", "#                                 {'current_user': current_user,", "#                                  # 'clubs': clubs,", "#                                  'current_club': current_club,", "#                                  'current_tournament': current_tournament,", "#                                  'matches_list': matches_list,", "#                                  'all_participants_list': all_participants_list,", "#                                  'winners_list': winners_list,", "#                                  'now':now,", "#                                  'finals':finals", "#                                 }", "#                              )", "#", "#", "#     except ObjectDoesNotExist:", "#         return redirect('tournament_list', club_id)", "#     else:", "#         return redirect('tournament_list', club_id)", "#", "#", "#", "#", "# def power_Of_Two(x):    #x= len(participants_list)", "#     \"\"\"Calculate if the number of participants in a tournament is a power of 2,", "#     if not, if it is not, calculate the previous power of two. \"\"\"", "#", "#     if(x & (x-1) != 0):  #Not a power of 2", "#         while (x & x-1):", "#             x = x & x-1    #Finds previous power of 2", "#         print(\"not power of 2, next power of 2 is:\")", "#         print(x)", "#         return x", "#", "#", "#", "#", "# def make_Participants_Power_Of_2(current_tournament, previous_power_of_two):", "#     participants_list = current_tournament.participants_list.all()", "#     if previous_power_of_two:", "#         print(participants_list)", "#", "#         print(previous_power_of_two)", "#", "#", "#         new_participants = participants_list[:previous_power_of_two]", "#         for new_p in new_participants:", "#             current_tournament.current_participants.add(new_p)", "#", "#         print(\"new current p:\")", "#         print(current_tournament.current_participants.all())", "#", "#", "#", "#", "#         remaining = (participants_list.count() - previous_power_of_two) +1   #THE OTHER HALF OF THE LIST: WHO WONT PLAY!", "#", "#         removed_participants = participants_list[(remaining):]", "#         for new_p in removed_participants:", "#             current_tournament.removed_participants.add(new_p)", "#", "#         # print(remaining)", "#         # print(participants_list[(remaining):])", "#         print(\"removed p:\")", "#         # current_tournament.removed_participants.add(participants_list[(remaining):].all())", "#         print(current_tournament.removed_participants.all())", "#", "#     else:", "#         print(\"its fine\")", "#         for participants in participants_list:", "#             current_tournament.current_participants.add(participants)", "#", "#", "#", "#", "#", "#", "#", "# @login_required", "# def log_winners(request, tournament_id, club_id, user_id, match_id):", "#     try:", "#         current_user = request.user", "#         winner_user =  User.objects.get(id=user_id)", "#         current_club = Club.objects.get(id=club_id)", "#", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#", "#         current_tournament.winners_list.add(winner_user)", "#         current_tournament.all_winners_list.add(winner_user)", "#", "#", "#         current_match = Match.objects.get(matchId = match_id)", "#         current_match.winner = winner_user", "#         # current_match.match_winner_list.add(winner_user)", "#         if current_tournament.winners_list.count() == 1 and current_tournament.matches_list.count() ==1:", "#             # current_tournament.winner = winner_user", "#             current_tournament.tournament_winner = winner_user", "#             current_tournament.save()", "#", "#", "#", "#     except ObjectDoesNotExist:", "#         return redirect('generate_matches', club_id, tournament_id)", "#     else:", "#         if current_match.round == 1:", "#             return redirect('generate_matches', club_id, tournament_id)", "#         else:", "#             return redirect('generate_next_match', club_id, tournament_id)", "#", "#", "#", "#", "#", "# @login_required", "# def next_match(request, tournament_id, club_id):", "#     try:", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#         current_winners = current_tournament.winners_list.all()", "#", "#         if current_winners.count() != 1 :", "#             print(current_tournament.current_participants.all())", "#             current_tournament.current_participants.clear()", "#", "#             for winner in current_winners:", "#                 current_tournament.current_participants.add(winner)   #Move all winners from last round into current_participants_list", "#", "#             current_tournament.winners_list.clear()    #clear winners for this round.", "#", "#     except ObjectDoesNotExist:", "#         return redirect('generate_next_match',  club_id, tournament_id)", "#     else:", "#         return redirect('generate_next_match',  club_id, tournament_id)", "#", "#", "#", "#", "#", "# @login_required", "# def generate_next_match(request, tournament_id, club_id):", "#     try:", "#         current_user = request.user", "#         current_club = Club.objects.get(id=club_id)", "#         current_tournament = Tournament.objects.get(id=tournament_id)", "#", "#         all_participants_list = current_tournament.participants_list.all()", "#         participants_list = current_tournament.current_participants.all()", "#", "#         finals=1", "#", "#         round_input = 2  #All other rounds have 'round =2' for now --- maybe remove round field ?", "#         current_tournament.create_matches(round_input, participants_list)", "#         matches_list = current_tournament.matches_list.all()", "#         now = timezone.now", "#         winners_list = current_tournament.winners_list.all()", "#", "#         return render(request, 'generate_matches.html',", "#                         {'current_user': current_user,", "#                          # 'clubs': clubs,", "#                          'current_club': current_club,", "#                          'current_tournament': current_tournament,", "#                          'matches_list': matches_list,", "#                          'winners_list': winners_list,", "#                          'all_participants_list': all_participants_list,", "#                          'now':now,", "#                          'finals':finals,", "#                         }", "#                      )", "#", "#     except ObjectDoesNotExist:", "#         return redirect('tournament_list', club_id)", "#     else:", "#         return redirect('tournament_list', club_id)", "# =======", "#         return redirect('show_club', club_id)", "#", "# @login_required", "# def apply_officer(request, club_id):", "#     current_user = request.user", "#     clubs = Club.objects.all()", "#     try:", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_apply_officer(club)", "#     except ObjectDoesNotExist:", "#         return redirect('user_profile')", "#     else:", "#         return redirect('show_club', club_id)", "#", "# @login_required", "# @owner_only", "# def approve_member_to_officer_toggle(request, user_id, club_id):", "#     current_user = request.user", "#     try:", "#         user = User.objects.get(id=user_id)", "#         club = Club.objects.get(id=club_id)", "#         current_user.toggle_approve_member_to_officer(user, club)", "#     except ObjectDoesNotExist:", "#         return redirect('applicant_officer_list', club_id)", "#     else:", "#         return redirect('applicant_officer_list', club_id)", "# >>>>>>> test_apply_membership"], "clubs/views/other_views.py": ["    # paginate_by = settings.POSTS_PER_PAGE", "    # paginate_by = settings.USERS_PER_PAGE", "    # paginate_by = settings.USERS_PER_PAGE", "    members = current_club.members.all()", "                     'current_club': current_club", "    members = current_club.members.all()", "                     'current_club': current_club", "    officers = current_club.officers.all()", "                     'current_club': current_club", "@login_required", "@owner_only", "def applicant_officer_list(request, club_id):", "    clubs = Club.objects.all()", "    current_user = request.user", "    current_club = Club.objects.get(id=club_id)", "    officer_applicants = current_club.officer_applicants.all()", "    return render(request, 'applicant_officer_list.html',", "                    {'officer_applicants': officer_applicants,", "                     'current_user': current_user,", "                     'clubs': clubs,", "                     'current_club': current_club", "                    }", "                 )", "    tournaments = current_club.tournaments.all()", "    tournament_joined = current_user.tournaments.all()", "    try:", "        current_club = Club.objects.get(id=club_id)", "    except ObjectDoesNotExist:", "        return redirect('user_profile')", "        return render(request, 'show_club.html',", "            {'current_club': current_club,", "             'current_user': current_user,", "             'clubs': clubs}", "        )"], "system/settings.py": ["    'widget_tweaks'"]}]}, {"commitAuthor": "ZhangWei0304", "commitSha": "29ce3467a75216e627db279909d1712c764b8659", "filesEdited": ["system/settings.py"], "additionsPerFile": [{"system/settings.py": ["STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')", "", "", "# Activate django-heroku", "if '/app' in os.environ['HOME']:", "    import django_heroku", "    django_heroku.settings(locals())"]}], "deletionsPerFile": [{}]}, {"commitAuthor": "FarihaChoudhury", "commitSha": "332be98ea0a52a7519e03df2cfeec3eccd8dc612", "filesEdited": ["clubs/tests/models/test_match_model.py", "clubs/tests/views/test_generate_match_view.py", "clubs/tests/views/test_generate_next_matches_view.py", "clubs/tests/views/test_log_winners_toggle_view.py", "clubs/tests/views/test_next_match_view.py"], "additionsPerFile": [{"clubs/tests/models/test_match_model.py": ["    def test_match_id_is_not_specified(self):", "        self.match.matchId = None", "        self._assert_match_is_valid()"], "clubs/tests/views/test_generate_match_view.py": ["    def test_unsuccessful_generate_match(self):", "        self.assertEqual(self.tournament, new_match.tournament)", "        # self.assertEqual(response.status_code, 200)", "        redirect_url = reverse('tournament_list', kwargs={'club_id': self.club.id})", "        response = self.client.get(self.url, follow=True)", "        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "    def test_get_generate_match_redirects_when_not_an_organiser(self):", "        user = User.objects.get(email='peterpickles@example.org')", "        self.client.login(email=user.email, password='Password123')", "        redirect_url = reverse('tournament_list', kwargs={'club_id': self.club.id})", "        response = self.client.get(self.url, follow=True)", "        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)"], "clubs/tests/views/test_generate_next_matches_view.py": ["", "    def test_get_generate_next_match_redirects_when_not_an_organiser(self):", "        user = User.objects.get(email='peterpickles@example.org')", "        self.client.login(email=user.email, password='Password123')", "        redirect_url = reverse('tournament_list', kwargs={'club_id': self.club.id})", "        response = self.client.get(self.url, follow=True)", "        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "", "    def test_unsuccessful_generate_next_match(self):", "        self.client.login(email='johndoe@example.org', password='Password123')", "        match_count_before = Match.objects.count()", "        self.tournament.participants_list.clear()", "        response = self.client.get(self.url)", "        participants_list_count = len(self.tournament.participants_list.all())", "        previous_power_of_two= self.tournament.power_Of_Two(participants_list_count)", "        self.tournament.make_Participants_Power_Of_2(previous_power_of_two)", "        participants_list =  self.tournament.participants_list.all()", "        round_input = 2", "        self.tournament.create_matches(round_input, participants_list)", "        match_count_after = Match.objects.count()", "        self.assertEqual(match_count_after, match_count_before)", "        new_match = Match.objects.latest('date')", "        self.assertEqual(self.tournament, new_match.tournament)", "        self.assertEqual(self.tournament, new_match.tournament)", "        self.assertEqual(response.status_code, 200)", "        self.assertTemplateUsed(response, 'generate_matches.html')"], "clubs/tests/views/test_log_winners_toggle_view.py": ["        self.other_user1.clubs.add(self.club)", "        self.client.login(email=self.user, password='Password123')", "        self.client.login(email=self.user.email, password='Password123')"], "clubs/tests/views/test_next_match_view.py": ["    def test_get_next_match_redirects_when_not_logged_in(self):", "    def test_get_next_match_redirects_when_not_an_organiser(self):", "        user = User.objects.get(email='petrapickles@example.org')", "        self.client.login(email=user.email, password='Password123')", "        redirect_url = reverse('tournament_list', kwargs={'club_id': self.club.id})", "        response = self.client.get(self.url, follow=True)", "        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "", "        self.client.login(email=self.user.email, password='Password123')", "        # self.client.login(email=self.other_user1.email, password='Password123')"]}], "deletionsPerFile": [{"clubs/tests/models/test_match_model.py": ["    # def test_match_id_must_not_be_blank(self):", "    #     self.match.matchId = None", "    #     self._assert_match_is_invalid()", "    #", "    # def test_tournament_name_must_be_unique(self):", "    #     self.tournament.tournament_name = self.other_tournament.tournament_name", "    #     self._assert_tournament_is_invalid()", "    #", "    # def test_tournament_name_must_not_be_over_50_characters(self):", "    #     self.tournament.tournament_name = 'x' * 51", "    #     self._assert_tournament_is_invalid()", "    #", "    # def test_name_can_be_50_characters(self):", "    #     self.tournament.tournament_name = 'x' * 50", "    #     self._assert_tournament_is_valid()", "", "", "# Description Tests:", "    # def test_short_description_can_not_be_blank(self):", "    #     self.tournament.short_description = None", "    #     self._assert_tournament_is_valid()", "    #", "    # def test_short_description_must_not_be_over_100_characters(self):", "    #     self.tournament.short_description = 'x' * 141", "    #     self._assert_tournament_is_invalid()", "    #", "    # def test_short_description_can_be_140_characters(self):", "    #     self.tournament.short_description = 'x' * 140", "    #     self._assert_tournament_is_valid()", "    #", "    # def test_short_description_need_not_be_unique(self):", "    #     self.tournament.short_description = self.other_tournament.short_description", "    #     self._assert_tournament_is_valid()", "", "# Number of participants Tests:", "    # def test_number_of_participants_can_not_be_under_2_participants(self):", "    #     self.tournament.number_of_participants = 1", "    #     self._assert_tournament_is_valid()", "    #", "    # def test_number_of_participants_can_not_be_over_16_participants(self):", "    #     self.tournament.number_of_participants = 17", "    #     self._assert_tournament_is_valid()", "    #", "    # def test_number_of_applicants_must_not_be_blank(self):", "    #     self.tournament.number_of_participants = None", "    #     self._assert_tournament_is_invalid()", "", ""], "clubs/tests/views/test_generate_match_view.py": ["", "        # self.data = { 'club_name': 'Test club',", "        #             'location': 'London',", "        #             'description': 'test club description'}", "", "", "    # def test_get_create_club_is_forbidden(self):", "    #     self.client.login(username=self.user.email, password=\"Password123\")", "    #     club_count_before = Club.objects.count()", "    #     response = self.client.get(self.url, follow=True)", "    #     club_count_after = Club.objects.count()", "    #     self.assertEqual(club_count_after, club_count_before)", "    #     self.assertEqual(response.status_code, 403)", "", "", "", "", "    # def _create_tournament_participants_(self, user_count=13):", "    #         for user_id in range(user_count):", "    #             new_participant = User.objects.create_user(f'@user{user_id}',", "    #                 email=f'user{user_id}@test.org',", "    #                 password='Password123',", "    #                 first_name=f'First{user_id}',", "    #                 last_name=f'Last{user_id}',", "    #                 bio=f'Bio {user_id}',", "    #             )", "    #             new_participant.clubs.add(self.club)", "    #             self.club.members.add(new_participant)", "    #             self.tournament.participants_list.add(new_participant)", "", "", "", "", "", "    def test_unsuccessful_new_match(self):", "        # self.data['location'] = \"\"", "", "", "", "        # response_url = reverse('generate_matches')", "        # self.assertRedirects(", "        #     response, response_url,", "        #     status_code=302, target_status_code=200,", "        #     fetch_redirect_response=True", "        # )", "", "", "    # def test_cannot_create_club_for_other_user(self):", "    #     self.client.login(email='johndoe@example.org', password='Password123')", "    #     other_user = User.objects.get(email='janedoe@example.org')", "    #     self.data['club_owner'] = other_user.id", "    #     club_count_before = Club.objects.count()", "    #     response = self.client.post(self.url, self.data, follow=True)", "    #     club_count_after = Club.objects.count()", "    #     self.assertEqual(club_count_after, club_count_before+1)", "    #     new_club = Club.objects.latest('created_at')", "    #     self.assertEqual(self.user, new_club.club_owner)"], "clubs/tests/views/test_generate_next_matches_view.py": ["", "    # def test_unsuccessful_new_match(self):", "    #     self.client.login(email='johndoe@example.org', password='Password123')", "    #     club_count_before = Club.objects.count()", "    #     self.data['location'] = \"\"", "    #     response = self.client.post(self.url, self.data, follow=True)", "    #     club_count_after = Club.objects.count()", "    #     self.assertEqual(club_count_after, club_count_before)", "    #     self.assertTemplateUsed(response, 'create_club.html')"], "clubs/tests/views/test_log_winners_toggle_view.py": ["    def test_get_log_winners_toggle_redirects_when_not_an_organiser(self):", "        user = User.objects.get(email='petrapickles@example.org')", "        self.client.login(email=user.email, password='Password123')", "        redirect_url = reverse('generate_next_matches', kwargs={'club_id': self.club.id, 'tournament_id': self.tournament.id})", "        response = self.client.get(self.url, follow=True)", "        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)", "", "", "        self.client.login(email=self.other_user1.email, password='Password123')", "", "        self.client.login(email=self.other_user3.email, password='Password123')", ""], "clubs/tests/views/test_next_match_view.py": ["    def test_get_log_winners_toggle_redirects_when_not_logged_in(self):", "        self.client.login(email=self.other_user1.email, password='Password123')"]}]}]